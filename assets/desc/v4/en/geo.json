[
    {
        "name": "id",
        "type": "string",
        "desc": "Component ID, not specified by default. If specified, it can be used to refer the component in option or API.",
        "children": []
    },
    {
        "name": "show",
        "type": "boolean",
        "default": "true",
        "desc": "Whether to show the geo component.",
        "children": []
    },
    {
        "name": "map",
        "type": "string",
        "default": "''",
        "desc": "Map charts.\n\nDue to the increase of fineness of map, ECharts 3 doesn't include map data by default for package size consideration. You may find map files you need on [map download page](http://ecomfe.github.io/echarts-builder-web/map3.html) and then include and register them in ECharts.\n\nTwo formats of map data are provided in ECharts, one of which can be included in `<script>` tag as JavaScript file, and the other of is in JSON format and should be loaded using AJAX. Map name and data will be loaded automatically once the JavaScript file is loaded, while in the JSON form, you have to assign name explicitly.\n\n\nHere are examples of these two types:\n\n** JavaScript importing example **\n\n```html\n<script src=\"echarts.js\"></script>\n<script src=\"map/js/china.js\"></script>\n<script>\nvar chart = echarts.init(document.getElmentById('main'));\nchart.setOption({\nseries: [{\ntype: 'map',\nmap: 'china'\n}]\n});\n</script>\n```\n\n** JSON importing example **\n\n```js\n$.get('map/json/china.json', function (chinaJson) {\necharts.registerMap('china', chinaJson);\nvar chart = echarts.init(document.getElmentById('main'));\nchart.setOption({\nseries: [{\ntype: 'map',\nmap: 'china'\n}]\n});\n});\n```\n\nECharts uses [geoJSON](http://geojson.org/) format as map outline. Besides the methods introduced above, you can also get [geoJSON](http://geojson.org/) data through in other methods if you like and register it in ECharts. Reference to [USA Population Estimates](map-usa) for more information.",
        "children": []
    },
    {
        "name": "roam",
        "type": [
            "boolean",
            "string"
        ],
        "default": "false",
        "desc": "Whether to enable mouse zooming and translating. `false` by default. If either zooming or translating is wanted, it can be set to `'scale'` or `'move'`. Otherwise, set it to be `true` to enable both.",
        "children": []
    },
    {
        "name": "center",
        "type": "Array",
        "desc": "Center of current view-port, in longitude and latitude.\n\nExample:\n```js\ncenter: [115.97, 29.71]\n```",
        "children": []
    },
    {
        "name": "aspectScale",
        "type": "number",
        "default": "0.75",
        "desc": "Used to scale aspect of geo.\n\nThe final aspect is calculated by: `geoBoundingRect.width / geoBoundingRect.height * aspectScale`.",
        "children": []
    },
    {
        "name": "boundingCoords",
        "type": "Array",
        "default": "null",
        "desc": "Two dimension array. Define coord of left-top, right-bottom in layout box.\n\n```js\n// A complete world map\nmap: 'world',\nleft: 0, top: 0, right: 0, bottom: 0,\nboundingCoords: [\n// [lng, lat] of left-top corner\n[-180, 90],\n// [lng, lat] of right-bottom corner\n[180, -90]\n],\n```",
        "children": []
    },
    {
        "name": "zoom",
        "type": "number",
        "default": "1",
        "desc": "Zoom rate of current view-port.",
        "children": []
    },
    {
        "name": "scaleLimit",
        "type": "Object",
        "desc": "Limit of scaling, with `min` and `max`. `1` by default.",
        "children": [
            {
                "name": "min",
                "type": "number",
                "desc": "Minimum scaling",
                "children": []
            },
            {
                "name": "max",
                "type": "number",
                "desc": "Maximum scaling",
                "children": []
            }
        ]
    },
    {
        "name": "nameMap",
        "type": "Object",
        "desc": "Name mapping for customized areas. For example:\n```js\n{\n'China' : '中国'\n}\n```",
        "children": []
    },
    {
        "name": "nameProperty",
        "type": "string",
        "default": "'name'",
        "desc": "> Since `v4.8.0`\n\n\n\n\ncustomized property key for GeoJSON feature. By default, 'name' is used as primary key to identify GeoJSON feature.\nFor example:\n```js\n{\nnameProperty: 'NAME', // key to connect following data point to GeoJSON region {\"type\":\"Feature\",\"id\":\"01\",\"properties\":{\"NAME\":\"Alabama\"}, \"geometry\": { ... }}\ndata:[\n{name: 'Alabama', value: 4822023},\n{name: 'Alaska', value: 731449},\n]\n}\n```",
        "children": []
    },
    {
        "name": "selectedMode",
        "type": [
            "boolean",
            "string"
        ],
        "default": "false",
        "desc": "Selected mode decides whether multiple selecting is supported. By default, `false` is used for disabling selection. Its value can also be `'single'` for selecting single area, or `'multiple'` for selecting multiple areas.",
        "children": []
    },
    {
        "name": "label",
        "type": "Object",
        "desc": "Text label of , to explain some data information about graphic item like value, name and so on. `label` is placed under `itemStyle` in ECharts 2.x. In ECharts 3, to make the configuration structure flatter, `label`is taken to be at the same level with `itemStyle`, and has `emphasis` as `itemStyle` does.",
        "children": [
            {
                "name": "show",
                "type": "boolean",
                "default": "false",
                "desc": "Whether to show label.",
                "children": []
            },
            {
                "name": "position",
                "type": [
                    "string",
                    "Array"
                ],
                "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```js\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                "children": []
            },
            {
                "name": "distance",
                "type": "number",
                "default": "5",
                "desc": "Distance to the host graphic element. Works when position is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                "children": []
            },
            {
                "name": "rotate",
                "type": "number",
                "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                "children": []
            },
            {
                "name": "offset",
                "type": "Array",
                "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                "children": []
            },
            {
                "name": "formatter",
                "type": [
                    "string",
                    "Function"
                ],
                "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```js\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```js\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n### fontSize(number)=12\n\nfont size.\n\n\n\n### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                "children": []
            },
            {
                "name": "lineHeight",
                "type": "number",
                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n### shadowBlur(number)=0\n\nShow blur of the text block.\n\n### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                "children": []
            },
            {
                "name": "width",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                "children": []
            },
            {
                "name": "height",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                "children": []
            },
            {
                "name": "rich",
                "type": "Object",
                "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```js\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                "children": [
                    {
                        "name": "<style_name>",
                        "type": "Object",
                        "desc": "##### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n##### fontSize(number)=12\n\nfont size.\n\n\n\n##### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n##### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": [
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n##### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n##### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n##### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n##### shadowBlur(number)=0\n\nShow blur of the text block.\n\n##### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n##### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n##### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n##### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n##### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n##### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n##### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name": "itemStyle",
        "type": "Object",
        "desc": "Graphic style of Map Area Border, `emphasis` is the style when it is highlighted, like being hovered by mouse, or highlighted via legend connect.",
        "children": [
            {
                "name": "areaColor",
                "type": "Color",
                "default": "'#eee'",
                "desc": "Area filling color.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```\n\n\n\n\n### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "Color",
                "default": "\"#000\"",
                "desc": "border color, whose format is similar to that of `color`.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "border width. No border when it is set to be 0.",
                "children": []
            },
            {
                "name": "borderType",
                "type": "string",
                "default": "'solid'",
                "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                "children": []
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                "children": []
            },
            {
                "name": "shadowColor",
                "type": "Color",
                "desc": "Shadow color. Support same format as `color`.",
                "children": []
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "Offset distance on the horizontal direction of shadow.",
                "children": []
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "Offset distance on the vertical direction of shadow.",
                "children": []
            },
            {
                "name": "opacity",
                "type": "number",
                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                "children": []
            }
        ]
    },
    {
        "name": "emphasis",
        "type": "Object",
        "desc": "Map area style in highlighted state.",
        "children": [
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "areaColor",
                        "type": "Color",
                        "default": "'#eee'",
                        "desc": "Area filling color.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```\n\n\n\n\n#### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "Color",
                        "default": "\"#000\"",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.",
                        "children": []
                    },
                    {
                        "name": "borderType",
                        "type": "string",
                        "default": "'solid'",
                        "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "Color",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": []
                    }
                ]
            },
            {
                "name": "label",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether to show label.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": [
                            "string",
                            "Array"
                        ],
                        "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```js\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "Distance to the host graphic element. Works when position is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                        "children": []
                    },
                    {
                        "name": "rotate",
                        "type": "number",
                        "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                        "children": []
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```js\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```js\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n#### fontSize(number)=12\n\nfont size.\n\n\n\n#### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n#### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": []
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n#### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n#### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n#### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n#### shadowBlur(number)=0\n\nShow blur of the text block.\n\n#### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n#### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                        "children": []
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n#### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n#### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n#### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n#### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n#### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                        "children": []
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```js\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "Object",
                                "desc": "###### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n###### fontSize(number)=12\n\nfont size.\n\n\n\n###### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "number",
                                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n###### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n###### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n###### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n###### shadowBlur(number)=0\n\nShow blur of the text block.\n\n###### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n###### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                                        "children": []
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n###### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n###### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n###### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n###### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n###### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name": "zlevel",
        "type": "number",
        "default": "0",
        "desc": "`zlevel` value of all graphical elements in .\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.",
        "children": []
    },
    {
        "name": "z",
        "type": "number",
        "default": "2",
        "desc": "`z` value of all graphical elements in , which controls order of drawing graphical components. Components with smaller `z` values may be overwritten by those with larger `z` values.\n\n`z` has a lower priority to `zlevel`, and will not create new Canvas.",
        "children": []
    },
    {
        "name": "left",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the left side of the container.\n\n`left` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'left'`, `'center'`, or `'right'`.\n\nIf the `left` value is set to be `'left'`, `'center'`, or `'right'`, then the component will be aligned automatically based on position.",
        "children": []
    },
    {
        "name": "top",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the top side of the container.\n\n`top` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'top'`, `'middle'`, or `'bottom'`.\n\nIf the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`, then the component will be aligned automatically based on position.",
        "children": []
    },
    {
        "name": "right",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the right side of the container.\n\n`right` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\nAdaptive by default.",
        "children": []
    },
    {
        "name": "bottom",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the bottom side of the container.\n\n`bottom` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\nAdaptive by default.",
        "children": []
    },
    {
        "name": "layoutCenter",
        "type": "Array",
        "default": "null",
        "desc": "`layoutCenter` and `layoutSize` provides layout strategy other than `left/right/top/bottom/width/height`.\n\nWhen using `left/right/top/bottom/width/height`, it is hard to put the map inside a box area with a fixed width-height ratio. In this case, `layoutCenter` attribute can be used to define the center position of map, and `layoutSize` can be used to define the size of map. For example:\n\n```js\nlayoutCenter: ['30%', '30%'],\n// If width-height ratio is larger than 1, then width is set to be 100.\n// Otherwise, height is set to be 100.\n// This makes sure that it will not exceed the area of 100x100\nlayoutSize: 100\n```\n\nAfter setting these two values, `left/right/top/bottom/width/height` becomes invalid.",
        "children": []
    },
    {
        "name": "layoutSize",
        "type": [
            "number",
            "string"
        ],
        "desc": "Size of map, see `layoutCenter` for more information. Percentage relative to screen width, and absolute pixel values are supported.",
        "children": []
    },
    {
        "name": "regions",
        "type": "Array",
        "desc": "Configure style for specified regions.\nFor example:\n```js\nregions: [{\nname: 'Guangdong',\nitemStyle: {\nareaColor: 'red',\ncolor: 'red'\n}\n}]\n```\n\nThe region color can also be controlled by map series. See [series-map.geoIndex](https://echarts.apache.org/en/option.html#series-map.geoIndex).",
        "children": [
            {
                "name": "name",
                "type": "string",
                "desc": "Name of area in map, like `'Guangdong'`, or `'Zhejiang'`.",
                "children": []
            },
            {
                "name": "selected",
                "type": "boolean",
                "default": "false",
                "desc": "Whether this area is selected.",
                "children": []
            },
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "Item style of this area.",
                "children": [
                    {
                        "name": "areaColor",
                        "type": "Color",
                        "desc": "Area color in the map.\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```\n\n\n\n\n#### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "Color",
                        "default": "\"#000\"",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.",
                        "children": []
                    },
                    {
                        "name": "borderType",
                        "type": "string",
                        "default": "'solid'",
                        "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "Color",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": []
                    },
                    {
                        "name": "emphasis",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "areaColor",
                                "type": "Color",
                                "desc": "Area color in the map.\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```\n\n\n\n\n##### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "Color",
                                "default": "\"#000\"",
                                "desc": "border color, whose format is similar to that of `color`.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "border width. No border when it is set to be 0.",
                                "children": []
                            },
                            {
                                "name": "borderType",
                                "type": "string",
                                "default": "'solid'",
                                "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "Color",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": []
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "name": "label",
                "type": "Object",
                "desc": "Text label of , to explain some data information about graphic item like value, name and so on. `label` is placed under `itemStyle` in ECharts 2.x. In ECharts 3, to make the configuration structure flatter, `label`is taken to be at the same level with `itemStyle`, and has `emphasis` as `itemStyle` does.",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether to show label.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": [
                            "string",
                            "Array"
                        ],
                        "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```js\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                        "children": []
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "Distance to the host graphic element. Works when position is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                        "children": []
                    },
                    {
                        "name": "rotate",
                        "type": "number",
                        "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                        "children": []
                    },
                    {
                        "name": "offset",
                        "type": "Array",
                        "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                        "children": []
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```js\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```js\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n#### fontSize(number)=12\n\nfont size.\n\n\n\n#### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n#### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": []
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n#### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n#### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n#### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n#### shadowBlur(number)=0\n\nShow blur of the text block.\n\n#### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n#### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                        "children": []
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n#### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n#### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n#### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n#### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n#### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                        "children": []
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```js\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "Object",
                                "desc": "###### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n###### fontSize(number)=12\n\nfont size.\n\n\n\n###### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "number",
                                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n###### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n###### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n###### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n###### shadowBlur(number)=0\n\nShow blur of the text block.\n\n###### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n###### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                                        "children": []
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n###### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n###### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n###### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n###### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n###### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "emphasis",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether to show label.",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": [
                                    "string",
                                    "Array"
                                ],
                                "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```js\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                                "children": []
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "Distance to the host graphic element. Works when position is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                                "children": []
                            },
                            {
                                "name": "rotate",
                                "type": "number",
                                "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                                "children": []
                            },
                            {
                                "name": "offset",
                                "type": "Array",
                                "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                                "children": []
                            },
                            {
                                "name": "formatter",
                                "type": [
                                    "string",
                                    "Function"
                                ],
                                "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```js\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```js\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n##### fontSize(number)=12\n\nfont size.\n\n\n\n##### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n##### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": []
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n##### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n##### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n##### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n##### shadowBlur(number)=0\n\nShow blur of the text block.\n\n##### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n##### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n##### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n##### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n##### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n##### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n##### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                                "children": []
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```js\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "Object",
                                        "desc": "####### color(Color)=\"#fff\"\n\ntext color.\n\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n####### fontSize(number)=12\n\nfont size.\n\n\n\n####### align(string)=\n\nHorizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```js\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\nVertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "number",
                                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```\n\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\nBackground color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\nBorder color of the text fragment.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\nBorder width of the text fragment.\n\n####### borderRadius(number)=0\n\nBorder radius of the text fragment.\n\n####### padding(number|Array)=0\n\nPadding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n####### shadowColor(Color)='transparent'\n\nShadow color of the text block.\n\n####### shadowBlur(number)=0\n\nShow blur of the text block.\n\n####### shadowOffsetX(number)=0\n\nShadow X offset of the text block.\n\n####### shadowOffsetY(number)=0\n\nShadow Y offset of the text block.",
                                                "children": []
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n####### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\nIf set as `'auto'`, the color will assigned as visual color, such as series color.\n\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n####### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n####### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n####### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n####### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name": "silent",
        "type": "boolean",
        "default": "false",
        "desc": "Whether to ignore mouse events. Default value is false, for triggering and responding to mouse events.",
        "children": []
    }
]