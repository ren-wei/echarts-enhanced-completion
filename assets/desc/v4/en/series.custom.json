[
    {
        "name": "type",
        "type": "string",
        "default": "'custom'",
        "desc": "",
        "children": []
    },
    {
        "name": "id",
        "type": "string",
        "desc": "Component ID, not specified by default. If specified, it can be used to refer the component in option or API.",
        "children": []
    },
    {
        "name": "name",
        "type": "string",
        "desc": "Series name used for displaying in [tooltip](https://echarts.apache.org/en/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/en/option.html#legend), or updating data and configuration with `setOption`.",
        "children": []
    },
    {
        "name": "legendHoverLink",
        "type": "boolean",
        "default": "true",
        "desc": "Whether to enable highlighting chart when [legend](https://echarts.apache.org/en/option.html#legend) is being hovered.",
        "children": []
    },
    {
        "name": "coordinateSystem",
        "type": "string",
        "default": "'cartesian2d'",
        "desc": "The coordinate used in the series, whose options are:\n\n\n+ `null` or `'none'`\n\nNo coordinate.\n\n\n\n\n+ `'cartesian2d'`\n\nUse a two-dimensional rectangular coordinate (also known as Cartesian coordinate), with [xAxisIndex](https://echarts.apache.org/en/option.html#series-custom.xAxisIndex) and [yAxisIndex](https://echarts.apache.org/en/option.html#series-custom.yAxisIndex) to assign the corresponding axis component.\n\n\n\n\n+ `'polar'`\n\nUse polar coordinates, with [polarIndex](https://echarts.apache.org/en/option.html#series-custom.polarIndex) to assign the corresponding polar coordinate component.\n\n\n\n\n+ `'geo'`\n\nUse geographic coordinate, with [geoIndex](https://echarts.apache.org/en/option.html#series-custom.geoIndex) to assign the corresponding geographic coordinate components.\n\n\n\n\n\n\n+ `'none'`\n\nDo not use coordinate system.",
        "children": []
    },
    {
        "name": "xAxisIndex",
        "type": "number",
        "default": "0",
        "desc": "Index of [x axis](https://echarts.apache.org/en/option.html#xAxis) to combine with, which is  useful for multiple x axes in one chart.",
        "children": []
    },
    {
        "name": "yAxisIndex",
        "type": "number",
        "default": "0",
        "desc": "Index of [y axis](https://echarts.apache.org/en/option.html#yAxis) to combine with, which is  useful for multiple y axes in one chart.",
        "children": []
    },
    {
        "name": "polarIndex",
        "type": "number",
        "default": "0",
        "desc": "Index of [polar coordinate](https://echarts.apache.org/en/option.html#polar) to combine with, which is useful for multiple polar axes in one chart.",
        "children": []
    },
    {
        "name": "geoIndex",
        "type": "number",
        "default": "0",
        "desc": "Index of [geographic coordinate](https://echarts.apache.org/en/option.html#geo) to combine with, which is useful for multiple geographic axes in one chart.",
        "children": []
    },
    {
        "name": "calendarIndex",
        "type": "number",
        "default": "0",
        "desc": "Index of [calendar coordinates](https://echarts.apache.org/en/option.html#calendar) to combine with, which is useful for multiple calendar coordinates in one chart.",
        "children": []
    },
    {
        "name": "renderItem",
        "type": "Function",
        "desc": "`custom series` requires developers to write a render logic by themselves. This render logic is called [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem).\n\nFor example:\n\n```js\nvar option = {\n...,\nseries: [{\ntype: 'custom',\nrenderItem: function (params, api) {\nvar categoryIndex = api.value(0);\nvar start = api.coord([api.value(1), categoryIndex]);\nvar end = api.coord([api.value(2), categoryIndex]);\nvar height = api.size([0, 1])[1] * 0.6;\n\nvar rectShape = echarts.graphic.clipRectByRect({\nx: start[0],\ny: start[1] - height / 2,\nwidth: end[0] - start[0],\nheight: height\n}, {\nx: params.coordSys.x,\ny: params.coordSys.y,\nwidth: params.coordSys.width,\nheight: params.coordSys.height\n});\n\nreturn rectShape && {\ntype: 'rect',\nshape: rectShape,\nstyle: api.style()\n};\n},\ndata: data\n}]\n}\n```\n\n[renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) will be called on each data item.\n\n[renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) provides two parameters:\n+ [params](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.params): provides info about the current series and data and coordinate system.\n+ [api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api): includes some methods.\n\n[renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) method should returns graphic elements definitions.See [renderItem.return](https://echarts.apache.org/en/option.html#series-custom.renderItem.return).\n\nGenerally, the main process of [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) is that retrieve value from data and convert them to graphic elements on the current coordinate system. Two methods in [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api) are always used in this procedure:\n+ [api.value(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.value) is used to retrieve value from data. For example, `api.value(0)` retrieve the value of the first dimension in the current data item.\n+ [api.coord(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.coord) is used to convert data to coordinate. For example, `var point = api.coord([api.value(0), api.value(1)])` converet the data to the point on the current coordinate system.\n\nSometimes [api.size(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.size) method is needed, which calculates the size on the coordinate system by a given data range.\n\nMoreover, [api.style(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.style) method can be used to set style. It provides not only the style settings specified in [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle), but also the result of visual mapping. This method can also be called like `api.style({fill: 'green', stroke: 'yellow'})` to override those style settings.\n\n\n\n\n\n\n\n\n\n\n\n\n### arguments\n\nParameters of `renderItem`.",
        "children": [
            {
                "name": "params",
                "type": "Object",
                "desc": "The first parameter of `renderItem`, including:\n\n```js\n{\ncontext: // {string} An object that developers can store something temporarily here. Life cycle: current round of rendering.\nseriesId: // {string} The id of this series.\nseriesName: // {string} The name of this series.\nseriesIndex: // {number} The index of this series.\ndataIndex: // {number} The index of this data item.\ndataIndexInside: // {number} The index of this data item in the current data window (see dataZoom).\ndataInsideLength: // {number} The count of data in the current data window (see dataZoom).\nactionType: // {string} The type of action that trigger this render.\ncoordSys: // coordSys is variable by different types of coordinate systems:\ncoordSys: {\ntype: 'cartesian2d',\nx: // {number} x of grid rect\ny: // {number} y of grid rect\nwidth: // {number} width of grid rect\nheight: // {number} height of grid rect\n},\ncoordSys: {\ntype: 'calendar',\nx: // {number} x of calendar rect\ny: // {number} y of calendar rect\nwidth: // {number} width of calendar rect\nheight: // {number} height of calendar rect\ncellWidth: // {number} calendar cellWidth\ncellHeight: // {number} calendar cellHeight\nrangeInfo: {\nstart: // date start of calendar.\nend: // date end of calendar.\nweeks: // number of weeks in calendar.\ndayCount: // day count in calendar.\n}\n},\ncoordSys: {\ntype: 'geo',\nx: // {number} x of geo rect\ny: // {number} y of geo rect\nwidth: // {number} width of geo rect\nheight: // {number} height of geo rect\nzoom: // {number} zoom ratio, 1 if no zoom, 0.5 means shrink to 50%.\n},\ncoordSys: {\ntype: 'polar',\ncx: // {number} x of polar center.\ncy: // {number} y of polar center.\nr: // {number} outer radius of polar.\nr0: // {number} inner radius of polar.\n},\ncoordSys: {\ntype: 'singleAxis',\nx: // {number} x of singleAxis rect\ny: // {number} y of singleAxis rect\nwidth: // {number} width of singleAxis rect\nheight: // {number} height of singleAxis rect\n}\n}\n```\n\nDifference between `dataIndex` and `dataIndexInside`:\n\n+ `dataIndex` is the index of a `dataItem` in the original data.\n+ `dataIndexInside` is the index of a `dataItem` in the current data window (see [dataZoom](https://echarts.apache.org/en/option.html#dataZoom).\n\n[renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api) uses `dataIndexInside` as the input parameter but not `dataIndex`, because conversion from `dataIndex` to `dataIndexInside` is time-consuming.",
                "children": []
            },
            {
                "name": "api",
                "type": "Object",
                "desc": "The second parameter of `renderItem`.",
                "children": [
                    {
                        "name": "value",
                        "type": "Function",
                        "desc": "Get value on the given dimension.\n\n```\n@param {number} dimension The given dimension. (index from 0).\n@param {number} [dataIndexInside] In most cases it is not necessary.\n@return {number} The value.\n```",
                        "children": []
                    },
                    {
                        "name": "coord",
                        "type": "Function",
                        "desc": "Convert data to coordinate.\n\n```\n@param {Array.<number>} data.\n@return {Array.<number>} Point on canvas, at least includes [x, y].\nIn polar, it also contains:\npolar: [x, y, radius, angle]\n```",
                        "children": []
                    },
                    {
                        "name": "size",
                        "type": "Function",
                        "desc": "Get the size by the given data range.\n\nFor example, in `cartesian2d`, suppose calling `api.size([2, 4])` returns `[12.4, 55]`. It represents that on x axis, data range `2` corresponds to size `12.4`, and on y axis data range `4` corresponds to size `55`.\n\nIn some coordinate systems (for example, polar) or when log axis is used, the size is different in different point. So the second parameter is necessary to calculate size on the given point.\n\n```\n@param {Array.<number>} dataSize Data range.\n@param {Array.<number>} dataItem The point where the size will be calculated.\n@return {Array.<number>} The size.\n```",
                        "children": []
                    },
                    {
                        "name": "style",
                        "type": "Function",
                        "desc": "The method obtains style info defined in [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle), and visual info obtained by visual mapping, and return them. Those returned info can be assigned to `style` attribute of graphic element definition directly. Developers can also override style info by calling this method like this: `api.style({fill: 'green', stroke: 'yellow'})`.\n\n```\n@param {Object} [extra] Extra style info.\n@param {number} [dataIndexInside] In most cases, this parameter is not necessary.\n@return {Object} Style info, which can be assigned to `style` attribute of graphic element definition directly.\n```",
                        "children": []
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Function",
                        "desc": "The method obtains style info defined in [series.itemStyle.emphasis](https://echarts.apache.org/en/option.html#series-custom.itemStyle.emphasis), and visual info obtained by visual mapping, and return them. Those returned info can be assigned to `style` attribute of graphic element definition directly. Developers can also override style info by calling this method like this: `api.style({fill: 'green', stroke: 'yellow'})`.\n\n```\n@param {Object} [extra] Extra style info.\n@param {number} [dataIndexInside] In most cases, this parameter is not necessary.\n@return {Object} Style info, which can be assigned to `style` attribute of graphic element definition directly.\n```",
                        "children": []
                    },
                    {
                        "name": "visual",
                        "type": "Function",
                        "desc": "Get the visual info. It is rarely be used.\n\n```\n@param {string} visualType 'color', 'symbol', 'symbolSize', ...\n@param {number} [dataIndexInside] In most cases, this parameter is not necessary.\n@return {string|number} The value of visual.\n```",
                        "children": []
                    },
                    {
                        "name": "barLayout",
                        "type": "Function",
                        "desc": "When `barLayout` is needed, (for example, when attaching some extra graphic elements to bar chart), this method can be used to obtain bar layout info.\n\nSee a [sample](custom-bar-trend).\n\n```\n@param {Object} opt\n@param {number} opt.count How many bars in each group.\n@param {number|string} [opt.barWidth] Width of a bar.\nCan be an absolute value like `40` or a percent value like `'60%'`.\nThe percent is based on the calculated category width.\n@param {number|string} [opt.barMaxWidth] Max width of a bar.\nCan be an absolute value like `40` or a percent value like `'60%'`.\nThe percent is based on the calculated category width.\nHas higer priority than `opt.barWidth`.\n@param {number|string} [opt.barMinWidth] Min width of a bar.\nCan be an absolute value like `40` or a percent value like `'60%'`.\nThe percent is based on the calculated category width.\nHas higer priority than `opt.barWidth`.\n@param {number} [opt.barGap] Gap of bars in a group.\n@param {number} [opt.barCategoryGap] Gap of groups.\n@return {Array.<Object>} [{\nwidth: {number} Width of a bar.\noffset: {number} Offset of a bar, based on the left most edge.\noffsetCenter: {number} bar Offset of a bar, based on the center of the bar.\n}, ...]\n```",
                        "children": []
                    },
                    {
                        "name": "currentSeriesIndices",
                        "type": "Function",
                        "desc": "Obtain the current series index. Notice that the `currentSeriesIndex` is different from `seriesIndex` when legend is used to filter some series.\n\n```\n@return {number}\n```",
                        "children": []
                    },
                    {
                        "name": "font",
                        "type": "Function",
                        "desc": "Obtain font string, which can be used on style setting directly.\n\n```\n@param {Object} opt\n@param {string} [opt.fontStyle]\n@param {number} [opt.fontWeight]\n@param {number} [opt.fontSize]\n@param {string} [opt.fontFamily]\n@return {string} font string.\n```",
                        "children": []
                    },
                    {
                        "name": "getWidth",
                        "type": "Function",
                        "desc": "```\n@return {number} Width of echarts containter.\n```",
                        "children": []
                    },
                    {
                        "name": "getHeight",
                        "type": "Function",
                        "desc": "```\n@return {number} Height of echarts container.\n```",
                        "children": []
                    },
                    {
                        "name": "getZr",
                        "type": "Function",
                        "desc": "```\n@return {module:zrender} zrender instance.\n```",
                        "children": []
                    },
                    {
                        "name": "getDevicePixelRatio",
                        "type": "Function",
                        "desc": "```\n@return {number} The current devicePixelRatio.\n```",
                        "children": []
                    }
                ]
            },
            {
                "name": "return",
                "type": "Object",
                "desc": "`renderItem` should returns graphic element definitions. Each graphic element is an object. See [graphic](https://echarts.apache.org/en/option.html#graphic.elements) for detailed info. (But width\\height\\top\\bottom is not supported here)\n\nIf nothing should be rendered in this data item, just returns nothing.\n\nFor example:\n```js\n// Returns a rectangular.\n{\ntype: 'rect',\nshape: {\nx: x, y: y, width: width, height: height\n},\nstyle: api.style()\n}\n```\n\n```js\n// Returns a group of elements.\n{\ntype: 'group',\n// If diffChildrenByName is set as `true`, `child.name` will be used\n// to diff children, which improves animation transition but degrade\n// performance. The default value is `false`.\n// diffChildrenByName: true,\nchildren: [{\ntype: 'circle',\nshape: {\ncx: cx, cy: cy, r: r\n},\nstyle: api.style()\n}, {\ntype: 'line',\nshape: {\nx1: x1, y1: y1, x2: x2, y2: y2\n},\nstyle: api.style()\n}]\n}\n```",
                "children": []
            },
            {
                "name": "return_group",
                "type": "Object",
                "desc": "`group` is the only type that can contain children, so that a group of elements can be positioned and transformed together.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "group",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "0",
                        "desc": "Specify width of this `group`.\n\nThis width is only used for the positioning of its children.\n\nWhen width is `0`, children can also be positioned according to its parent using `left: 'center'`.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "0",
                        "desc": "Specify height of this `group`.\n\nThis height is only used for the positioning of its children.\n\nWhen height is `0`, children can also be positioned according to its parent using `top: 'middle'`.",
                        "children": []
                    },
                    {
                        "name": "diffChildrenByName",
                        "type": "boolean",
                        "default": "false",
                        "desc": "In [custom series](https://echarts.apache.org/en/option.html#series-custom), when `diffChildrenByName` is set as `true`, for each [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) returned from [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem), \"diff\" will be performed to its [children](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.children) according to the [name](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.name) attribute of each graphic elements. Here \"diff\" means that map the coming graphic elements to the existing graphic elements when repainting according to `name`, which enables the transition animation if data is modified.\n\nBut notice that the operation is performance consuming, do not use it for large data amount.",
                        "children": []
                    },
                    {
                        "name": "children",
                        "type": "Array",
                        "desc": "A list of children, each item is a declaration of an element.",
                        "children": []
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "default": "group",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_path",
                "type": "Object",
                "desc": "Use [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData) to describe a path. Can be used to draw icons or any other shapes fitting the specified size by auto transforming.\n\nSee examples:\n[icons](custom-calendar-icon) and [shapes](custom-gantt-flight).\n\nAbout width/height, cover/contain, see\n[layout](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.layout).",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "path",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "pathData",
                                "type": "string",
                                "desc": "[SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData).\n\nFor example, `'M0,0 L0,-20 L30,-20 C42,-20 38,-1 50,-1 L70,-1 L70,0 Z'`.\n\nIf [width](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.width), [height](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.height), [x](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.x) and [y](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.y) specified, `pathData` will be transformed to fit the defined rect. If they are not specified, do not do that.\n\n[layout](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.layout) can be used to specify the transform strategy.\n\nSee examples:\n[icons](custom-calendar-icon) and [shapes](custom-gantt-flight).",
                                "children": []
                            },
                            {
                                "name": "d",
                                "type": "string",
                                "desc": "Alias of [pathData](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.pathData).",
                                "children": []
                            },
                            {
                                "name": "layout",
                                "type": "string",
                                "default": "'center'",
                                "desc": "If [width](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.width), [height](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.height), [x](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.x) and [y](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape.y) specified, `pathData` will be transformed to fit the defined rect.\n\n`layout` can be used to specify the transform strategy.\n\nOptional value:\n+ `'center'`: Keep aspect ratio, put the path in the center of the rect, expand as far as possible but never overflow.\n+ `'cover'`: Transform the path according to the aspect ratio of the rect, fill the rect and do not overflow.",
                                "children": []
                            },
                            {
                                "name": "x",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "y",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "0",
                                "desc": "The width of the shape of the element.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The height of the shape of the element.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_image",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "image",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "image",
                                "type": "string",
                                "desc": "Specify contant of the image, can be a URL, or [dataURI](https://tools.ietf.org/html/rfc2397).",
                                "children": []
                            },
                            {
                                "name": "x",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "y",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "0",
                                "desc": "The width of the shape of the element.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The height of the shape of the element.\n\n\n\n\n\n\nMore attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                                "children": []
                            },
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_text",
                "type": "Object",
                "desc": "Text block.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "text",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "text",
                                "type": "string",
                                "default": "''",
                                "desc": "Text content. `\\n` can be used as a line break.",
                                "children": []
                            },
                            {
                                "name": "x",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "y",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "font",
                                "type": "string",
                                "desc": "Font size, font type, font weight, font color, follow the form of [css font](https://developer.mozilla.org/en-US/docs/Web/CSS/font).\n\nFor example:\n```\n// size | family\nfont: '2em \"STHeiti\", sans-serif'\n\n// style | weight | size | family\nfont: 'italic bolder 16px cursive'\n\n// weight | size | family\nfont: 'bolder 2em \"Microsoft YaHei\", sans-serif'\n```",
                                "children": []
                            },
                            {
                                "name": "textAlign",
                                "type": "string",
                                "default": "'left'",
                                "desc": "Text horizontal alignment. Optional values: `'left'`, `'center'`, `'right'`.\n\n`'left'` means the left side of the text block is specified by the [style.x](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.style.x), while `'right'` means the right side of the text block is specified by [style.y](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.style.y).",
                                "children": []
                            },
                            {
                                "name": "textVerticalAlign",
                                "type": "string",
                                "desc": "Text vertical alignment. Optional values: `'top'`, `'middle'`, `'bottom'`.\n\n\n\n\nMore attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                                "children": []
                            },
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_rect",
                "type": "Object",
                "desc": "Rectangle element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "rect",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "x",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "y",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the left-top corner of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "0",
                                "desc": "The width of the shape of the element.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The height of the shape of the element.",
                                "children": []
                            },
                            {
                                "name": "r",
                                "type": "Array",
                                "desc": "Specify border radius of the rectangular here. Generally, `r` should be `[topLeftRadius, topRightRadius, BottomRightRadius, bottomLeftRadius]`, where each item is a number.\n\nAbbreviation is enabled, for example:\n+ `r`: `1`         means `[1, 1, 1, 1]`\n+ `r`: `[1]`       means `[1, 1, 1, 1]`\n+ `r`: `[1, 2]`    means `[1, 2, 1, 2]`\n+ `r`: `[1, 2, 3]` means `[1, 2, 3, 2]`",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_circle",
                "type": "Object",
                "desc": "Circle element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "circle",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "cx",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "cy",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "r",
                                "type": "number",
                                "default": "0",
                                "desc": "Outside radius.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_ring",
                "type": "Object",
                "desc": "Ring element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "ring",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "cx",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "cy",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "r",
                                "type": "number",
                                "default": "0",
                                "desc": "Outside radius.",
                                "children": []
                            },
                            {
                                "name": "r0",
                                "type": "number",
                                "default": "0",
                                "desc": "Inside radius.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_sector",
                "type": "Object",
                "desc": "Sector element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "sector",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "cx",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "cy",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "r",
                                "type": "number",
                                "default": "0",
                                "desc": "Outside radius.",
                                "children": []
                            },
                            {
                                "name": "r0",
                                "type": "number",
                                "default": "0",
                                "desc": "Inside radius.",
                                "children": []
                            },
                            {
                                "name": "startAngle",
                                "type": "number",
                                "default": "0",
                                "desc": "start angle, in radian.",
                                "children": []
                            },
                            {
                                "name": "endAngle",
                                "type": "number",
                                "default": "Math.PI * 2",
                                "desc": "end anble, in radian.",
                                "children": []
                            },
                            {
                                "name": "clockwise",
                                "type": "boolean",
                                "default": "true",
                                "desc": "Whether draw clockwise.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_arc",
                "type": "Object",
                "desc": "Arc element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "arc",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "cx",
                                "type": "number",
                                "default": "0",
                                "desc": "The x value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "cy",
                                "type": "numbr",
                                "default": "0",
                                "desc": "The y value of the center of the element in the coordinate system of its parent.",
                                "children": []
                            },
                            {
                                "name": "r",
                                "type": "number",
                                "default": "0",
                                "desc": "Outside radius.",
                                "children": []
                            },
                            {
                                "name": "r0",
                                "type": "number",
                                "default": "0",
                                "desc": "Inside radius.",
                                "children": []
                            },
                            {
                                "name": "startAngle",
                                "type": "number",
                                "default": "0",
                                "desc": "start angle, in radian.",
                                "children": []
                            },
                            {
                                "name": "endAngle",
                                "type": "number",
                                "default": "Math.PI * 2",
                                "desc": "end anble, in radian.",
                                "children": []
                            },
                            {
                                "name": "clockwise",
                                "type": "boolean",
                                "default": "true",
                                "desc": "Whether draw clockwise.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "null",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "\"#000\"",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_polygon",
                "type": "Object",
                "desc": "Polygon element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "polygon",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "points",
                                "type": "Array",
                                "desc": "A list of points, which defines the shape, like `[[22, 44], [44, 55], [11, 44], ...]`.",
                                "children": []
                            },
                            {
                                "name": "smooth",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "default": "undefined",
                                "desc": "Whether smooth the line.\n\n+ If the value is number, bezier interpolation is used, and the value specified the level of smooth, which is in the range of `[0, 1]`.\n+ If the value is `'spline'`, Catmull-Rom spline interpolation is used.",
                                "children": []
                            },
                            {
                                "name": "smoothConstraint",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether prevent the smooth process cause the line out of the bounding box.\n\nOnly works when `smooth` is `number` (bezier smooth).",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_polyline",
                "type": "Object",
                "desc": "Polyline element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "polyline",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "points",
                                "type": "Array",
                                "desc": "A list of points, which defines the shape, like `[[22, 44], [44, 55], [11, 44], ...]`.",
                                "children": []
                            },
                            {
                                "name": "smooth",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "default": "undefined",
                                "desc": "Whether smooth the line.\n\n+ If the value is number, bezier interpolation is used, and the value specified the level of smooth, which is in the range of `[0, 1]`.\n+ If the value is `'spline'`, Catmull-Rom spline interpolation is used.",
                                "children": []
                            },
                            {
                                "name": "smoothConstraint",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether prevent the smooth process cause the line out of the bounding box.\n\nOnly works when `smooth` is `number` (bezier smooth).",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "null",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "\"#000\"",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "5",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_line",
                "type": "Object",
                "desc": "Line element.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "line",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "x1",
                                "type": "number",
                                "default": "0",
                                "desc": "x value of the start point.",
                                "children": []
                            },
                            {
                                "name": "y1",
                                "type": "number",
                                "default": "0",
                                "desc": "y value of the start point.",
                                "children": []
                            },
                            {
                                "name": "x2",
                                "type": "number",
                                "default": "0",
                                "desc": "x value of the end point.",
                                "children": []
                            },
                            {
                                "name": "y2",
                                "type": "number",
                                "default": "0",
                                "desc": "y value of the end point.",
                                "children": []
                            },
                            {
                                "name": "percent",
                                "type": "number",
                                "default": "1",
                                "desc": "Specify the percentage of drawing, useful in animation.\n\nValue range: [0, 1].",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "null",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "\"#000\"",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "5",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            },
            {
                "name": "return_bezierCurve",
                "type": "Object",
                "desc": "Quadratic bezier curve or cubic bezier curve.",
                "children": [
                    {
                        "name": "type",
                        "type": "string",
                        "default": "bezierCurve",
                        "desc": "Must be specified when define a graphic element at the first time.\n\nOptional values:\n\n\n[image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image),\n[text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text),\n[circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle),\n[sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector),\n[ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring),\n[polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon),\n[polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline),\n[rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect),\n[line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line),\n[bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve),\n[arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc),\n[group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group),",
                        "children": []
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "default": "undefined",
                        "desc": "id is used to specifying element when willing to update it.\nid can be ignored if you do not need it.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "Array",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "rotation",
                        "type": "number",
                        "default": "0",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "scale",
                        "type": "Array",
                        "default": "[1, 1]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "origin",
                        "type": "number",
                        "default": "[0, 0]",
                        "desc": "`2D transform` can be applied to graphic elements, including:\n+ [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position): `[horizontal translate offset, vertical translate offset]`, `[0, 0]` by default. Positive value means translate towards right or bottom.\n+ [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation): Rotation in radian, `0` by default. Positive when anticlockwise.\n+ [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale): `[horizontal scale factor, vertical scale factor]`, `[1, 1]` by default.\n\n[origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin) specifies the origin point of rotation and scaling, `[0, 0]` by default.\n\nNotice:\n+ The coordinates specified in the transform attribute above are relative to the `[0, 0]` of the parent element (that is, [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) or the root canvas). Thus we are able to [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) multiple elements, and [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group) can be nested.\n+ The order that the transform attributes are applied to a single graphic element is: Firstly, `rotation`, then, `scale`, finally, `position`.",
                        "children": []
                    },
                    {
                        "name": "z2",
                        "type": "number",
                        "default": "undefined",
                        "desc": "Define the overlap relationship between graphic elements.",
                        "children": []
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "default": "undefined",
                        "desc": "See [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName).\n\n\n\n\n\n#### info\n\nUser defined data, can be visited in event listeners.\n\n```js\nchart.on('click', function (params) {\nconsole.log(params.info);\n});\n```",
                        "children": []
                    },
                    {
                        "name": "silent",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether response to mouse events / touch events.",
                        "children": []
                    },
                    {
                        "name": "invisible",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is visible.",
                        "children": []
                    },
                    {
                        "name": "ignore",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether the element is totally ignored (neither render nor listen events).",
                        "children": []
                    },
                    {
                        "name": "shape",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "x1",
                                "type": "number",
                                "default": "0",
                                "desc": "x value of the start point.",
                                "children": []
                            },
                            {
                                "name": "y1",
                                "type": "number",
                                "default": "0",
                                "desc": "y value of the start point.",
                                "children": []
                            },
                            {
                                "name": "x2",
                                "type": "number",
                                "default": "0",
                                "desc": "x value of the end point.",
                                "children": []
                            },
                            {
                                "name": "y2",
                                "type": "number",
                                "default": "0",
                                "desc": "y value of the end point.",
                                "children": []
                            },
                            {
                                "name": "cpx1",
                                "type": "number",
                                "default": "0",
                                "desc": "x of control point.",
                                "children": []
                            },
                            {
                                "name": "cpy1",
                                "type": "number",
                                "default": "0",
                                "desc": "y of control point.",
                                "children": []
                            },
                            {
                                "name": "cpx2",
                                "type": "number",
                                "default": "null",
                                "desc": "x of the second control point. If specified, cubic bezier is used.\n\nIf both `cpx2` and `cpy2` are not set, quatratic bezier is used.",
                                "children": []
                            },
                            {
                                "name": "cpy2",
                                "type": "number",
                                "default": "null",
                                "desc": "y of the second control point. If specified, cubic bezier is used.\n\nIf both `cpx2` and `cpy2` are not set, quatratic bezier is used.",
                                "children": []
                            },
                            {
                                "name": "percent",
                                "type": "number",
                                "default": "1",
                                "desc": "Specify the percentage of drawing, useful in animation.\n\nValue range: [0, 1].",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "style",
                        "type": "Object",
                        "desc": "More attributes in `style` (for example, [rich text](tutorial.html#Rich%20Text)), see the `style` related attributes in [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable).\n\nNotice, the attribute names of the `style` of graphic elements is derived from `zrender`, which may be different from the attribute names in `echarts label`, `echarts itemStyle`, etc., although they have the same meaning. For example:\n\n+ [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.fill`\n+ [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.stroke`\n+ [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color) => `style.textFill`\n+ [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor) => `style.textStroke`\n+ ...",
                        "children": [
                            {
                                "name": "fill",
                                "type": "string",
                                "default": "'#000'",
                                "desc": "Color filled in this element.",
                                "children": []
                            },
                            {
                                "name": "stroke",
                                "type": "string",
                                "default": "null",
                                "desc": "Color of stroke.",
                                "children": []
                            },
                            {
                                "name": "lineWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Width of stroke.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Width of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "undefined",
                                "desc": "X offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "undefined",
                                "desc": "Y offset of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "number",
                                "default": "undefined",
                                "desc": "color of shadow.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "styleEmphasis",
                        "type": "Object",
                        "desc": "Empahsis style of the graphic element, whose structure is the same as [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style).",
                        "children": []
                    }
                ]
            }
        ]
    },
    {
        "name": "itemStyle",
        "type": "Object",
        "desc": "Graphic style of , `emphasis` is the style when it is highlighted, like being hovered by mouse, or highlighted via legend connect.\n\n\n\n\n### color(Color)=null\n\ncolor.  Color is taken from [option.color Palette](https://echarts.apache.org/en/option.html#color) by default.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
        "children": [
            {
                "name": "borderColor",
                "type": "Color",
                "default": "\"#000\"",
                "desc": "border color, whose format is similar to that of `color`.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "border width. No border when it is set to be 0.",
                "children": []
            },
            {
                "name": "borderType",
                "type": "string",
                "default": "'solid'",
                "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                "children": []
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                "children": []
            },
            {
                "name": "shadowColor",
                "type": "Color",
                "desc": "Shadow color. Support same format as `color`.",
                "children": []
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "Offset distance on the horizontal direction of shadow.",
                "children": []
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "Offset distance on the vertical direction of shadow.",
                "children": []
            },
            {
                "name": "opacity",
                "type": "number",
                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                "children": []
            }
        ]
    },
    {
        "name": "emphasis",
        "type": "Object",
        "desc": "",
        "children": [
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "#### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "Color",
                        "default": "\"#000\"",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.",
                        "children": []
                    },
                    {
                        "name": "borderType",
                        "type": "string",
                        "default": "'solid'",
                        "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "Color",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": []
                    }
                ]
            }
        ]
    },
    {
        "name": "dimensions",
        "type": "Array",
        "desc": "`dimensions` can be used to define dimension info for `series.data` or `dataset.source`.\n\nNotice: if [dataset](https://echarts.apache.org/en/option.html#dataset) is used, we can provide dimension names in the first column/row of [dataset.source](https://echarts.apache.org/en/option.html#dataset.source), and not need to specify `dimensions` here. But if `dimensions` is specified here, echarts will not retrieve dimension names from the first row/column of `dataset.source` any more.\n\n\nFor example:\n\n```js\noption = {\ndataset: {\nsource: [\n// 'date', 'open', 'close', 'highest', 'lowest'\n[12, 44, 55, 66, 2],\n[23, 6, 16, 23, 1],\n...\n]\n},\nseries: {\ntype: 'xxx',\n// Specify name for each dimesions, which will be displayed in tooltip.\ndimensions: ['date', 'open', 'close', 'highest', 'lowest']\n}\n}\n```\n\n```js\nseries: {\ntype: 'xxx',\ndimensions: [\nnull,                // If you do not intent to defined this dimension, use null is fine.\n{type: 'ordinal'},   // Specify type of this dimension.\n// 'ordinal' is always used in string.\n// If type is not specified, echarts will guess type by data.\n{name: 'good', type: 'number'},\n'bad'                // Equals to {name: 'bad'}.\n]\n}\n```\n\nEach data item of `dimensions` can be:\n+ `string`, for example, `'someName'`, which equals to `{name: 'someName'}`.\n+ `Object`, where the attributes can be:\n+ name: `string`.\n+ type: `string`, supports:\n+ `number`\n+ `float`, that is, [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)\n+ `int`, that is, [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)\n+ `ordinal`, discrete value, which represents string generally.\n+ `time`, time value, see [data](https://echarts.apache.org/en/option.html#series.data) to check the format of time value.\n+ displayName: `string`, generally used in tooltip for dimension display. If not specified, use `name` by default.\n\nWhen `dimensions` is specified, the default `tooltip` will be displayed vertically, which is better to show diemsion names. Otherwise, `tooltip` will displayed only value horizontally.",
        "children": []
    },
    {
        "name": "encode",
        "type": "Object",
        "desc": "Define what is encoded to for each dimension of `data`. For example:\n\n```js\noption = {\ndataset: {\nsource: [\n// Each column is called a dimension.\n// There are five dimensions: 0, 1, 2, 3, 4.\n[12, 44, 55, 66, 2],\n[23, 6, 16, 23, 1],\n...\n]\n},\nseries: {\ntype: 'xxx',\nencode: {\nx: [3, 1, 5],      // Dimension 3, 1, 5 is mapped to x axis.\ny: 2,              // Dimension 2 is mapped to y axis.\ntooltip: [3, 2, 4] // Dimension 3, 2, 4 will be displayed in tooltip.\n}\n}\n}\n```\n\nWhen [dimensions](https://echarts.apache.org/en/option.html#series.dimensions) is used to defined name for a certain dimension, `encode` can refer the name directly. For example:\n\n```js\nseries: {\ntype: 'xxx',\ndimensions: ['date', 'open', 'close', 'highest', 'lowest'],\nencode: {\nx: 'date',\ny: ['open', 'close', 'highest', 'lowest']\n}\n}\n```\n\nThe basic structure of [encode](option.html#series.encode) is illustrated as follows, where the left part of colon is the name of axis like `'x'`, `'y'`, `'radius'`, `'angle'` or some special reserved names like \"tooltip\", \"itemName\" etc., and the right part of the colon is the dimension names or dimension indices (based on 0). One or more dimensions can be specified. Usually not all of mappings need to be specified, only specify needed ones.\n\nThe properties available in `encode` listed as follows:\n\n```js\n// In any of the series and coordinate systems,\n// these properties are available:\nencode: {\n// Display dimension \"product\" and \"score\" in the tooltip.\ntooltip: ['product', 'score']\n// Set the series name as the concat of the names of dimensions[1] and dimensions[3].\n// (sometimes the dimension names are too long to type in series.name manually).\nseriesName: [1, 3],\n// Using dimensions[2] as the id of each data item. This is useful when dynamically\n// update data by `chart.setOption()`, where the new and old data item can be\n// corresponded by id, by which the appropriate animation can be performed when updating.\nitemId: 2,\n// Using dimensions[3] as the name of each data item. This is useful in charts like\n// 'pie', 'funnel', where data item name can be displayed in legend.\nitemName: 3\n}\n\n// These properties only work in cartesian(grid) coordinate system:\nencode: {\n// Map dimensions[1], dimensions[5] and dimension \"score\" to the X axis.\nx: [1, 5, 'score'],\n// Map dimensions[0] to the Y axis.\ny: 0\n}\n\n// These properties only work in polar coordinate system:\nencode: {\nradius: 3,\nangle: 2,\n...\n}\n\n// These properties only work in geo coordinate system:\nencode: {\nlng: 3,\nlat: 2\n}\n\n// For some type of series that are not in any coordinate system,\n// like 'pie', 'funnel' etc.:\nencode: {\nvalue: 3\n}\n```\n\nThis is an [example](dataset-encode1&edit=1&reset=1) for `encode`.\n\n\nSpecially, in [custom series(~series-custom), some property in `encode`, corresponding to axis, can be set as null to make the series not controlled by the axis, that is, the series data will not be count in the extent of the axis, and the [dataZoom](https://echarts.apache.org/en/option.html#dataZoom) on the axis will not filter the series.\n\n\n```js\nvar option = {\nxAxis: {},\nyAxis: {},\ndataZoom: [{\nxAxisIndex: 0\n}, {\nyAxisIndex: 0\n}],\nseries: {\ntype: 'custom',\nrenderItem: function (params, api) {\nreturn {\ntype: 'circle',\nshape: {\ncx: 100, // x position is always 100\ncy: api.coord([0, api.value(0)])[1],\nr: 30\n},\nstyle: {\nfill: 'blue'\n}\n};\n},\nencode: {\n// Then the series will not be controlled\n// by x axis and corresponding dataZoom.\nx: -1,\ny: 1\n},\ndata: [ ... ]\n}\n};\n```",
        "children": []
    },
    {
        "name": "seriesLayoutBy",
        "type": "string",
        "default": "'column'",
        "desc": "When [dataset](https://echarts.apache.org/en/option.html#dataset) is used, `seriesLayoutBy` specifies whether the column or the row of `dataset` is mapped to the series, namely, the series is \"layout\" on columns or rows. Optional values:\n\n+ 'column': by default, the columns of `dataset` are mapped the series. In this case, each column represents a dimension.\n+ 'row'：the rows of `dataset` are mapped to the series. In this case, each row represents a dimension.\n\nCheck this [example](dataset-series-layout-by).",
        "children": []
    },
    {
        "name": "datasetIndex",
        "type": "number",
        "default": "0",
        "desc": "If [series.data](https://echarts.apache.org/en/option.html#series.data) is not specified, and [dataset](https://echarts.apache.org/en/option.html#dataset) exists, the series will use `dataset`. `datasetIndex` specifies which dataset will be used.",
        "children": []
    },
    {
        "name": "data",
        "type": "Array",
        "desc": "Data array of series, which can be in the following forms:\n\nNotice, if no `data` specified in series, and there is [dataset](https://echarts.apache.org/en/option.html#dataset) in option, series will use the first [dataset](https://echarts.apache.org/en/option.html#dataset) as its datasource. If `data` has been specified, [dataset](https://echarts.apache.org/en/option.html#dataset) will not used.\n\n`series.datasetIndex` can be used to specify other [dataset](https://echarts.apache.org/en/option.html#dataset).\n\n\nBasically, data is represented by a two-dimension array, like the example below, where each column is named as a \"dimension\".\n```js\nseries: [{\ndata: [\n// dimX   dimY   other dimensions ...\n[  3.4,    4.5,   15,   43],\n[  4.2,    2.3,   20,   91],\n[  10.8,   9.5,   30,   18],\n[  7.2,    8.8,   18,   57]\n]\n}]\n```\n\n+ In [cartesian (grid)](https://echarts.apache.org/en/option.html#grid), \"dimX\" and \"dimY\" correspond to [xAxis](https://echarts.apache.org/en/option.html#xAxis) and [yAxis](https://echarts.apache.org/en/option.html#yAxis) respectively.\n+ In [polar](https://echarts.apache.org/en/option.html#polar) \"dimX\" and \"dimY\" correspond to [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis) 和 [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis) respectively.\n+ Other dimensions are optional, which can be used in other places. For example:\n+ [visualMap](https://echarts.apache.org/en/option.html#visualMap) can map one or more dimensions to visual (color, symbol size ...).\n+ [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize) can be set as a callback function, where symbol size can be calculated by values of a certain dimension.\n+ Values in other dimensions can be shown by [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter) or [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter).\n\nEspecially, when there is one and only one category axis (axis.type is `'category'`), data can be simply be represented by a one-dimension array, like:\n```js\nxAxis: {\ndata: ['a', 'b', 'm', 'n']\n},\nseries: [{\n// Each item corresponds to each item in xAxis.data.\ndata: [23,  44,  55,  19]\n// In fact, it is the simplification of the format below:\n// data: [[0, 23], [1, 44], [2, 55], [3, 19]]\n}]\n```\n\n<br>\n**Relationship between \"value\" and [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)**\n\n+ When a dimension corresponds to a value axis (axis.type is `'value'` or `'log'`):\n\nThe value can be a `number` (like `12`) (can also be a number in a `string` format, like `'12'`).\n\n+ When a dimension corresponds to a category axis (axis.type is `'category'`):\n\nThe value should be the ordinal of the axis.data (based on `0`), the string value of the axis.data. For example:\n```js\nxAxis: {\ntype: 'category',\ndata: ['Monday', 'Tuesday', 'Wednesday', 'Thursday']\n},\nyAxis: {\ntype: 'category',\ndata: ['a', 'b', 'm', 'n', 'p', 'q']\n},\nseries: [{\ndata: [\n// xAxis      yAxis\n[  0,           0,    2  ], // This point is located at xAxis: 'Monday', yAxis: 'a'.\n[  'Thursday',  2,    1  ], // This point is located at xAxis: 'Thursday', yAxis: 'm'.\n[  2,          'p',   2  ], // This point is located at xAxis: 'Wednesday', yAxis: 'p'.\n[  3,           3,    5  ]\n]\n}]\n```\nThere is an example of double category axes: [Github Punchcard](scatter-punchCard).\n\n+ When a dimension corresponds to a time axis (type is `'time'`), the value can be:\n+ a timestamp, like `1484141700832`, which represents a UTC time.\n+ a date string, in one of the formats below:\n+ a subset of [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15), only including (all of these are treated as local time unless timezone is specified, which is consistent with [moment](https://momentjs.com/)):\n+ only part of year/month/date/time are specified: `'2012-03'`, `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.\n+ separated by `\"T\"` or a space: `'2012-03-01T12:22:33.123'`, `'2012-03-01 12:22:33.123'`.\n+ timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`, `'2012-03-01T12:22:33-05:00'`.\n+ other date string format (all of these are treated as local time):\n`'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,\n`'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.\n+ a JavaScript Date instance created by user:\n+ Caution, when using a data string to create a Date instance, [browser differences and inconsistencies](http://dygraphs.com/date-formats.html) should be considered.\n+ For example: In chrome, `new Date('2012-01-01')` is treated as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone. In safari `new Date('2012-1-1')` is not supported.\n+ So if you intent to perform `new Date(dateString)`, it is strongly recommended to use a time parse library (e.g., [moment](https://momentjs.com/)), or use `echarts.number.parseDate`, or check [this](http://dygraphs.com/date-formats.html).\n\n\n\n<br>\n**Customize a data item:**\n\nWhen needing to customize a data item, it can be set as an object, where property `value` reprensent real value. For example:\n```js\n[\n12,\n24,\n{\nvalue: [24, 32],\n// label style, only works in this data item.\nlabel: {},\n// item style, only works in this data item.\nitemStyle:{}\n},\n33\n]\n// Or\n[\n[12, 332],\n[24, 32],\n{\nvalue: [24, 32],\n// label style, only works in this data item.\nlabel: {},\n// item style, only works in this data item.\nitemStyle:{}\n},\n[33, 31]\n]\n```\n\n<br>\n**Empty value:**\n\n`'-'` or `null` or `undefined` or `NaN` can be used to describe that a data item does not exist (ps：*not exist* does not means its value is `0`).\n\nFor example, line chart can break when encounter an empty value, and scatter chart do not display graphic elements for empty values.\n\n<br><br>",
        "children": [
            {
                "name": "name",
                "type": "string",
                "desc": "Name of data item.",
                "children": []
            },
            {
                "name": "value",
                "type": "number",
                "desc": "Value of data item.",
                "children": []
            },
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "#### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "Color",
                        "default": "\"#000\"",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.",
                        "children": []
                    },
                    {
                        "name": "borderType",
                        "type": "string",
                        "default": "'solid'",
                        "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": []
                    },
                    {
                        "name": "shadowColor",
                        "type": "Color",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": []
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": []
                    }
                ]
            },
            {
                "name": "emphasis",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "itemStyle",
                        "type": "Object",
                        "desc": "##### color(Color)=null\n\ncolor.\n\n\n\n> Color can be represented in RGB, for example `'rgb(128, 128, 128)'`. RGBA can be used when you need alpha channel, for example `'rgba(128, 128, 128, 0.5)'`. You may also use hexadecimal format, for example `'#ccc'`. Gradient color and texture are also supported besides single colors.\n> ```js\n> // Linear gradient. First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box. If global is `true`, then the first four parameters are in absolute pixel positions.\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Radial gradient. First three parameters are x and y positions of center, and radius, similar to linear gradient.\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // color at 0% position\n>     }, {\n>         offset: 1, color: 'blue' // color at 100% position\n>     }],\n>     global: false // false by default\n> }\n> // Fill with texture\n> color: {\n>     image: imageDom, // HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported\n>     repeat: 'repeat' // whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "Color",
                                "default": "\"#000\"",
                                "desc": "border color, whose format is similar to that of `color`.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "border width. No border when it is set to be 0.",
                                "children": []
                            },
                            {
                                "name": "borderType",
                                "type": "string",
                                "default": "'solid'",
                                "desc": "Border type, which can be `'solid'`, `'dashed'`, or `'dotted'`. `'solid'` by default.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": []
                            },
                            {
                                "name": "shadowColor",
                                "type": "Color",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": []
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.\n\n\n\n\n\n\n\n\n\n\n### tooltip\n\ntooltip settings in this series data.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "position",
                        "type": [
                            "string",
                            "Array"
                        ],
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe position of the tooltip's floating layer, which would follow the position of mouse by default.\n\nOptions:\n\n+ `Array`\n\nDisplay the position of tooltip's floating layer through array, which supports absolute position and relative percentage.\n\nExample:\n\n```js\n// absolute position, which is 10px to the left side and 10px to the top side of the container\nposition: [10, 10]\n// relative position, in the exact center of the container\nposition: ['50%', '50%']\n```\n\n+ `Function`\n\nCallback function in the following form:\n```js\n(point: Array, params: Object|Array.<Object>, dom: HTMLDomElement, rect: Object, size: Object) => Array\n```\n\n**Parameters:**<br>\npoint: Mouse position.<br>\nparam: The same as formatter.<br>\ndom: The DOM object of tooltip.<br>\nrect: It is valid only when mouse is on graphic elements, which stands for a bounding box with `x`, `y`, `width`, and `height`.<br>\nsize: The size of dom echarts container. For example: `{contentSize: [width, height], viewSize: [width, height]}`. <br>\n\n**Return:**<br>\nReturn value is an array standing for tooltip position, which can be absolute pixels, or relative percentage.<br>\nOr can be an object, like `{left: 10, top: 30}`, or `{right: '20%', bottom: 40}`.<br>\n\nFor example:\n```js\nposition: function (point, params, dom, rect, size) {\n// fixed at top\nreturn [point[0], '10%'];\n}\n```\nOr:\n```js\nposition: function (pos, params, dom, rect, size) {\n// tooltip will be fixed on the right if mouse hovering on the left,\n// and on the left if hovering on the right.\nvar obj = {top: 60};\nobj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\nreturn obj;\n}\n```\n\n+ `'inside'`\n\nCenter position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'top'`\n\nTop position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'left'`\n\nLeft position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'right'`\n\nRight position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'bottom'`\n\nBottom position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.",
                        "children": []
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe content formatter of tooltip's floating layer which supports string template and callback function.\n\n**1. String template**\n\nThe template variables are `{a}`, `{b}`, `{c}`, `{d}` and `{e}`, which stands for series name, data name and data value and ect. When [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is set to be `'axis'`, there may be data from multiple series. In this time, series index can be refered as `{a0}`, `{a1}`, or `{a2}`.\n\n`{a}`, `{b}`, `{c}`, `{d}` have different meanings for different series types:\n\n+ Line (area) charts, bar (column) charts, K charts: `{a}` for series name, `{b}` for category name, `{c}` for data value, `{d}` for none;\n\n+ Scatter (bubble) charts: `{a}` for series name, `{b}` for data name, `{c}` for data value, `{d}` for none;\n\n+ Map: `{a}` for series name, `{b}` for area name, `{c}` for merging data, `{d}` for none;\n\n+ Pie charts, gauge charts, funnel charts: `{a}` for series name, `{b}` for data item name, `{c}` for data value, `{d}` for percentage.\n\n**Example: **\n```js\nformatter: '{b0}: {c0}<br />{b1}: {c1}'\n```\n\n\n**2. Callback function**\n\nThe format of callback function:\n\n```js\n(params: Object|Array, ticket: string, callback: (ticket: string, html: string)) => string\n```\n\nThe first parameter `params` is the data that the formatter needs. Its format is shown as follows:\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\nWhen [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'axis'`, or when tooltip is triggered by [axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer), `params` is the data array of multiple series. The content of each item of the array is the same as above. Besides,\n\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n**Note: **Using array to present all the parameters in ECharts 2.x is not supported anymore.\n\nThe second parameter `ticket` is the asynchronous callback flag which should be used along with the third parameter `callback` when it is used.\n\nThe third parameter `callback` is asynchronous callback. When the content of tooltip is acquired asynchronously, `ticket` and `htm` as introduced above can be used to update tooltip with callback.\n\nExample:\n```js\nformatter: function (params, ticket, callback) {\n$.get('detail?name=' + params.name, function (content) {\ncallback(ticket, toHTML(content));\n});\nreturn 'Loading';\n}\n```",
                        "children": []
                    },
                    {
                        "name": "backgroundColor",
                        "type": "Color",
                        "default": "'rgba(50,50,50,0.7)'",
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe background color of tooltip's floating layer.",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "Color",
                        "default": "'#333'",
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe border color of tooltip's floating layer.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe border width of tooltip's floating layer.",
                        "children": []
                    },
                    {
                        "name": "padding",
                        "type": "number",
                        "default": "5",
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe floating layer of tooltip space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom.\n\nExamples:\n```js\n// Set padding to be 5\npadding: 5\n// Set the top and bottom paddings to be 5, and left and right paddings to be 10\npadding: [5, 10]\n// Set each of the four paddings seperately\npadding: [\n5,  // up\n10, // right\n5,  // down\n10, // left\n]\n```",
                        "children": []
                    },
                    {
                        "name": "textStyle",
                        "type": "Object",
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe text syle of tooltip's floating layer.\n\n\n\n\n\n\n\n##### color(Color)='#fff'\n\ntext color.\n\n\n\n\n\n##### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n##### fontSize(number)=14\n\nfont size.",
                        "children": [
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n##### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\n\n##### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n##### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n##### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n##### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n##### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "extraCssText",
                        "type": "string",
                        "desc": "> **Notice：**series.data.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nExtra CSS style for floating layer. The following is an example for adding shadow.\n\n```js\nextraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'\n```",
                        "children": []
                    }
                ]
            }
        ]
    },
    {
        "name": "clip",
        "type": "boolean",
        "default": "false",
        "desc": "> Since `v`\n\n\n\n\nIf clip the overflow on the coordinate system. Clip results varies between series:\n\n+ Scatter：Ignore the symbols exceeds the coordinate system. Not clip the elements.\n+ Bar：Clip all the overflowed. With bar width kept.\n+ Line：Clip the overflowed line.\n+ Lines: Clip all the overflowed.\n+ Candlestick: Ignore the elements exceeds the coordinate system.\n+ Custom: Clip all the olverflowed.\n\nAll these series have default value `true` except custom series. Set it to `false` if you don't want to clip.",
        "children": []
    },
    {
        "name": "zlevel",
        "type": "number",
        "default": "0",
        "desc": "`zlevel` value of all graphical elements in custom series.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.",
        "children": []
    },
    {
        "name": "z",
        "type": "number",
        "default": "2",
        "desc": "`z` value of all graphical elements in custom series, which controls order of drawing graphical components. Components with smaller `z` values may be overwritten by those with larger `z` values.\n\n`z` has a lower priority to `zlevel`, and will not create new Canvas.",
        "children": []
    },
    {
        "name": "silent",
        "type": "boolean",
        "default": "false",
        "desc": "Whether to ignore mouse events. Default value is false, for triggering and responding to mouse events.",
        "children": []
    },
    {
        "name": "animation",
        "type": "boolean",
        "default": "true",
        "desc": "Whether to enable animation.",
        "children": []
    },
    {
        "name": "animationThreshold",
        "type": "number",
        "default": "2000",
        "desc": "Whether to set graphic number threshold to animation. Animation will be disabled when graphic number is larger than threshold.",
        "children": []
    },
    {
        "name": "animationDuration",
        "type": [
            "number",
            "Function"
        ],
        "default": "1000",
        "desc": "Duration of the first animation, which supports callback function for different data to have different animation effect:\n\n```js\nanimationDuration: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```",
        "children": []
    },
    {
        "name": "animationEasing",
        "type": "string",
        "default": "cubicOut",
        "desc": "Easing method used for the first animation. Varied easing effects can be found at [easing effect example](line-easing).",
        "children": []
    },
    {
        "name": "animationDelay",
        "type": [
            "number",
            "Function"
        ],
        "default": "0",
        "desc": "Delay before updating the first animation, which supports callback function for different data to have different animation effect.\n\nFor example:\n```js\nanimationDelay: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```\n\nSee [this example](bar-animation-delay) for more information.",
        "children": []
    },
    {
        "name": "animationDurationUpdate",
        "type": [
            "number",
            "Function"
        ],
        "default": "300",
        "desc": "Time for animation to complete, which supports callback function for different data to have different animation effect:\n\n```js\nanimationDurationUpdate: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```",
        "children": []
    },
    {
        "name": "animationEasingUpdate",
        "type": "string",
        "default": "cubicOut",
        "desc": "Easing method used for animation.",
        "children": []
    },
    {
        "name": "animationDelayUpdate",
        "type": [
            "number",
            "Function"
        ],
        "default": "0",
        "desc": "Delay before updating animation, which supports callback function for different data to have different animation effects.\n\nFor example:\n```js\nanimationDelayUpdate: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```\n\nSee [this example](bar-animation-delay) for more information.\n\n\n\n\n\n\n## tooltip\n\ntooltip settings in this series.",
        "children": [
            {
                "name": "position",
                "type": [
                    "string",
                    "Array"
                ],
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe position of the tooltip's floating layer, which would follow the position of mouse by default.\n\nOptions:\n\n+ `Array`\n\nDisplay the position of tooltip's floating layer through array, which supports absolute position and relative percentage.\n\nExample:\n\n```js\n// absolute position, which is 10px to the left side and 10px to the top side of the container\nposition: [10, 10]\n// relative position, in the exact center of the container\nposition: ['50%', '50%']\n```\n\n+ `Function`\n\nCallback function in the following form:\n```js\n(point: Array, params: Object|Array.<Object>, dom: HTMLDomElement, rect: Object, size: Object) => Array\n```\n\n**Parameters:**<br>\npoint: Mouse position.<br>\nparam: The same as formatter.<br>\ndom: The DOM object of tooltip.<br>\nrect: It is valid only when mouse is on graphic elements, which stands for a bounding box with `x`, `y`, `width`, and `height`.<br>\nsize: The size of dom echarts container. For example: `{contentSize: [width, height], viewSize: [width, height]}`. <br>\n\n**Return:**<br>\nReturn value is an array standing for tooltip position, which can be absolute pixels, or relative percentage.<br>\nOr can be an object, like `{left: 10, top: 30}`, or `{right: '20%', bottom: 40}`.<br>\n\nFor example:\n```js\nposition: function (point, params, dom, rect, size) {\n// fixed at top\nreturn [point[0], '10%'];\n}\n```\nOr:\n```js\nposition: function (pos, params, dom, rect, size) {\n// tooltip will be fixed on the right if mouse hovering on the left,\n// and on the left if hovering on the right.\nvar obj = {top: 60};\nobj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\nreturn obj;\n}\n```\n\n+ `'inside'`\n\nCenter position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'top'`\n\nTop position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'left'`\n\nLeft position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'right'`\n\nRight position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'bottom'`\n\nBottom position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.",
                "children": []
            },
            {
                "name": "formatter",
                "type": [
                    "string",
                    "Function"
                ],
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe content formatter of tooltip's floating layer which supports string template and callback function.\n\n**1. String template**\n\nThe template variables are `{a}`, `{b}`, `{c}`, `{d}` and `{e}`, which stands for series name, data name and data value and ect. When [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is set to be `'axis'`, there may be data from multiple series. In this time, series index can be refered as `{a0}`, `{a1}`, or `{a2}`.\n\n`{a}`, `{b}`, `{c}`, `{d}` have different meanings for different series types:\n\n+ Line (area) charts, bar (column) charts, K charts: `{a}` for series name, `{b}` for category name, `{c}` for data value, `{d}` for none;\n\n+ Scatter (bubble) charts: `{a}` for series name, `{b}` for data name, `{c}` for data value, `{d}` for none;\n\n+ Map: `{a}` for series name, `{b}` for area name, `{c}` for merging data, `{d}` for none;\n\n+ Pie charts, gauge charts, funnel charts: `{a}` for series name, `{b}` for data item name, `{c}` for data value, `{d}` for percentage.\n\n**Example: **\n```js\nformatter: '{b0}: {c0}<br />{b1}: {c1}'\n```\n\n\n**2. Callback function**\n\nThe format of callback function:\n\n```js\n(params: Object|Array, ticket: string, callback: (ticket: string, html: string)) => string\n```\n\nThe first parameter `params` is the data that the formatter needs. Its format is shown as follows:\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\nWhen [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'axis'`, or when tooltip is triggered by [axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer), `params` is the data array of multiple series. The content of each item of the array is the same as above. Besides,\n\n\n```js\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string,\n\n}\n```\n\nNote: the usage of encode and dimensionNames can be:\n\nIf data is:\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.encode.y[0]]\n```\n\nIf data is:\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get values that corresponding to y axis by:\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n**Note: **Using array to present all the parameters in ECharts 2.x is not supported anymore.\n\nThe second parameter `ticket` is the asynchronous callback flag which should be used along with the third parameter `callback` when it is used.\n\nThe third parameter `callback` is asynchronous callback. When the content of tooltip is acquired asynchronously, `ticket` and `htm` as introduced above can be used to update tooltip with callback.\n\nExample:\n```js\nformatter: function (params, ticket, callback) {\n$.get('detail?name=' + params.name, function (content) {\ncallback(ticket, toHTML(content));\n});\nreturn 'Loading';\n}\n```",
                "children": []
            },
            {
                "name": "backgroundColor",
                "type": "Color",
                "default": "'rgba(50,50,50,0.7)'",
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe background color of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "Color",
                "default": "'#333'",
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe border color of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe border width of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "padding",
                "type": "number",
                "default": "5",
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe floating layer of tooltip space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom.\n\nExamples:\n```js\n// Set padding to be 5\npadding: 5\n// Set the top and bottom paddings to be 5, and left and right paddings to be 10\npadding: [5, 10]\n// Set each of the four paddings seperately\npadding: [\n5,  // up\n10, // right\n5,  // down\n10, // left\n]\n```",
                "children": []
            },
            {
                "name": "textStyle",
                "type": "Object",
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nThe text syle of tooltip's floating layer.\n\n\n\n\n\n\n\n#### color(Color)='#fff'\n\ntext color.\n\n\n\n\n\n#### fontStyle(string)='normal'\n\nfont style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\nfont thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\nfont family.\n\nCan also be 'serif' , 'monospace', ...\n\n#### fontSize(number)=14\n\nfont size.",
                "children": [
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": []
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.\n\n\n#### textBorderColor(Color)='transparent'\n\nStorke color of the text.\n\n\n\n\n#### textBorderWidth(number)=0\n\nStorke line width of the text.\n\n#### textShadowColor(Color)='transparent'\n\nShadow color of the text itself.\n\n#### textShadowBlur(number)=0\n\nShadow blue of the text itself.\n\n#### textShadowOffsetX(number)=0\n\nShadow X offset of the text itself.\n\n#### textShadowOffsetY(number)=0\n\nShadow Y offset of the text itself.",
                        "children": []
                    }
                ]
            },
            {
                "name": "extraCssText",
                "type": "string",
                "desc": "<br>\n> **Notice：**series.tooltip only works when [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.<br>\n\n\n\n\n\n\n\n\n\n\n\nExtra CSS style for floating layer. The following is an example for adding shadow.\n\n```js\nextraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'\n```",
                "children": []
            }
        ]
    }
]