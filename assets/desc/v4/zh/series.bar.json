[
    {
        "name": "type",
        "type": "string",
        "default": "'bar'",
        "desc": "",
        "children": []
    },
    {
        "name": "id",
        "type": "string",
        "desc": "组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。",
        "children": []
    },
    {
        "name": "name",
        "type": "string",
        "desc": "系列名称，用于[tooltip](https://echarts.apache.org/zh/option.html#tooltip)的显示，[legend](https://echarts.apache.org/zh/option.html#legend) 的图例筛选，在 `setOption` 更新数据和配置项时用于指定对应的系列。",
        "children": []
    },
    {
        "name": "legendHoverLink",
        "type": "boolean",
        "default": "true",
        "desc": "是否启用[图例](https://echarts.apache.org/zh/option.html#legend) hover 时的联动高亮。",
        "children": []
    },
    {
        "name": "coordinateSystem",
        "type": "string",
        "default": "'cartesian2d'",
        "desc": "该系列使用的坐标系，可选：\n\n\n\n\n\n+ `'cartesian2d'`\n\n使用二维的直角坐标系（也称笛卡尔坐标系），通过 [xAxisIndex](https://echarts.apache.org/zh/option.html#series-bar.xAxisIndex), [yAxisIndex](https://echarts.apache.org/zh/option.html#series-bar.yAxisIndex)指定相应的坐标轴组件。",
        "children": []
    },
    {
        "name": "xAxisIndex",
        "type": "number",
        "default": "0",
        "desc": "使用的 [x 轴](https://echarts.apache.org/zh/option.html#xAxis)的 index，在单个图表实例中存在多个 x 轴的时候有用。",
        "children": []
    },
    {
        "name": "yAxisIndex",
        "type": "number",
        "default": "0",
        "desc": "使用的 [y 轴](https://echarts.apache.org/zh/option.html#yAxis)的 index，在单个图表实例中存在多个 y轴的时候有用。",
        "children": []
    },
    {
        "name": "roundCap",
        "type": "boolean",
        "default": "false",
        "desc": "> 从 `v4.5.0` 开始支持\n\n\n\n\n\n\n是否在环形柱条两侧使用圆弧效果。\n\n仅对极坐标系柱状图有效。\n\n~[800x500](https://echarts.apache.org/examples/zh/view.html?c=polar-roundCap&reset=1&edit=1)",
        "children": []
    },
    {
        "name": "label",
        "type": "Object",
        "desc": "图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
        "children": [
            {
                "name": "show",
                "type": "boolean",
                "default": "false",
                "desc": "是否显示标签。",
                "children": []
            },
            {
                "name": "position",
                "type": "enum",
                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                "children": [],
                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
            },
            {
                "name": "distance",
                "type": "number",
                "default": "5",
                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "rotate",
                "type": "angle",
                "default": "0",
                "desc": "标签旋转。从 -90 度到 90 度。正值是逆时针。\n\n参见：[label rotation](bar-label-rotation)。",
                "children": [],
                "min": "-90",
                "max": "90",
                "step": "1"
            },
            {
                "name": "offset",
                "type": "vector",
                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                "children": [],
                "dims": "x,y",
                "step": "0.5"
            },
            {
                "name": "formatter",
                "type": "number",
                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                "children": [],
                "options": "'normal','italic','oblique'",
                "default": "12",
                "min": "1",
                "step": "1"
            },
            {
                "name": "lineHeight",
                "type": "vector",
                "default": "'#fff'",
                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                "children": [],
                "min": "0",
                "step": "1",
                "dims": "LT,RT, RB, LB"
            },
            {
                "name": "width",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                "children": []
            },
            {
                "name": "height",
                "type": "number",
                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "rich",
                "type": "Object",
                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                "children": [
                    {
                        "name": "<style_name>",
                        "type": "number",
                        "desc": "##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n##### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            }
                        ],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    }
                ]
            }
        ]
    },
    {
        "name": "itemStyle",
        "type": "Object",
        "desc": "图形样式。",
        "children": [
            {
                "name": "color",
                "type": "color",
                "default": "null",
                "desc": "柱条的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "color",
                "default": "'#000'",
                "desc": "柱条的描边颜色。",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "柱条的描边宽度，默认不描边。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "borderType",
                "type": "enum",
                "desc": "柱条的描边类型，默认为实线，支持 `'dashed'`, `'dotted'`。",
                "children": [],
                "options": "'solid','dashed','dotted'"
            }
        ]
    }
]