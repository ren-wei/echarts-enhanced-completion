[
    {
        "name": "type",
        "type": "string",
        "default": "'sunburst'",
        "desc": "",
        "children": []
    },
    {
        "name": "id",
        "type": "string",
        "desc": "组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。",
        "children": []
    },
    {
        "name": "name",
        "type": "string",
        "desc": "系列名称，用于[tooltip](https://echarts.apache.org/zh/option.html#tooltip)的显示，[legend](https://echarts.apache.org/zh/option.html#legend) 的图例筛选，在 `setOption` 更新数据和配置项时用于指定对应的系列。",
        "children": []
    },
    {
        "name": "zlevel",
        "type": "number",
        "default": "0",
        "desc": "所有图形的 zlevel 值。\n\n`zlevel`用于 Canvas 分层，不同`zlevel`值的图形会放置在不同的 Canvas 中，Canvas 分层是一种常见的优化手段。我们可以把一些图形变化频繁（例如有动画）的组件设置成一个单独的`zlevel`。需要注意的是过多的 Canvas 会引起内存开销的增大，在手机端上需要谨慎使用以防崩溃。\n\n`zlevel` 大的 Canvas 会放在 `zlevel` 小的 Canvas 的上面。",
        "children": []
    },
    {
        "name": "z",
        "type": "number",
        "default": "2",
        "desc": "组件的所有图形的`z`值。控制图形的前后顺序。`z`值小的图形会被`z`值大的图形覆盖。\n\n`z`相比`zlevel`优先级更低，而且不会创建新的 Canvas。",
        "children": []
    },
    {
        "name": "center",
        "type": "percentvector",
        "default": "['50%', '50%']",
        "desc": "旭日图的中心（圆心）坐标，数组的第一项是横坐标，第二项是纵坐标。\n\n支持设置成百分比，设置成百分比时第一项是相对于容器宽度，第二项是相对于容器高度。\n\n**使用示例：**\n```\n// 设置成绝对的像素值\ncenter: [400, 300]\n// 设置成相对的百分比\ncenter: ['50%', '50%']\n```",
        "children": [],
        "dims": "x,y"
    },
    {
        "name": "radius",
        "type": "percentvector",
        "default": "[0, '75%']",
        "desc": "旭日图的半径。可以为如下类型：\n\n+ `number`：直接指定外半径值。\n+ `string`：例如，`'20%'`，表示外半径为可视区尺寸（容器高宽中较小一项）的 20% 长度。\n\n+ `Array.<number|string>`：数组的第一项是内半径，第二项是外半径。每一项遵从上述 `number` `string` 的描述。",
        "children": [],
        "dims": "inner,outer"
    },
    {
        "name": "data",
        "type": "Array",
        "desc": "[series-sunburst.data](https://echarts.apache.org/zh/option.html#series-sunburst.data) 的数据格式是树状的，例如：\n\n```js\n[{\nname: 'parent1',\nvalue: 10,          // 可以不写父元素的 value，则为子元素之和；\n// 如果写了，并且大于子元素之和，可以用来表示还有其他子元素未显示\nchildren: [{\nvalue: 5,\nname: 'child1',\nchildren: [{\nvalue: 2,\nname: 'grandchild1',\nitemStyle: {\n// 每个数据可以有自己的样式，覆盖 series.itemStyle 和 level.itemStyle\n},\nlabel: {\n// 标签样式，同上\n}\n}]\n}, {\nvalue: 3,\nname: 'child2'\n}],\nitemStyle: {\n// parent1 的图形样式，不会被后代继承\n},\nlabel: {\n// parent1 的标签样式，不会被后代继承\n}\n}, {\nname: 'parent2',\nvalue: 4\n}]\n```",
        "children": [
            {
                "name": "value",
                "type": "number",
                "desc": "数据值，如果包含 children，则可以不写 value 值。这时，将使用子元素的 value 之和作为父元素的 value。如果 value 大于子元素之和，可以用来表示还有其他子元素未显示。",
                "children": []
            },
            {
                "name": "name",
                "type": "string",
                "desc": "显示在扇形块中的描述文字。",
                "children": []
            },
            {
                "name": "link",
                "type": "string",
                "desc": "点击此节点可跳转的超链接。须 [series-sunburst.nodeClick](https://echarts.apache.org/zh/option.html#series-treemap.nodeClick) 值为 `'link'` 时才生效。\n\n参见 [series-sunburst.data.target](https://echarts.apache.org/zh/option.html#series-sunburst.data.target)。",
                "children": []
            },
            {
                "name": "target",
                "type": "string",
                "default": "'blank'",
                "desc": "意义同 HTML `<a>` 标签中的 `target`，参见 [series-sunburst.data.link](https://echarts.apache.org/zh/option.html#series-sunburst.data.link)。可选值为：`'blank'` 或 `'self'`。",
                "children": []
            },
            {
                "name": "label",
                "type": "Object",
                "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                "children": [
                    {
                        "name": "rotate",
                        "type": "enum",
                        "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                        "children": [],
                        "options": "'radial','tangential'"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "minAngle",
                        "type": "angle",
                        "default": "null",
                        "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "max": "360"
                    },
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否显示标签。",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": "number",
                        "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n#### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n#### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "vector",
                        "default": "'#fff'",
                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n#### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n#### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n#### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n#### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n#### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n#### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n#### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n#### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n#### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n#### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n#### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "number",
                                "desc": "###### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n###### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n###### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "vector",
                                        "default": "'#fff'",
                                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n###### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n###### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n###### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n###### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n###### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n###### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "1",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": "number",
                                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n###### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n###### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n###### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n###### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n###### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    }
                                ],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "color",
                "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n#### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'white'",
                        "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "1",
                        "desc": "描边线宽。为 0 时无描边。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "阴影颜色。支持的格式同`color`。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影水平方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影垂直方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            },
            {
                "name": "emphasis",
                "type": "Object",
                "desc": "鼠标悬停后的配置项。",
                "children": [
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                        "children": [
                            {
                                "name": "rotate",
                                "type": "enum",
                                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                                "children": [],
                                "options": "'radial','tangential'"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "minAngle",
                                "type": "angle",
                                "default": "null",
                                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "max": "360"
                            },
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "true",
                                "desc": "是否显示标签。",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": "number",
                                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "number",
                                        "desc": "####### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n####### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n####### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "vector",
                                                "default": "'#fff'",
                                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n####### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n####### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n####### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n####### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n####### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n####### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "1",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": "number",
                                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n####### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n####### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n####### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n####### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n####### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            }
                                        ],
                                        "options": "'normal','italic','oblique'",
                                        "default": "12",
                                        "min": "1",
                                        "step": "1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "itemStyle",
                        "type": "color",
                        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n##### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'white'",
                                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "描边线宽。为 0 时无描边。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "阴影颜色。支持的格式同`color`。",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影水平方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影垂直方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "highlight",
                "type": "Object",
                "desc": "鼠标悬停后相关扇形块的配置项。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。",
                "children": [
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                        "children": [
                            {
                                "name": "rotate",
                                "type": "enum",
                                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                                "children": [],
                                "options": "'radial','tangential'"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "minAngle",
                                "type": "angle",
                                "default": "null",
                                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "max": "360"
                            },
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "true",
                                "desc": "是否显示标签。",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": "number",
                                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "number",
                                        "desc": "####### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n####### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n####### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "vector",
                                                "default": "'#fff'",
                                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n####### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n####### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n####### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n####### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n####### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n####### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "1",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": "number",
                                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n####### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n####### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n####### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n####### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n####### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            }
                                        ],
                                        "options": "'normal','italic','oblique'",
                                        "default": "12",
                                        "min": "1",
                                        "step": "1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "itemStyle",
                        "type": "color",
                        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n##### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'white'",
                                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "描边线宽。为 0 时无描边。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "阴影颜色。支持的格式同`color`。",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影水平方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影垂直方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "downplay",
                "type": "Object",
                "desc": "鼠标悬停后不相关扇形块的配置项。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。",
                "children": [
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                        "children": [
                            {
                                "name": "rotate",
                                "type": "enum",
                                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                                "children": [],
                                "options": "'radial','tangential'"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "minAngle",
                                "type": "angle",
                                "default": "null",
                                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "max": "360"
                            },
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "true",
                                "desc": "是否显示标签。",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": "number",
                                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "number",
                                        "desc": "####### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n####### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n####### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "vector",
                                                "default": "'#fff'",
                                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n####### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n####### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n####### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n####### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n####### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n####### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "1",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": "number",
                                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n####### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n####### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n####### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n####### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n####### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            }
                                        ],
                                        "options": "'normal','italic','oblique'",
                                        "default": "12",
                                        "min": "1",
                                        "step": "1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "itemStyle",
                        "type": "color",
                        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n##### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'white'",
                                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "描边线宽。为 0 时无描边。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "阴影颜色。支持的格式同`color`。",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影水平方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影垂直方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "children",
                "type": "Array",
                "desc": "子节点，递归定义，格式同 [series-sunburst.data](https://echarts.apache.org/zh/option.html#series-sunburst.data)。",
                "children": []
            }
        ]
    },
    {
        "name": "label",
        "type": "Object",
        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
        "children": [
            {
                "name": "rotate",
                "type": "enum",
                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                "children": [],
                "options": "'radial','tangential'"
            },
            {
                "name": "align",
                "type": "enum",
                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                "children": [],
                "options": "'left','center','right'"
            },
            {
                "name": "minAngle",
                "type": "angle",
                "default": "null",
                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                "children": [],
                "min": "0",
                "step": "1",
                "max": "360"
            },
            {
                "name": "show",
                "type": "boolean",
                "default": "true",
                "desc": "是否显示标签。",
                "children": []
            },
            {
                "name": "position",
                "type": "enum",
                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                "children": [],
                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
            },
            {
                "name": "distance",
                "type": "number",
                "default": "5",
                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "offset",
                "type": "vector",
                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                "children": [],
                "dims": "x,y",
                "step": "0.5"
            },
            {
                "name": "formatter",
                "type": "number",
                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                "children": [],
                "options": "'normal','italic','oblique'",
                "default": "12",
                "min": "1",
                "step": "1"
            },
            {
                "name": "lineHeight",
                "type": "vector",
                "default": "'#fff'",
                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                "children": [],
                "min": "0",
                "step": "1",
                "dims": "LT,RT, RB, LB"
            },
            {
                "name": "width",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                "children": []
            },
            {
                "name": "height",
                "type": "number",
                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "rich",
                "type": "Object",
                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                "children": [
                    {
                        "name": "<style_name>",
                        "type": "number",
                        "desc": "##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n##### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            }
                        ],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    }
                ]
            }
        ]
    },
    {
        "name": "itemStyle",
        "type": "color",
        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
        "children": [
            {
                "name": "borderColor",
                "type": "color",
                "default": "'white'",
                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "1",
                "desc": "描边线宽。为 0 时无描边。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "borderType",
                "type": "enum",
                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                "children": [],
                "options": "'solid','dashed','dotted'"
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "default": "",
                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "shadowColor",
                "type": "color",
                "default": "",
                "desc": "阴影颜色。支持的格式同`color`。",
                "children": []
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "阴影水平方向上的偏移距离。",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "阴影垂直方向上的偏移距离。",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "opacity",
                "type": "number",
                "default": "1",
                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                "children": [],
                "min": "0",
                "max": "1",
                "step": "0.01"
            }
        ]
    },
    {
        "name": "highlightPolicy",
        "type": "enum",
        "desc": "当鼠标移动到一个扇形块时，可以高亮相关的扇形块。**如果其值为 `'descendant'`，则会高亮该扇形块和后代元素，其他元素将被淡化（*downplay*，参见 [itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)）；如果其值为 `'ancestor'`，则会高亮该扇形块和祖先元素；如果其值为 `'self'` 则只高亮自身；`'none'` 则不会淡化其他元素。**\n\n~[700x350](https://echarts.apache.org/examples/zh/view.html?c=doc-example/sunburst-highlight-descendant&edit=1&reset=1)\n\n上面的例子 `highlightPolicy` 是默认值 `'descendant'`，我们通过 `dispatchAction` 触发了旭日图中某个数据块的高亮操作（相当于将鼠标移动到下图中的 `target` 扇形块中）。目标扇形块将采用 `emphasis` 的样式（在本例中是为红色），和目标扇形块相关的扇形块（由 `highlightPolicy` 决定哪些扇形块是相关的）采用 `highlight` 的样式（橙色），其他扇形块采用 `downplay` 的样式（灰色）。而如果没有高亮对象，则所有扇形块都采用默认的样式。样式定义是类似这样的：\n\n```js\nitemStyle: {\ncolor: 'yellow',\nborderWidth: 2\n},\nemphasis: {\nitemStyle: {\ncolor: 'red'\n}\n},\nhighlight: {\nitemStyle: {\ncolor: 'orange'\n}\n},\ndownplay: {\nitemStyle: {\ncolor: '#ccc'\n}\n}\n```\n\n而如果将 `highlightPolicy` 设为 `'ancestor'`，则会得到这样的效果：\n\n~[700x350](https://echarts.apache.org/examples/zh/view.html?c=doc-example/sunburst-highlight-ancestor&edit=1&reset=1)",
        "children": [],
        "options": "'descendant','ancestor','none'"
    },
    {
        "name": "nodeClick",
        "type": "enum",
        "desc": "点击节点后的行为。可取值为：\n\n+ `false`：节点点击无反应。\n+ `'rootToNode'`：点击节点后以该节点为根结点。\n+ `'link'`：如果节点数据中有 [link](https://echarts.apache.org/zh/option.html#series-sunburst.data.link) 点击节点后会进行超链接跳转。",
        "children": [],
        "options": "'rootToNode','link'"
    },
    {
        "name": "sort",
        "type": "enum",
        "desc": "扇形块根据数据 [`value`](https://echarts.apache.org/zh/option.html#series-sunburst.data.value) 的排序方式，如果未指定 `value`，则其值为子元素 `value` 之和。默认值 `'desc'` 表示降序排序；还可以设置为 `'asc'` 表示升序排序；`null` 表示不排序，使用原始数据的顺序；或者用回调函数进行排列：\n\n```js\nfunction(nodeA, nodeB) {\nreturn nodeA.getValue() - nodeB.getValue();\n}\n```",
        "children": [],
        "options": "'desc','asc'"
    },
    {
        "name": "renderLabelForZeroData",
        "type": "boolean",
        "default": "false",
        "desc": "如果数据没有 `name`，是否需要渲染文字。",
        "children": []
    },
    {
        "name": "label",
        "type": "Object",
        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
        "children": [
            {
                "name": "rotate",
                "type": "enum",
                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                "children": [],
                "options": "'radial','tangential'"
            },
            {
                "name": "align",
                "type": "enum",
                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                "children": [],
                "options": "'left','center','right'"
            },
            {
                "name": "minAngle",
                "type": "angle",
                "default": "null",
                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                "children": [],
                "min": "0",
                "step": "1",
                "max": "360"
            },
            {
                "name": "show",
                "type": "boolean",
                "default": "true",
                "desc": "是否显示标签。",
                "children": []
            },
            {
                "name": "position",
                "type": "enum",
                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                "children": [],
                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
            },
            {
                "name": "distance",
                "type": "number",
                "default": "5",
                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "offset",
                "type": "vector",
                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                "children": [],
                "dims": "x,y",
                "step": "0.5"
            },
            {
                "name": "formatter",
                "type": "number",
                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                "children": [],
                "options": "'normal','italic','oblique'",
                "default": "12",
                "min": "1",
                "step": "1"
            },
            {
                "name": "lineHeight",
                "type": "vector",
                "default": "'#fff'",
                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                "children": [],
                "min": "0",
                "step": "1",
                "dims": "LT,RT, RB, LB"
            },
            {
                "name": "width",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                "children": []
            },
            {
                "name": "height",
                "type": "number",
                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "rich",
                "type": "Object",
                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                "children": [
                    {
                        "name": "<style_name>",
                        "type": "number",
                        "desc": "##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n##### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            }
                        ],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    }
                ]
            }
        ]
    },
    {
        "name": "itemStyle",
        "type": "color",
        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
        "children": [
            {
                "name": "borderColor",
                "type": "color",
                "default": "'white'",
                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "1",
                "desc": "描边线宽。为 0 时无描边。",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "borderType",
                "type": "enum",
                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                "children": [],
                "options": "'solid','dashed','dotted'"
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "default": "",
                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "shadowColor",
                "type": "color",
                "default": "",
                "desc": "阴影颜色。支持的格式同`color`。",
                "children": []
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "阴影水平方向上的偏移距离。",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "阴影垂直方向上的偏移距离。",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "opacity",
                "type": "number",
                "default": "1",
                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                "children": [],
                "min": "0",
                "max": "1",
                "step": "0.01"
            }
        ]
    },
    {
        "name": "emphasis",
        "type": "Object",
        "desc": "鼠标悬停后的配置项。",
        "children": [
            {
                "name": "label",
                "type": "Object",
                "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                "children": [
                    {
                        "name": "rotate",
                        "type": "enum",
                        "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                        "children": [],
                        "options": "'radial','tangential'"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "minAngle",
                        "type": "angle",
                        "default": "null",
                        "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "max": "360"
                    },
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否显示标签。",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": "number",
                        "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n#### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n#### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "vector",
                        "default": "'#fff'",
                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n#### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n#### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n#### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n#### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n#### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n#### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n#### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n#### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n#### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n#### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n#### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "number",
                                "desc": "###### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n###### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n###### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "vector",
                                        "default": "'#fff'",
                                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n###### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n###### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n###### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n###### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n###### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n###### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "1",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": "number",
                                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n###### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n###### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n###### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n###### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n###### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    }
                                ],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "color",
                "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n#### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'white'",
                        "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "1",
                        "desc": "描边线宽。为 0 时无描边。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "阴影颜色。支持的格式同`color`。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影水平方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影垂直方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            }
        ]
    },
    {
        "name": "highlight",
        "type": "Object",
        "desc": "鼠标悬停后相关扇形块的配置项。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。",
        "children": [
            {
                "name": "label",
                "type": "Object",
                "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                "children": [
                    {
                        "name": "rotate",
                        "type": "enum",
                        "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                        "children": [],
                        "options": "'radial','tangential'"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "minAngle",
                        "type": "angle",
                        "default": "null",
                        "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "max": "360"
                    },
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否显示标签。",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": "number",
                        "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n#### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n#### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "vector",
                        "default": "'#fff'",
                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n#### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n#### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n#### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n#### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n#### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n#### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n#### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n#### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n#### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n#### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n#### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "number",
                                "desc": "###### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n###### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n###### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "vector",
                                        "default": "'#fff'",
                                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n###### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n###### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n###### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n###### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n###### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n###### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "1",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": "number",
                                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n###### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n###### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n###### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n###### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n###### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    }
                                ],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "color",
                "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n#### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'white'",
                        "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "1",
                        "desc": "描边线宽。为 0 时无描边。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "阴影颜色。支持的格式同`color`。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影水平方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影垂直方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            }
        ]
    },
    {
        "name": "downplay",
        "type": "Object",
        "desc": "鼠标悬停后不相关扇形块的配置项。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。",
        "children": [
            {
                "name": "label",
                "type": "Object",
                "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                "children": [
                    {
                        "name": "rotate",
                        "type": "enum",
                        "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                        "children": [],
                        "options": "'radial','tangential'"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "minAngle",
                        "type": "angle",
                        "default": "null",
                        "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "max": "360"
                    },
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否显示标签。",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": "number",
                        "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n#### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n#### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "vector",
                        "default": "'#fff'",
                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n#### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n#### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n#### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n#### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n#### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n#### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n#### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n#### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n#### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n#### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n#### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "number",
                                "desc": "###### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n###### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n###### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "vector",
                                        "default": "'#fff'",
                                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n###### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n###### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n###### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n###### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n###### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n###### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "1",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": "number",
                                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n###### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n###### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n###### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n###### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n###### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    }
                                ],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "color",
                "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n#### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'white'",
                        "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "1",
                        "desc": "描边线宽。为 0 时无描边。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "阴影颜色。支持的格式同`color`。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影水平方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影垂直方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            }
        ]
    },
    {
        "name": "levels",
        "type": "Array",
        "desc": "**多层配置**\n\n旭日图是一种有层次的结构，为了方便同一层样式的配置，我们提供了 levels 配置项。它是一个数组，其中的第 0 项表示数据下钻后返回上级的图形，其后的每一项分别表示从圆心向外层的层级。\n\n例如，假设我们没有数据下钻功能，并且希望将最内层的扇形块的颜色设为红色，文字设为蓝色，可以这样设置：\n\n```js\nseries: {\n// ...\nlevels: [\n{\n// 留给数据下钻点的空白配置\n},\n{\n// 最靠内测的第一层\nitemStyle: {\ncolor: 'red'\n},\nlabel: {\ncolor: 'blue'\n}\n},\n{\n// 第二层 ...\n}\n]\n}\n```",
        "children": [
            {
                "name": "label",
                "type": "Object",
                "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                "children": [
                    {
                        "name": "rotate",
                        "type": "enum",
                        "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                        "children": [],
                        "options": "'radial','tangential'"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "minAngle",
                        "type": "angle",
                        "default": "null",
                        "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "max": "360"
                    },
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "true",
                        "desc": "是否显示标签。",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": "number",
                        "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n#### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n#### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n#### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n#### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n#### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'normal','italic','oblique'",
                        "default": "12",
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "vector",
                        "default": "'#fff'",
                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n#### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n#### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n#### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n#### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n#### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n#### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n#### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "1",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n#### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n#### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n#### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n#### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n#### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n#### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "number",
                                "desc": "###### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n###### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n###### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n###### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n###### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n###### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n###### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [
                                    {
                                        "name": "lineHeight",
                                        "type": "vector",
                                        "default": "'#fff'",
                                        "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n###### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n###### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n###### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n###### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n###### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n###### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n###### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "1",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": "number",
                                        "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n###### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n###### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n###### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n###### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n###### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n###### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    }
                                ],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "color",
                "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n#### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                "children": [
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'white'",
                        "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "1",
                        "desc": "描边线宽。为 0 时无描边。",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "阴影颜色。支持的格式同`color`。",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影水平方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "阴影垂直方向上的偏移距离。",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            },
            {
                "name": "emphasis",
                "type": "Object",
                "desc": "鼠标悬停后的配置项。",
                "children": [
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                        "children": [
                            {
                                "name": "rotate",
                                "type": "enum",
                                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                                "children": [],
                                "options": "'radial','tangential'"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "minAngle",
                                "type": "angle",
                                "default": "null",
                                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "max": "360"
                            },
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "true",
                                "desc": "是否显示标签。",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": "number",
                                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "number",
                                        "desc": "####### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n####### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n####### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "vector",
                                                "default": "'#fff'",
                                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n####### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n####### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n####### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n####### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n####### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n####### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "1",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": "number",
                                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n####### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n####### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n####### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n####### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n####### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            }
                                        ],
                                        "options": "'normal','italic','oblique'",
                                        "default": "12",
                                        "min": "1",
                                        "step": "1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "itemStyle",
                        "type": "color",
                        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n##### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'white'",
                                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "描边线宽。为 0 时无描边。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "阴影颜色。支持的格式同`color`。",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影水平方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影垂直方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "highlight",
                "type": "Object",
                "desc": "鼠标悬停后相关扇形块的配置项。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。",
                "children": [
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                        "children": [
                            {
                                "name": "rotate",
                                "type": "enum",
                                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                                "children": [],
                                "options": "'radial','tangential'"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "minAngle",
                                "type": "angle",
                                "default": "null",
                                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "max": "360"
                            },
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "true",
                                "desc": "是否显示标签。",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": "number",
                                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "number",
                                        "desc": "####### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n####### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n####### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "vector",
                                                "default": "'#fff'",
                                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n####### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n####### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n####### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n####### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n####### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n####### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "1",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": "number",
                                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n####### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n####### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n####### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n####### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n####### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            }
                                        ],
                                        "options": "'normal','italic','oblique'",
                                        "default": "12",
                                        "min": "1",
                                        "step": "1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "itemStyle",
                        "type": "color",
                        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n##### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'white'",
                                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "描边线宽。为 0 时无描边。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "阴影颜色。支持的格式同`color`。",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影水平方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影垂直方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    }
                ]
            },
            {
                "name": "downplay",
                "type": "Object",
                "desc": "鼠标悬停后不相关扇形块的配置项。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。",
                "children": [
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "`label` 描述了每个扇形块中，文本标签的样式。\n\n**优先级：[series.data.label](https://echarts.apache.org/zh/option.html#series-sunburst.data.label) > [series.levels.label](https://echarts.apache.org/zh/option.html#series-sunburst.levels.label) > [series.label](https://echarts.apache.org/zh/option.html#series-sunburst.label)。**\n\n\n\n图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等，`label`选项在 ECharts 2.x 中放置于`itemStyle`下，在 ECharts 3 中为了让整个配置项结构更扁平合理，`label` 被拿出来跟 `itemStyle` 平级，并且跟 `itemStyle` 一样拥有 `emphasis` 状态。",
                        "children": [
                            {
                                "name": "rotate",
                                "type": "enum",
                                "desc": "如果是 `number` 类型，则表示标签的旋转角，从 -90 度到 90 度，正值是逆时针。\n\n除此之外，还可以是字符串 `'radial'` 表示径向旋转、`'tangential'` 表示切向旋转。\n\n默认径向旋转，如果不需要文字旋转，可以将其设为 `0`。\n\n下面的例子展示了不同的 `rotate` 设置方法：\n\n~[700x400](sunburst-label-rotate&edit=1&reset=1)",
                                "children": [],
                                "options": "'radial','tangential'"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "文字对齐方式，可取值为：`'left'`、 `'center'`、 `'right'`。注意，`'left'` 是指靠近内圈，而 `'right'` 是指靠近外圈。\n\n~[700x400](doc-example/sunburst-label-align&edit=1&reset=1)",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "minAngle",
                                "type": "angle",
                                "default": "null",
                                "desc": "当某个扇形块的角度小于该值（角度制）时，扇形块对应的文字不显示。该值用以隐藏过小扇形块中的文字。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "max": "360"
                            },
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "true",
                                "desc": "是否显示标签。",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "标签的位置。\n\n+ 可以通过内置的语义声明位置：\n\n示例：\n```js\nposition: 'top'\n```\n\n支持：`top` / `left` / `right` / `bottom` / `inside` / `insideLeft` / `insideRight` / `insideTop` / `insideBottom` / `insideTopLeft` / `insideBottomLeft` / `insideTopRight` / `insideBottomRight`\n\n+ 也可以用一个数组表示相对的百分比或者绝对像素值表示标签相对于图形包围盒左上角的位置。\n\n示例：\n```js\n// 绝对的像素值\nposition: [10, 10],\n// 相对的百分比\nposition: ['50%', '50%']\n```\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "距离图形元素的距离。当 position 为字符描述值（如 `'top'`、`'insideRight'`）时候有效。\n\n参见：[label position](doc-example/label-position)。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "是否对文字进行偏移。默认不偏移。例如：`[30, 40]` 表示文字在横向上偏移 `30`，纵向上偏移 `40`。",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": "number",
                                "desc": "标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 `\\n` 换行。\n\n**字符串模板**\n模板变量有：\n+ `{a}`：系列名。\n+ `{b}`：数据名。\n+ `{c}`：数据值。\n+ `{@xxx}：数据中名为 `'xxx'` 的维度的值，如 `{@product}` 表示名为 `'product'` 的维度的值。\n+ `{@[n]}：数据中维度 `n` 的值，如 `{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n**示例：**\n```js\nformatter: '{b}: {@score}'\n```\n\n**回调函数**\n\n回调函数格式：\n```js\n(params: Object|Array) => string\n```\n参数 `params` 是 formatter 需要的单个数据集。格式如下：\n\n```js\n{\ncomponentType: 'series',\n// 系列类型\nseriesType: string,\n// 系列在传入的 option.series 中的 index\nseriesIndex: number,\n// 系列名称\nseriesName: string,\n// 数据名，类目名\nname: string,\n// 数据在传入的 data 数组中的 index\ndataIndex: number,\n// 传入的原始数据项\ndata: Object,\n// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\nvalue: number|Array|Object,\n// 坐标轴 encode 映射信息，\n// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n// value 必然为数组，不会为 null/undefied，表示 dimension index 。\n// 其内容如：\n// {\n//     x: [2] // dimension index 为 2 的数据映射到 x 轴\n//     y: [0] // dimension index 为 0 的数据映射到 y 轴\n// }\nencode: Object,\n// 维度名列表\ndimensionNames: Array<String>,\n// 数据的维度 index，如 0 或 1 或 2 ...\n// 仅在雷达图中使用。\ndimensionIndex: number,\n// 数据图形的颜色\ncolor: string,\n\n}\n```\n\n注：encode 和 dimensionNames 的使用方式，例如：\n\n如果数据为：\n```js\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.encode.y[0]]\n```\n\n如果数据为：\n```js\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\n则可这样得到 y 轴对应的 value：\n```js\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n##### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n##### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n##### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n##### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n##### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n\n\n##### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'normal','italic','oblique'",
                                "default": "12",
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "vector",
                                "default": "'#fff'",
                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n##### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n##### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n##### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n##### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n##### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n##### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n##### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "1",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n##### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n##### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n##### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n##### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n##### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n##### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "在 `rich` 里面，可以自定义富文本样式。利用富文本样式，可以在标签中做出非常丰富的效果。\n\n例如：\n\n```js\nlabel: {\n// 在文本中，可以对部分文本采用 rich 中定义样式。\n// 这里需要在文本中使用标记符号：\n// `{styleName|text content text content}` 标记样式名。\n// 注意，换行仍是使用 '\\n'。\nformatter: [\n'{a|这段文本采用样式a}',\n'{b|这段文本采用样式b}这段用默认样式{x|这段用样式x}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\n详情参见教程：[富文本标签](tutorial.html#%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%87%E7%AD%BE)",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "number",
                                        "desc": "####### color(Color)=\"#fff\"\n\n\n\n文字的颜色。\n\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n\n####### fontStyle(string)='normal'\n\n\n\n文字字体的风格。\n\n可选：\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`\n\n\n####### fontWeight(string|number)=normal\n\n\n\n文字字体的粗细。\n\n可选：\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n####### fontFamily(string)='sans-serif'\n\n\n\n文字的字体系列。\n\n还可以是 'serif' , 'monospace', 'Arial', 'Courier New', 'Microsoft YaHei', ...\n\n####### fontSize(number)=12\n\n\n\n文字的字体大小。\n\n\n\n####### align(string)=\n\n\n\n文字水平对齐方式，默认自动。\n\n可选：\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n`rich` 中如果没有设置 `align`，则会取父层级的 `align`。例如：\n\n```js\n{\nalign: right,\nrich: {\na: {\n// 没有设置 `align`，则 `align` 为 right\n}\n}\n}\n```\n\n\n\n\n####### verticalAlign(string)=\n\n\n\n文字垂直对齐方式，默认自动。\n\n可选：\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n`rich` 中如果没有设置 `verticalAlign`，则会取父层级的 `verticalAlign`。例如：\n\n```js\n{\nverticalAlign: bottom,\nrich: {\na: {\n// 没有设置 `verticalAlign`，则 `verticalAlign` 为 bottom\n}\n}\n}\n```",
                                        "children": [
                                            {
                                                "name": "lineHeight",
                                                "type": "vector",
                                                "default": "'#fff'",
                                                "desc": "行高。\n\n\n`rich` 中如果没有设置 `lineHeight`，则会取父层级的 `lineHeight`。例如：\n\n```js\n{\nlineHeight: 56,\nrich: {\na: {\n// 没有设置 `lineHeight`，则 `lineHeight` 为 56\n}\n}\n}\n```\n\n\n\n####### backgroundColor(string|Object)='transparent'\n\n\n\n文字块背景色。\n\n可以使用颜色值，例如：`'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`。\n\n也可以直接使用图片，例如：\n\n```js\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// 这里可以是图片的 URL，\n// 或者图片的 dataURI，\n// 或者 HTMLImageElement 对象，\n// 或者 HTMLCanvasElement 对象。\n}\n```\n\n当使用图片的时候，可以使用 `width` 或 `height` 指定高宽，也可以不指定自适应。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderColor(Color)='transparent'\n\n\n\n文字块边框颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### borderWidth(number)=0\n\n\n\n文字块边框宽度。\n\n####### borderRadius(number|Array)=0\n\n\n\n文字块的圆角。\n\n####### padding(number|Array)=0\n\n\n\n文字块的内边距。例如：\n\n+ `padding: [3, 4, 5, 6]`：表示 `[上, 右, 下, 左]` 的边距。\n+ `padding: 4`：表示 `padding: [4, 4, 4, 4]`。\n+ `padding: [3, 4]`：表示 `padding: [3, 4, 3, 4]`。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n####### shadowColor(Color)='transparent'\n\n\n\n文字块的背景阴影颜色。\n\n####### shadowBlur(number)=0\n\n\n\n文字块的背景阴影长度。\n\n####### shadowOffsetX(number)=0\n\n\n\n文字块的背景阴影 X 偏移。\n\n####### shadowOffsetY(number)=0\n\n\n\n文字块的背景阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "1",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "文字块的宽度。一般不用指定，不指定则自动是文字的宽度。在想做表格项或者使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n`width` 也可以是百分比字符串，如 `'100%'`。表示的是所在文本块的 `contentWidth`（即不包含文本块的 `padding`）的百分之多少。之所以以 `contentWidth` 做基数，因为每个文本片段只能基于 `content box` 布局。如果以 `outerWidth` 做基数，则百分比的计算在实用中不具有意义，可能会超出。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": "number",
                                                "desc": "文字块的高度。一般不用指定，不指定则自动是文字的高度。在使用图片（参见 `backgroundColor`）时，可能会使用它。\n\n注意，文字块的 `width` 和 `height` 指定的是内容高宽，不包含 `padding`。\n\n注意，如果不定义 `rich` 属性，则不能指定 `width` 和 `height`。\n\n####### textBorderColor(Color)='transparent'\n\n\n\n文字本身的描边颜色。\n\n\n\n如果设置为 `'auto'`，则为视觉映射得到的颜色，如系列色。\n\n\n\n\n\n\n\n\n####### textBorderWidth(number)=0\n\n\n\n文字本身的描边宽度。\n\n####### textShadowColor(Color)='transparent'\n\n\n\n文字本身的阴影颜色。\n\n####### textShadowBlur(number)=0\n\n\n\n文字本身的阴影长度。\n\n####### textShadowOffsetX(number)=0\n\n\n\n文字本身的阴影 X 偏移。\n\n####### textShadowOffsetY(number)=0\n\n\n\n文字本身的阴影 Y 偏移。",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            }
                                        ],
                                        "options": "'normal','italic','oblique'",
                                        "default": "12",
                                        "min": "1",
                                        "step": "1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "itemStyle",
                        "type": "color",
                        "desc": "旭日图扇形块的样式。\n\n可以在 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 定义所有扇形块的样式，也可以在 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) 定义每一层扇形块的样式，还可以在 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) 定义每个扇形块单独的样式，这三者的优先级从低到高。也就是说，如果定义了 [series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle)，将会覆盖 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle) 和 [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle)。\n\n**优先级：[series.data.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.data.itemStyle) > [series.levels.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.levels.itemStyle) > [series.itemStyle](https://echarts.apache.org/zh/option.html#series-sunburst.itemStyle)。**\n\nECharts 中，通常使用 *emphasis* 表示鼠标移动到图形上后的高亮状态。对于旭日图而言，我们引入了另两种状态：*highlight* 表示由于高亮了某个扇形块引起的其他相关扇形块的高亮；*downplay* 表示除了 highlight 扇形块之外的被淡化的扇形块。参见 [highlightPolicy](https://echarts.apache.org/zh/option.html#series-sunburst.highlightPolicy)。\n\n\n\n##### color(Color)=自适应\n\n\n\n图形的颜色。 默认从全局调色盘 [option.color](https://echarts.apache.org/zh/option.html#color) 获取颜色\n\n\n\n> 颜色可以使用 RGB 表示，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。除了纯色之外颜色也支持渐变色和纹理填充\n> ```js\n> // 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n> color: {\n>     type: 'linear',\n>     x: 0,\n>     y: 0,\n>     x2: 0,\n>     y2: 1,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n> color: {\n>     type: 'radial',\n>     x: 0.5,\n>     y: 0.5,\n>     r: 0.5,\n>     colorStops: [{\n>         offset: 0, color: 'red' // 0% 处的颜色\n>     }, {\n>         offset: 1, color: 'blue' // 100% 处的颜色\n>     }],\n>     global: false // 缺省为 false\n> }\n> // 纹理填充\n> color: {\n>     image: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\n>     repeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n> }\n> ```",
                        "children": [
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'white'",
                                "desc": "图形的描边颜色。支持的颜色格式同 `color`，不支持回调函数。",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "1",
                                "desc": "描边线宽。为 0 时无描边。",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "柱条的描边类型，默认为实线，支持 `'solid'`, `'dashed'`, `'dotted'`。",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "图形阴影的模糊大小。该属性配合 `shadowColor`,`shadowOffsetX`, `shadowOffsetY` 一起设置图形的阴影效果。\n\n示例：\n```js\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "阴影颜色。支持的格式同`color`。",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影水平方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "阴影垂直方向上的偏移距离。",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name": "animation",
        "type": "boolean",
        "default": "true",
        "desc": "是否开启动画。",
        "children": []
    },
    {
        "name": "animationThreshold",
        "type": "number",
        "default": "2000",
        "desc": "是否开启动画的阈值，当单个系列显示的图形数量大于这个阈值时会关闭动画。",
        "children": []
    },
    {
        "name": "animationDuration",
        "type": "number",
        "default": "1000",
        "desc": "初始动画的时长，支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的初始动画效果：\n\n```js\nanimationDuration: function (idx) {\n// 越往后的数据时长越大\nreturn idx * 100;\n}\n```",
        "children": [],
        "min": "0",
        "step": "20"
    },
    {
        "name": "animationEasing",
        "type": "enum",
        "desc": "初始动画的缓动效果。不同的缓动效果可以参考 [缓动示例](line-easing)。",
        "children": [],
        "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
    },
    {
        "name": "animationDelay",
        "type": [
            "number",
            "Function"
        ],
        "default": "0",
        "desc": "初始动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的初始动画效果。\n\n如下示例：\n```js\nanimationDelay: function (idx) {\n// 越往后的数据延迟越大\nreturn idx * 100;\n}\n```\n\n也可以看[该示例](bar-animation-delay)",
        "children": []
    },
    {
        "name": "animationDurationUpdate",
        "type": "number",
        "default": "500",
        "desc": "数据更新动画的时长。\n\n支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的更新动画效果：\n\n```js\nanimationDurationUpdate: function (idx) {\n// 越往后的数据时长越大\nreturn idx * 100;\n}\n```",
        "children": [],
        "min": "0",
        "step": "20"
    },
    {
        "name": "animationEasingUpdate",
        "type": "enum",
        "desc": "数据更新动画的缓动效果。",
        "children": [],
        "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
    },
    {
        "name": "animationDelayUpdate",
        "type": [
            "number",
            "Function"
        ],
        "default": "0",
        "desc": "数据更新动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的更新动画效果。\n\n如下示例：\n```js\nanimationDelayUpdate: function (idx) {\n// 越往后的数据延迟越大\nreturn idx * 100;\n}\n```\n\n也可以看[该示例](bar-animation-delay)",
        "children": []
    }
]