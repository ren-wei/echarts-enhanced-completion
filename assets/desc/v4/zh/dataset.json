[
    {
        "name": "id",
        "type": "string",
        "desc": "组件 ID。默认不指定。指定则可用于在 option 或者 API 中引用组件。",
        "children": []
    },
    {
        "name": "source",
        "type": [
            "Array",
            "Object"
        ],
        "desc": "原始数据。一般来说，原始数据表达的是二维表。可以用如下这些格式表达二维表：\n\n二维数组，其中第一行/列可以给出 [维度名](https://echarts.apache.org/zh/option.html#dataset.dimensions)，也可以不给出，直接就是数据：\n\n```js\n[\n['product', '2015', '2016', '2017'],\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n```\n\n按行的 key-value 形式（对象数组），其中键（key）表明了 [维度名](https://echarts.apache.org/zh/option.html#dataset.dimensions)：\n```js\n[\n{product: 'Matcha Latte', count: 823, score: 95.8},\n{product: 'Milk Tea', count: 235, score: 81.4},\n{product: 'Cheese Cocoa', count: 1042, score: 91.2},\n{product: 'Walnut Brownie', count: 988, score: 76.9}\n]\n```\n\n按列的 key-value 形式，每一项表示二维表的 “一列”：\n\n```js\n{\n'product': ['Matcha Latte', 'Milk Tea', 'Cheese Cocoa', 'Walnut Brownie'],\n'count': [823, 235, 1042, 988],\n'score': [95.8, 81.4, 91.2, 76.9]\n}\n```\n\n关于 `dataset` 的详情，请参见[教程](tutorial.html#%E4%BD%BF%E7%94%A8%20dataset%20%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE)。",
        "children": []
    },
    {
        "name": "dimensions",
        "type": "Array",
        "desc": "使用 dimensions 定义 `series.data` 或者 `dataset.source` 的每个维度的信息。\n\n注意：如果使用了 [dataset](https://echarts.apache.org/zh/option.html#dataset)，那么可以在 [dataset.source](https://echarts.apache.org/zh/option.html#dataset.source) 的第一行/列中给出 dimension 名称。于是就不用在这里指定 dimension。但是，如果在这里指定了 `dimensions`，那么 ECharts 不再会自动从 `dataset.source` 的第一行/列中获取维度信息。\n\n例如：\n\n```js\noption = {\ndataset: {\nsource: [\n// 有了上面 dimensions 定义后，下面这五个维度的名称分别为：\n// 'date', 'open', 'close', 'highest', 'lowest'\n[12, 44, 55, 66, 2],\n[23, 6, 16, 23, 1],\n...\n]\n},\nseries: {\ntype: 'xxx',\n// 定义了每个维度的名称。这个名称会被显示到默认的 tooltip 中。\ndimensions: ['date', 'open', 'close', 'highest', 'lowest']\n}\n}\n```\n\n```js\nseries: {\ntype: 'xxx',\ndimensions: [\nnull,                // 如果此维度不想给出定义，则使用 null 即可\n{type: 'ordinal'},   // 只定义此维度的类型。\n// 'ordinal' 表示离散型，一般文本使用这种类型。\n// 如果类型没有被定义，会自动猜测类型。\n{name: 'good', type: 'number'},\n'bad'                // 等同于 {name: 'bad'}\n]\n}\n```\n\n`dimensions` 数组中的每一项可以是：\n+ `string`，如 `'someName'`，等同于 `{name: 'someName'}`\n+ `Object`，属性可以有：\n+ name: `string`。\n+ type: `string`，支持\n+ `number`，默认，表示普通数据。\n+ `ordinal`，对于类目、文本这些 string 类型的数据，如果需要能在数轴上使用，须是 'ordinal' 类型。ECharts 默认会自动判断这个类型。但是自动判断也是不可能很完备的，所以使用者也可以手动强制指定。\n+ `float`，即 [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)。\n+ `int`，即 [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)。\n+ `time`，表示时间类型。设置成 'time' 则能支持自动解析数据成时间戳（timestamp），比如该维度的数据是 '2017-05-10'，会自动被解析。时间类型的支持参见 [data](https://echarts.apache.org/zh/option.html#series.data)。\n+ displayName: 一般用于 tooltip 中维度名的展示。`string` 如果没有指定，默认使用 name 来展示。\n\n值得一提的是，当定义了 `dimensions` 后，默认 `tooltip` 中对个维度的显示，会变为『竖排』，从而方便显示每个维度的名称。如果没有定义 `dimensions`，则默认 `tooltip` 会横排显示，且只显示数值没有维度名称可显示。",
        "children": []
    },
    {
        "name": "sourceHeader",
        "type": "boolean",
        "desc": "`dataset.source` 第一行/列是否是 [维度名](dataset.dimensions) 信息。可选值：\n\n+ `null/undefine`：默认，自动探测。\n+ `true`：第一行/列是维度名信息。\n+ `false`：第一行/列直接开始是数据。\n\n注意：“第一行/列” 的意思是，如果 [series.seriesLayoutBy](https://echarts.apache.org/zh/option.html#series.seriesLayoutBy) 设置为 `'column'`（默认值），则取第一行，如果 `series.seriesLayoutBy` 设置为 `'row'`，则取第一列。\n\n\n\n# aria\n\nW3C 制定了无障碍富互联网应用规范集（[WAI-ARIA](https://www.w3.org/WAI/intro/aria)，the Accessible Rich Internet Applications Suite），致力于使得网页内容和网页应用能够被更多残障人士访问。ECharts 4.0 遵从这一规范，支持自动根据图表配置项智能生成描述，使得盲人可以在朗读设备的帮助下了解图表内容，让图表可以被更多人群访问。\n\n默认关闭，需要通过将 [aria.show](https://echarts.apache.org/zh/option.html#aria.show) 设置为 `true` 开启。开启后，会根据图表、数据、标题等情况，自动智能生成关于图表的描述，用户也可以通过配置项修改描述。\n\n**例子：**\n\n对于配置项：\n\n```js\noption = {\naria: {\nshow: true\n},\ntitle: {\ntext: '某站点用户访问来源',\nx: 'center'\n},\nseries: [\n{\nname: '访问来源',\ntype: 'pie',\ndata: [\n{ value: 335, name: '直接访问' },\n{ value: 310, name: '邮件营销' },\n{ value: 234, name: '联盟广告' },\n{ value: 135, name: '视频广告' },\n{ value: 1548, name: '搜索引擎' }\n]\n}\n]\n};\n```\n\n~[700x300](https://echarts.apache.org/examples/zh/view.html?c=doc-example/aria-pie&edit=1&reset=1)\n\n生成的图表 DOM 上，会有一个 `aria-label` 属性，在朗读设备的帮助下，盲人能够了解图表的内容。其值为：\n\n> 这是一个关于“某站点用户访问来源”的图表。图表类型是饼图，表示访问来源。其数据是——直接访问的数据是335，邮件营销的数据是310，联盟广告的数据是234，视频广告的数据是135，搜索引擎的数据是1548。\n\n生成描述的基本流程为，如果 [aria.show](https://echarts.apache.org/zh/option.html#aria.show) 设置为 `true`，则生成无障碍访问描述，否则不生成。如果定义了 [aria.description](https://echarts.apache.org/zh/option.html#aria.description)，则将其作为图表的完整描述，否则根据模板拼接生成描述。我们提供了默认的生成描述的算法，仅当生成的描述不太合适时，才需要修改这些模板，甚至使用 `aria.description` 完全覆盖。\n\n使用模板拼接时，先根据是否存在标题 [title.text](https://echarts.apache.org/zh/option.html#title.text) 决定使用 [aria.general.withTitle](https://echarts.apache.org/zh/option.html#aria.general.withTitle) 还是 [aria.general.withoutTitle](https://echarts.apache.org/zh/option.html#aria.general.withoutTitle) 作为整体性描述。其中，`aria.general.withTitle` 配置项包括模板变量 `'{title}'`，将会被替换成图表标题。也就是说，如果 `aria.general.withTitle` 被设置为 `'图表的标题是：{title}。'`，则如果包含标题 `'价格分布图'`，这部分的描述为 `'图表的标题是：价格分布图。'`。\n\n拼接完标题之后，会依次拼接系列的描述（[aria.series](https://echarts.apache.org/zh/option.html#aria.series)），和每个系列的数据的描述（[aria.data](https://echarts.apache.org/zh/option.html#aria.data)）。同样，每个模板都有可能包括模板变量，用以替换实际的值。\n\n完整的描述生成流程为：\n\n![800xauto](https://echarts.apache.org/zh/option.html#echarts-aria.jpg)",
        "children": []
    },
    {
        "name": "show",
        "type": "boolean",
        "default": "false",
        "desc": "是否开启无障碍访问。开启后将生成 `aria-label` 属性。",
        "children": []
    },
    {
        "name": "description",
        "type": "string",
        "default": "null",
        "desc": "默认采用算法自动生成图表描述，如果用户需要完全自定义，可以将这个值设为描述。如将其设置为 `'这是一个展示了价格走势的图表'`，则 `aria-label` 属性的值即为该字符串。\n\n这一配置项常用于展示单个的数据并不能展示图表内容时，用户显示指定概括性描述图表的文字。例如图表是一个包含大量散点图的地图，默认的算法只能显示数据点的位置，不能从整体上传达作者的意图。这时候，可以将 `description` 指定为作者想表达的内容即可。",
        "children": []
    },
    {
        "name": "general",
        "type": "Object",
        "desc": "对于图表的整体性描述。",
        "children": [
            {
                "name": "withTitle",
                "type": "string",
                "default": "'这是一个关于“{title}”的图表。'",
                "desc": "如果图表存在 [title.text](https://echarts.apache.org/zh/option.html#title.text)，则采用 `withTitle`。其中包括模板变量：\n\n- `{title}`：将被替换为图表的 [title.text](https://echarts.apache.org/zh/option.html#title.text)。",
                "children": []
            },
            {
                "name": "withoutTitle",
                "type": "string",
                "default": "'这是一个图表，'",
                "desc": "如果图表不存在 [title.text](https://echarts.apache.org/zh/option.html#title.text)，则采用 `withoutTitle`。",
                "children": []
            }
        ]
    },
    {
        "name": "series",
        "type": "Object",
        "desc": "系列相关的配置项。",
        "children": [
            {
                "name": "maxCount",
                "type": "number",
                "default": "10",
                "desc": "描述中最多出现的系列个数。",
                "children": []
            },
            {
                "name": "single",
                "type": "Object",
                "desc": "当图表只包含一个系列时，采用的描述。",
                "children": [
                    {
                        "name": "prefix",
                        "type": "string",
                        "default": "''",
                        "desc": "对于所有系列的整体性描述，显示在每个系列描述之前。其中包括模板变量：\n\n- `{seriesCount}`：将被替换为系列个数，这里始终为 1。",
                        "children": []
                    },
                    {
                        "name": "withName",
                        "type": "string",
                        "default": "'图表类型是{seriesType}，表示{seriesName}。'",
                        "desc": "如果系列有 `name` 属性，则采用该描述。其中包括模板变量：\n\n- `{seriesName}`：将被替换为系列的 `name`；\n- `{seriesType}`：将被替换为系列的类型名称，如：`'柱状图'`、 `'折线图'` 等等。",
                        "children": []
                    },
                    {
                        "name": "withoutName",
                        "type": "string",
                        "default": "'图表类型是{seriesType}。'",
                        "desc": "如果系列没有 `name` 属性，则采用该描述。其中包括模板变量：\n\n- `{seriesType}`：将被替换为系列的类型名称，如：`'柱状图'`、 `'折线图'` 等等。",
                        "children": []
                    }
                ]
            },
            {
                "name": "multiple",
                "type": "Object",
                "desc": "当图表只包含多个系列时，采用的描述。",
                "children": [
                    {
                        "name": "prefix",
                        "type": "string",
                        "default": "'它由{seriesCount}个图表系列组成。'",
                        "desc": "对于所有系列的整体性描述，显示在每个系列描述之前。其中包括模板变量：\n\n- `{seriesCount}`：将被替换为系列个数。",
                        "children": []
                    },
                    {
                        "name": "withName",
                        "type": "string",
                        "default": "'图表类型是{seriesType}，表示{seriesName}。'",
                        "desc": "如果系列有 `name` 属性，则采用该描述。其中包括模板变量：\n\n- `{seriesName}`：将被替换为系列的 `name`；\n- `{seriesType}`：将被替换为系列的类型名称，如：`'柱状图'`、 `'折线图'` 等等。",
                        "children": []
                    },
                    {
                        "name": "withoutName",
                        "type": "string",
                        "default": "'图表类型是{seriesType}。'",
                        "desc": "如果系列没有 `name` 属性，则采用该描述。其中包括模板变量：\n\n- `{seriesType}`：将被替换为系列的类型名称，如：`'柱状图'`、 `'折线图'` 等等。",
                        "children": []
                    },
                    {
                        "name": "separator",
                        "type": "Object",
                        "desc": "系列与系列之间描述的分隔符。",
                        "children": [
                            {
                                "name": "middle",
                                "type": "string",
                                "default": "'；'",
                                "desc": "除了最后一个系列后的分隔符。",
                                "children": []
                            },
                            {
                                "name": "end",
                                "type": "string",
                                "default": "'。'",
                                "desc": "最后一个系列后的分隔符。",
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name": "data",
        "type": "Object",
        "desc": "数据相关的配置项。",
        "children": [
            {
                "name": "maxCount",
                "type": "number",
                "default": "10",
                "desc": "描述中每个系列最多出现的数据个数。",
                "children": []
            },
            {
                "name": "allData",
                "type": "string",
                "default": "'其数据是——'",
                "desc": "当数据全部显示时采用的描述。这一配置项**不会**使得数据全部显示，可以通过将 [aria.data.maxCount](https://echarts.apache.org/zh/option.html#aria.data.maxCount) 设置为 `Number.MAX_VALUE` 实现全部显示的效果。",
                "children": []
            },
            {
                "name": "partialData",
                "type": "string",
                "default": "'其中，前{displayCnt}项是——'",
                "desc": "当只有部分数据显示时采用的描述。其中包括模板变量：\n\n- `{displayCnt}`：将被替换为显示的数据个数。",
                "children": []
            },
            {
                "name": "withName",
                "type": "string",
                "default": "'{name}的数据是{value}'",
                "desc": "如果数据有 `name` 属性，则采用该描述。其中包括模板变量：\n\n- `{name}`：将被替换为数据的 `name`；\n- `{value}`：将被替换为数据的值。",
                "children": []
            },
            {
                "name": "withoutName",
                "type": "string",
                "default": "'{value}'",
                "desc": "如果数据没有 `name` 属性，则采用该描述。其中包括模板变量：\n\n- `{value}`：将被替换为数据的值。",
                "children": []
            },
            {
                "name": "separator",
                "type": "Object",
                "desc": "数据与数据之间描述的分隔符。",
                "children": [
                    {
                        "name": "middle",
                        "type": "string",
                        "default": "'，'",
                        "desc": "除了最后一个数据后的分隔符。",
                        "children": []
                    },
                    {
                        "name": "end",
                        "type": "string",
                        "default": "''",
                        "desc": "最后一个数据后的分隔符。\n\n需要注意的是，通常最后一个数据后是系列的 `separator.end`，所以 `data.separator.end` 在大多数情况下为空字符串。",
                        "children": []
                    }
                ]
            }
        ]
    }
]