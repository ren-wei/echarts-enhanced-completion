[
    {
        "name": "id",
        "type": "string",
        "desc": "Component ID, not specified by default. If specified, it can be used to refer the component in option or API.",
        "children": []
    },
    {
        "name": "zlevel",
        "type": "number",
        "default": "0",
        "desc": "`zlevel` value of all graphical elements in .\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.",
        "children": []
    },
    {
        "name": "z",
        "type": "number",
        "default": "2",
        "desc": "`z` value of all graphical elements in , which controls order of drawing graphical components. Components with smaller `z` values may be overwritten by those with larger `z` values.\n\n`z` has a lower priority to `zlevel`, and will not create new Canvas.",
        "children": []
    },
    {
        "name": "center",
        "type": "percentvector",
        "default": "['50%', '50%']",
        "desc": "Center position of Polar coordinate, the first of which is the horizontal position, and the second is the vertical position.\n\nPercentage is supported. When set in percentage, the item is relative to the container width, and the second item to the height.\n\n**Example: **\n```\n// Set to absolute pixel values\ncenter: [400, 300]\n// Set to relative percent\ncenter: ['50%', '50%']\n```",
        "children": [],
        "dims": "x,y"
    },
    {
        "name": "radius",
        "type": "percentvector",
        "default": "0%, 75%",
        "desc": "Radius of Polar coordinate. Value can be:\n\n+ `number`: Specify outside radius directly.\n+ `string`: For example, `'20%'`, means that the outside radius is 20% of the viewport size (the little one between width and height of the chart container).\n\n\n+ `Array.<number|string>`: The first item specifies the inside radius, and the second item specifies the outside radius. Each item follows the definitions above.",
        "children": [],
        "dims": "inner,outer"
    },
    {
        "name": "tooltip",
        "type": "Object",
        "desc": "tooltip settings in the coordinate system component.\n\n\n\n**General Introduction:**\n\ntooltip can be configured on different places:\n\n+ Configured on global: [tooltip](https://echarts.apache.org/en/option.html#tooltip)\n\n+ Configured in a coordinate system: [grid.tooltip](https://echarts.apache.org/en/option.html#grid.tooltip), [polar.tooltip](https://echarts.apache.org/en/option.html#polar.tooltip), [single.tooltip](https://echarts.apache.org/en/option.html#single.tooltip)\n\n+ Configured in a series: [series.tooltip](https://echarts.apache.org/en/option.html#series.tooltip)\n\n+ Configured in each item of `series.data`: [series.data.tooltip](https://echarts.apache.org/en/option.html#series.data.tooltip)",
        "children": [
            {
                "name": "show",
                "type": "boolean",
                "default": "true",
                "desc": "Whether to show the tooltip component.\n\n\nincluding tooltip floating layer and [axisPointer](https://echarts.apache.org/en/option.html#tooltip.axisPointer).",
                "children": []
            },
            {
                "name": "trigger",
                "type": "enum",
                "desc": "Type of triggering.\n\nOptions:\n+ `'item'`\n\nTriggered by data item, which is mainly used for charts that don't have a category axis like scatter charts or pie charts.\n\n+ `'axis'`\n\nTriggered by axes, which is mainly used for charts that have category axes, like bar charts or line charts.\n\nECharts 2.x only supports axis trigger for category axis. In ECharts 3, it is supported for all types of axes in [grid](https://echarts.apache.org/en/option.html#grid) or [polar](https://echarts.apache.org/en/option.html#polar). Also, you may assign axis with [axisPointer.axis](https://echarts.apache.org/en/option.html#tooltip.axisPointer.axis).\n\n+ `'none'`\n\nTrigger nothing.",
                "children": [],
                "options": "'item','axis','none'"
            },
            {
                "name": "axisPointer",
                "type": "Object",
                "desc": "Configuration item for axisPointer.\n\n`tooltip.axisPointer` is like syntactic sugar of axisPointer settings on axes (for example, [xAxis.axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer) or [angleAxis.axisPointer](https://echarts.apache.org/en/option.html#angleAxis.axisPointer)). More detailed features can be configured on `someAxis.axisPointer`. But in common cases, using `tooltip.axisPointer` is more convenient.\n\n> **Notice:** configurations of `tooltip.axisPointer` has lower priority than that of `someAxis.axisPointer`.\n\n---\n\n\n\n`axisPointer` is a tool for displaying reference line and axis value under mouse pointer.\n\nFor example:\n~[600x450](doc-example/candlestick-axisPointer&edit=1&reset=1)\n\nIn the demo above, [axisPointer.link](https://echarts.apache.org/en/option.html#axisPointer.link) is used to link axisPointer from different coordinate systems.\n\n\n`axisPointer` can also be used on touch device, where user can drag the button to move the reference line and label.\n\n~[600x400](line-tooltip-touch&edit=1&reset=1)\n\nIn the cases that more than one axis exist, axisPointer helps to look inside the data.\n\n~[600x300](multiple-y-axis&edit=1&reset=1)\n~[600x300](multiple-x-axis&edit=1&reset=1)\n\n\n---\n\n> **Notice:**\n> Generally, axisPointers is configured in each axes who need them (for example [xAxis.axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer)), or configured in `tooltip` (for example [tooltip.axisPointer](https://echarts.apache.org/en/option.html#tooltip.axisPointer)).\n\n> But these configurations can only be configured in global axisPointer:\n[axisPointer.triggerOn](https://echarts.apache.org/en/option.html#axisPointer.triggerOn), [axisPointer.link](https://echarts.apache.org/en/option.html#axisPointer.link).\n\n---\n\n\n\n---\n\n**How to display axisPointer:**\n\nIn [cartesian (grid)](https://echarts.apache.org/en/option.html#grid) and [polar](https://echarts.apache.org/en/option.html#polar) and (single axis](~single), each axis has its own axisPointer.\n\nThose axisPointer will not be displayed by default, utill configured as follows:\n\n+ Set `someAxis.axisPointer.show` (like [xAxis.axisPointer.show](https://echarts.apache.org/en/option.html#xAxis.axisPointer.show)) as `true`. Then axisPointer of this axis will be displayed.\n\n+ Set [tooltip.trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) as `'axis'`, or set [tooltip.axisPointer.type](https://echarts.apache.org/en/option.html#tooltip.axisPointer.type) as `'cross'`. Then coordinate system will automatically chose the axes who will display their axisPointers. ([tooltip.axisPointer.axis](https://echarts.apache.org/en/option.html#tooltip.axisPointer.axis) can be used to change the choice.) Notice, `axis.axisPointer` will override `tooltip.axisPointer` settings.\n\n---\n\n**How to display the label of axisPointer:**\n\nThe label of axisPointer will not be displayed by default(namely, only reference line will be displayed by default), utill configured as follows:\n\n+ Set `someAxis.axisPointer.label.show` (for example [xAxis.axisPointer.label.show](https://echarts.apache.org/en/option.html#xAxis.axisPointer.show)) as `true`. Then the label of the axisPointer will be displayed.\n\n+ Set [tooltip.axisPointer.type](https://echarts.apache.org/en/option.html#tooltip.axisPointer.type) as  `'cross'`. Then the label of the crossed axisPointers will be displayed.\n\n---\n\n**How to configure axisPointer on touch device:**\n\nSet `someAxis.axisPointer.handle.show` (for example [xAxis.axisPointer.handle.show](https://echarts.apache.org/en/option.html#xAxis.axisPointer.handle.show) as `true`. Then the button for dragging will be displayed. (This feature is not supported on polar).\n\n**Notice:**\nIf tooltip does not work well in this case, try to set[tooltip.triggerOn](https://echarts.apache.org/en/option.html#tooltip.triggerOn) as `'none'` (for the effect: show tooltip when finger holding on the button, and hide tooltip after finger left the button), or set [tooltip.alwaysShowContent](https://echarts.apache.org/en/option.html#tooltip.alwaysShowContent) as `true` (then tooltip will always be displayed).\n\nSee the [example](line-tooltip-touch&edit=1&reset=1).\n\n\n---\n\n**Snap to point**\n\nIn value axis and time axis, if [snap](https://echarts.apache.org/en/option.html#xAxis.axisPointer.snap) is set as true, axisPointer will snap to point automatically.\n\n---",
                "children": [
                    {
                        "name": "type",
                        "type": "enum",
                        "desc": "Indicator type.\n\nOptions:\n+ `'line'` line indicator.\n\n+ `'shadow'` shadow crosshair indicator.\n\n+ `'none'` no indicator displayed.\n\n+ `'cross'` crosshair indicator, which is actually the shortcut of enable two axisPointers of two orthometric axes.",
                        "children": [],
                        "options": "'none','line','shadow','cross'"
                    },
                    {
                        "name": "axis",
                        "type": "string",
                        "default": "'auto'",
                        "desc": "The coordinate axis, which could be `'x'`, `'y'`, `'radius'`, or `'angle'`. By default, each coordinate system will automatically chose the axes whose will display its axisPointer (category axis or time axis is used by default).",
                        "children": []
                    },
                    {
                        "name": "snap",
                        "type": "boolean",
                        "desc": "Whether snap to point automatically. The default value is auto determined.\n\nThis feature usually makes sense in value axis and time axis, where tiny points can be seeked automatically.",
                        "children": []
                    },
                    {
                        "name": "z",
                        "type": "number",
                        "desc": "z value, which controls order of drawing graphical components. Components with smaller `z` values may be overwritten by those with larger `z` values.",
                        "children": []
                    },
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "label of axisPointer",
                        "children": [
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether show label. Label will not show by default. But if [tooltip.axisPointer.type](https://echarts.apache.org/en/option.html#tooltip.axisPointer.type) is set as  `'cross'`, label will be displayed automatically.",
                                "children": []
                            },
                            {
                                "name": "precision",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "default": "'auto'",
                                "desc": "The precision of value in label. It is auto determined by default. You can also set it as `'2'`, which indicates that two decimal fractions are reserved.",
                                "children": []
                            },
                            {
                                "name": "formatter",
                                "type": [
                                    "string",
                                    "Function"
                                ],
                                "default": "null",
                                "desc": "The formatter of label.\n\nIf set as `string`, for example it can be: `formatter: 'some text {value} some text`, where `{value}` will be replaced by axis value automatically.\n\nIf set as `function`:\n\n**Parameters:**\n\n`{Object}` params: Including fields as follows:\n\n`{Object}` params.value: current value of this axis. If `axis.type` is `'category'`, it is one of the value in `axis.data`. If `axis.type` is `'time'`, it is a timestamp.\n\n`{Array.<Object>}` params.seriesData: An array, containing info of nearest points. Each item is:\n\n`{string}` params.axisDimension: The dimension name of the axis. For example, in catesian it will be `'x'`, `'y'`, and in polar it will be `'radius'`, `'angle'`.\n\n`{number}` params.axisIndex: The index of the axis, for example, `0`,`1`, `2`, ...\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n\n\nEach item also includes axis infomation:\n\n```ts\n{\naxisDim: 'x', // 'x', 'y', 'angle', 'radius', 'single'\naxisId: 'xxx',\naxisName: 'xxx',\naxisIndex: 3,\naxisValue: 121, // The current value of axisPointer\naxisValueLabel: 'text of value'\n}\n```\n\n\n\n**Return:**\n\nThe string to be displayed.\n\nFor example:\n```ts\nformatter: function (params) {\n// If axis.type is 'time'\nreturn 'some text' + echarts.format.formatTime(params.value);\n}\n```",
                                "children": []
                            },
                            {
                                "name": "margin",
                                "type": "number",
                                "default": "3",
                                "desc": "Distance between label and axis.",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "text color.",
                                "children": []
                            },
                            {
                                "name": "fontStyle",
                                "type": "enum",
                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                "children": [],
                                "options": "'normal','italic','oblique'"
                            },
                            {
                                "name": "fontWeight",
                                "type": "enum",
                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                "children": [],
                                "options": "'normal','bold','bolder','lighter'"
                            },
                            {
                                "name": "fontFamily",
                                "type": "enum",
                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                "children": [],
                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                            },
                            {
                                "name": "fontSize",
                                "type": "number",
                                "default": "12",
                                "desc": "font size.",
                                "children": [],
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "default": "12",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "textBorderColor",
                                "type": "color",
                                "desc": "Stroke color of the text.",
                                "children": []
                            },
                            {
                                "name": "textBorderWidth",
                                "type": "number",
                                "desc": "Stroke line width of the text.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textBorderType",
                                "type": "enum",
                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "textBorderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "textShadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text itself.",
                                "children": []
                            },
                            {
                                "name": "textShadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow blue of the text itself.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "100",
                                "desc": "Width of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "default": "50",
                                "desc": "Height of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "overflow",
                                "type": "enum",
                                "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                                "children": [],
                                "options": "'truncate','break','breakAll'"
                            },
                            {
                                "name": "ellipsis",
                                "type": "string",
                                "default": "'...'",
                                "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                                "children": []
                            },
                            {
                                "name": "padding",
                                "type": "vector",
                                "default": "[5, 7, 5, 7]",
                                "desc": "axisPointer space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom.\n\nExamples:\n```ts\n// Set padding to be 5\npadding: 5\n// Set the top and bottom paddings to be 5, and left and right paddings to be 10\npadding: [5, 10]\n// Set each of the four paddings seperately\npadding: [\n5,  // up\n10, // right\n5,  // down\n10, // left\n]\n```",
                                "children": [],
                                "min": "0",
                                "dims": "T,R,B,L"
                            },
                            {
                                "name": "backgroundColor",
                                "type": "string",
                                "default": "'auto'",
                                "desc": "Background color of label, the same as [axis.axisLine.lineStyle.color](https://echarts.apache.org/en/option.html#xAxis.axisLine.lineStyle.color) by default.",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "string",
                                "default": "null",
                                "desc": "Border color of label.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "string",
                                "default": "0",
                                "desc": "Border width of label.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "3",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "'#aaa'",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            }
                        ]
                    },
                    {
                        "name": "lineStyle",
                        "type": "Object",
                        "desc": "It is valid when [axisPointer.type](https://echarts.apache.org/en/option.html#tooltip.axisPointer.type) is `'line'`.",
                        "children": [
                            {
                                "name": "color",
                                "type": "color",
                                "default": " #555",
                                "desc": "Line color.\n\n\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "1",
                                "desc": "line width.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "type",
                                "type": "enum",
                                "desc": "line type.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`dashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntype: [5, 10],\n\ndashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "dashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`type`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "cap",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                                "children": [],
                                "options": "'butt','round','square'"
                            },
                            {
                                "name": "join",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`miterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                                "children": [],
                                "options": "'bevel','round','miter'"
                            },
                            {
                                "name": "miterLimit",
                                "type": "number",
                                "default": "10",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`join`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    },
                    {
                        "name": "shadowStyle",
                        "type": "Object",
                        "desc": "It is valid when [axisPointer.type](https://echarts.apache.org/en/option.html#tooltip.axisPointer.type) is `'shadow'`.",
                        "children": [
                            {
                                "name": "color",
                                "type": "color",
                                "default": " 'rgba(150,150,150,0.3)",
                                "desc": "Fill color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    },
                    {
                        "name": "crossStyle",
                        "type": "Object",
                        "desc": "It is valid when [axisPointer.type](https://echarts.apache.org/en/option.html#tooltip.axisPointer.type) is `'cross'`.",
                        "children": [
                            {
                                "name": "color",
                                "type": "color",
                                "default": " #555",
                                "desc": "Line color.\n\n\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "1",
                                "desc": "line width.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "type",
                                "type": "enum",
                                "desc": "line type.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`dashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntype: [5, 10],\n\ndashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "dashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`type`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "cap",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                                "children": [],
                                "options": "'butt','round','square'"
                            },
                            {
                                "name": "join",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`miterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                                "children": [],
                                "options": "'bevel','round','miter'"
                            },
                            {
                                "name": "miterLimit",
                                "type": "number",
                                "default": "10",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`join`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    },
                    {
                        "name": "animation",
                        "type": "boolean",
                        "default": "true",
                        "desc": "Whether to enable animation.",
                        "children": []
                    },
                    {
                        "name": "animationThreshold",
                        "type": "number",
                        "default": "2000",
                        "desc": "Whether to set graphic number threshold to animation. Animation will be disabled when graphic number is larger than threshold.",
                        "children": []
                    },
                    {
                        "name": "animationDuration",
                        "type": "number",
                        "default": "1000",
                        "desc": "Duration of the first animation, which supports callback function for different data to have different animation effect:\n\n```ts\nanimationDuration: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "20"
                    },
                    {
                        "name": "animationEasing",
                        "type": "enum",
                        "desc": "Easing method used for the first animation. Varied easing effects can be found at [easing effect example](line-easing).",
                        "children": [],
                        "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
                    },
                    {
                        "name": "animationDelay",
                        "type": [
                            "number",
                            "Function"
                        ],
                        "default": "0",
                        "desc": "Delay before updating the first animation, which supports callback function for different data to have different animation effect.\n\nFor example:\n```ts\nanimationDelay: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```\n\nSee [this example](bar-animation-delay) for more information.",
                        "children": []
                    },
                    {
                        "name": "animationDurationUpdate",
                        "type": "number",
                        "default": "200",
                        "desc": "Time for animation to complete, which supports callback function for different data to have different animation effect:\n\n```ts\nanimationDurationUpdate: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "20"
                    },
                    {
                        "name": "animationEasingUpdate",
                        "type": "enum",
                        "desc": "Easing method used for animation.",
                        "children": [],
                        "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
                    },
                    {
                        "name": "animationDelayUpdate",
                        "type": [
                            "number",
                            "Function"
                        ],
                        "default": "0",
                        "desc": "Delay before updating animation, which supports callback function for different data to have different animation effects.\n\nFor example:\n```ts\nanimationDelayUpdate: function (idx) {\n// delay for later data is larger\nreturn idx * 100;\n}\n```\n\nSee [this example](bar-animation-delay) for more information.",
                        "children": []
                    }
                ]
            },
            {
                "name": "position",
                "type": [
                    "string",
                    "Array"
                ],
                "desc": "The position of the tooltip's floating layer, which would follow the position of mouse by default.\n\nOptions:\n\n+ `Array`\n\nDisplay the position of tooltip's floating layer through array, which supports absolute position and relative percentage.\n\nExample:\n\n```ts\n// absolute position, which is 10px to the left side and 10px to the top side of the container\nposition: [10, 10]\n// relative position, in the exact center of the container\nposition: ['50%', '50%']\n```\n\n+ `Function`\n\nCallback function in the following form:\n```ts\n(point: Array, params: Object|Array.<Object>, dom: HTMLDomElement, rect: Object, size: Object) => Array\n```\n\n**Parameters:**<br>\npoint: Mouse position.<br>\nparam: The same as formatter.<br>\ndom: The DOM object of tooltip.<br>\nrect: It is valid only when mouse is on graphic elements, which stands for a bounding box with `x`, `y`, `width`, and `height`.<br>\nsize: The size of dom echarts container. For example: `{contentSize: [width, height], viewSize: [width, height]}`. <br>\n\n**Return:**<br>\nReturn value is an array standing for tooltip position, which can be absolute pixels, or relative percentage.<br>\nOr can be an object, like `{left: 10, top: 30}`, or `{right: '20%', bottom: 40}`.<br>\n\nFor example:\n```ts\nposition: function (point, params, dom, rect, size) {\n// fixed at top\nreturn [point[0], '10%'];\n}\n```\nOr:\n```ts\nposition: function (pos, params, dom, rect, size) {\n// tooltip will be fixed on the right if mouse hovering on the left,\n// and on the left if hovering on the right.\nvar obj = {top: 60};\nobj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\nreturn obj;\n}\n```\n\n+ `'inside'`\n\nCenter position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'top'`\n\nTop position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'left'`\n\nLeft position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'right'`\n\nRight position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'bottom'`\n\nBottom position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.",
                "children": []
            },
            {
                "name": "formatter",
                "type": [
                    "string",
                    "Function"
                ],
                "desc": "The content formatter of tooltip's floating layer which supports string template and callback function.\n\n**1. String template**\n\nThe template variables are `{a}`, `{b}`, `{c}`, `{d}` and `{e}`, which stands for series name, data name and data value and ect. When [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is set to be `'axis'`, there may be data from multiple series. In this time, series index can be refered as `{a0}`, `{a1}`, or `{a2}`.\n\n`{a}`, `{b}`, `{c}`, `{d}` have different meanings for different series types:\n\n+ Line (area) charts, bar (column) charts, K charts: `{a}` for series name, `{b}` for category name, `{c}` for data value, `{d}` for none;\n\n+ Scatter (bubble) charts: `{a}` for series name, `{b}` for data name, `{c}` for data value, `{d}` for none;\n\n+ Map: `{a}` for series name, `{b}` for area name, `{c}` for merging data, `{d}` for none;\n\n+ Pie charts, gauge charts, funnel charts: `{a}` for series name, `{b}` for data item name, `{c}` for data value, `{d}` for percentage.\n\n**Example: **\n```ts\nformatter: '{b0}: {c0}<br />{b1}: {c1}'\n```\n\n\n**2. Callback function**\n\nThe format of callback function:\n\n```ts\n(params: Object|Array, ticket: string, callback: (ticket: string, html: string)) => string | HTMLElement | HTMLElement[]\n```\n\nThe first parameter `params` is the data that the formatter needs. Its format is shown as follows:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\nWhen [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'axis'`, or when tooltip is triggered by [axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer), `params` is the data array of multiple series. The content of each item of the array is the same as above. Besides,\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n**Note: **Using array to present all the parameters in ECharts 2.x is not supported anymore.\n\nThe second parameter `ticket` is the asynchronous callback flag which should be used along with the third parameter `callback` when it is used.\n\nThe third parameter `callback` is asynchronous callback. When the content of tooltip is acquired asynchronously, `ticket` and `htm` as introduced above can be used to update tooltip with callback.\n\nExample:\n```ts\nformatter: function (params, ticket, callback) {\n$.get('detail?name=' + params.name, function (content) {\ncallback(ticket, toHTML(content));\n});\nreturn 'Loading';\n}\n```",
                "children": []
            },
            {
                "name": "valueFormatter",
                "type": "string",
                "desc": "> Since `v5.3.0`\n\n\n\nCallback function for formatting the value section in tooltip.\n\nInterface:\n```ts\n(value: number | string) => string\n```\n\nExample:\n```ts\n// Add $ prefix\nvalueFormatter: (value) => '$' + value.toFixed(2)\n```",
                "children": []
            },
            {
                "name": "backgroundColor",
                "type": "Color",
                "default": "'rgba(50,50,50,0.7)'",
                "desc": "The background color of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "color",
                "default": "'#333'",
                "desc": "The border color of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "The border width of tooltip's floating layer.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "padding",
                "type": "vector",
                "default": "5",
                "desc": "The floating layer of tooltip space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom.\n\nExamples:\n```ts\n// Set padding to be 5\npadding: 5\n// Set the top and bottom paddings to be 5, and left and right paddings to be 10\npadding: [5, 10]\n// Set each of the four paddings seperately\npadding: [\n5,  // up\n10, // right\n5,  // down\n10, // left\n]\n```",
                "children": [],
                "dims": "T,R,B,L"
            },
            {
                "name": "textStyle",
                "type": "Object",
                "desc": "The text syle of tooltip's floating layer.",
                "children": [
                    {
                        "name": "color",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "text color.",
                        "children": []
                    },
                    {
                        "name": "fontStyle",
                        "type": "enum",
                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                        "children": [],
                        "options": "'normal','italic','oblique'"
                    },
                    {
                        "name": "fontWeight",
                        "type": "enum",
                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                        "children": [],
                        "options": "'normal','bold','bolder','lighter'"
                    },
                    {
                        "name": "fontFamily",
                        "type": "enum",
                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                        "children": [],
                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                    },
                    {
                        "name": "fontSize",
                        "type": "number",
                        "default": "14",
                        "desc": "font size.",
                        "children": [],
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "default": "12",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "textBorderColor",
                        "type": "color",
                        "desc": "Stroke color of the text.",
                        "children": []
                    },
                    {
                        "name": "textBorderWidth",
                        "type": "number",
                        "desc": "Stroke line width of the text.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textBorderType",
                        "type": "enum",
                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "textBorderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "textShadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text itself.",
                        "children": []
                    },
                    {
                        "name": "textShadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow blue of the text itself.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "100",
                        "desc": "Width of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "50",
                        "desc": "Height of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "overflow",
                        "type": "enum",
                        "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                        "children": [],
                        "options": "'truncate','break','breakAll'"
                    },
                    {
                        "name": "ellipsis",
                        "type": "string",
                        "default": "'...'",
                        "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                        "children": []
                    }
                ]
            },
            {
                "name": "extraCssText",
                "type": "text",
                "desc": "Extra CSS style for floating layer. The following is an example for adding shadow.\n\n```ts\nextraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'\n```",
                "children": []
            }
        ]
    }
]