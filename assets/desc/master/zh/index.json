[
    {
        "name": "title",
        "type": "Object",
        "desc": "标题组件，包含主标题和副标题。\n\n在 ECharts 2.x 中单个 ECharts 实例最多只能拥有一个标题组件。但是在 ECharts 3 中可以存在任意多个标题组件，这在需要标题进行排版，或者单个实例中的多个图表都需要标题时会比较有用。\n\n**例如下面不同缓动函数效果的示例，每一个缓动效果图都带有一个标题组件：**\n~[700x400](https://echarts.apache.org/examples/zh/view.html?c=line-easing&edit=1&reset=1)",
        "detailFileName": "title"
    },
    {
        "name": "legend",
        "type": "Object",
        "desc": "图例组件。\n\n图例组件展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示。\n\nECharts 3 中单个 echarts 实例中可以存在多个图例组件，会方便多个图例的布局。\n\n当图例数量过多时，可以使用 [滚动图例（垂直）](pie-legend&edit=1&reset=1) 或 [滚动图例（水平）](radar2&edit=1&reset=1)，参见：[legend.type](https://echarts.apache.org/zh/option.html#legend.type)",
        "detailFileName": "legend"
    },
    {
        "name": "grid",
        "type": "Object",
        "desc": "直角坐标系内绘图网格，单个 grid 内最多可以放置上下两个 X 轴，左右两个 Y 轴。可以在网格上绘制[折线图](https://echarts.apache.org/zh/option.html#series-line)，[柱状图](https://echarts.apache.org/zh/option.html#series-bar)，[散点图（气泡图）](https://echarts.apache.org/zh/option.html#series-scatter)。\n\n在 ECharts 2.x 里单个 echarts 实例中最多只能存在一个 grid 组件，在 ECharts 3 中可以存在任意个 grid 组件。\n\n**例如下面这个 Anscombe Quartet 的示例：**\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=scatter-anscombe-quartet&edit=1&reset=1)",
        "detailFileName": "grid"
    },
    {
        "name": "xAxis",
        "type": "Object",
        "desc": "直角坐标系 grid 中的 x 轴，一般情况下单个 grid 组件最多只能放上下两个 x 轴，多于两个 x 轴需要通过配置 [offset](https://echarts.apache.org/zh/option.html#xAxis.offset) 属性防止同个位置多个 x 轴的重叠。",
        "detailFileName": "xAxis"
    },
    {
        "name": "yAxis",
        "type": "Object",
        "desc": "直角坐标系 grid 中的 y 轴，一般情况下单个 grid 组件最多只能放左右两个 y 轴，多于两个 y 轴需要通过配置 [offset](https://echarts.apache.org/zh/option.html#yAxis.offset) 属性防止同个位置多个 Y 轴的重叠。",
        "detailFileName": "yAxis"
    },
    {
        "name": "polar",
        "type": "Object",
        "desc": "极坐标系，可以用于散点图和折线图。每个极坐标系拥有一个[角度轴](https://echarts.apache.org/zh/option.html#angleAxis)和一个[半径轴](https://echarts.apache.org/zh/option.html#radiusAxis)。\n\n**示例：**\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=scatter-polar-punchCard&edit=1&reset=1)",
        "detailFileName": "polar"
    },
    {
        "name": "radiusAxis",
        "type": "Object",
        "desc": "极坐标系的径向轴。",
        "detailFileName": "radiusAxis"
    },
    {
        "name": "angleAxis",
        "type": "Object",
        "desc": "极坐标系的角度轴。",
        "detailFileName": "angleAxis"
    },
    {
        "name": "radar",
        "type": "Object",
        "desc": "雷达图坐标系组件，只适用于[雷达图](https://echarts.apache.org/zh/option.html#series-radar)。该组件等同 ECharts 2 中的 polar 组件。因为 3 中的 polar 被重构为标准的极坐标组件，为避免混淆，雷达图使用 radar 组件作为其坐标系。\n\n雷达图坐标系与极坐标系不同的是它的每一个轴（indicator 指示器）都是一个单独的维度，可以通过 [name](https://echarts.apache.org/zh/option.html#radar.name)、[axisLine](https://echarts.apache.org/zh/option.html#radar.axisLine)、[axisTick](https://echarts.apache.org/zh/option.html#radar.axisTick)、[axisLabel](https://echarts.apache.org/zh/option.html#radar.axisLabel)、[splitLine](https://echarts.apache.org/zh/option.html#radar.splitLine)、 [splitArea](https://echarts.apache.org/zh/option.html#radar.splitArea) 几个配置项配置指示器坐标轴线的样式。\n\n\n下面是一个 radar 组件的一个自定义例子。\n\n~[400x400](https://echarts.apache.org/examples/zh/view.html?c=doc-example/radar&edit=1&reset=1)",
        "detailFileName": "radar"
    },
    {
        "name": "dataZoom",
        "type": [
            "Array",
            "Object"
        ],
        "desc": "`dataZoom` 组件 用于区域缩放，从而能自由关注细节的数据信息，或者概览数据整体，或者去除离群点的影响。\n\n\n现在支持这几种类型的 `dataZoom` 组件：\n\n+ [内置型数据区域缩放组件（dataZoomInside）](https://echarts.apache.org/zh/option.html#dataZoom-inside)：内置于坐标系中，使用户可以在坐标系上通过鼠标拖拽、鼠标滚轮、手指滑动（触屏上）来缩放或漫游坐标系。\n\n+ [滑动条型数据区域缩放组件（dataZoomSlider）](https://echarts.apache.org/zh/option.html#dataZoom-slider)：有单独的滑动条，用户在滑动条上进行缩放或漫游。\n\n+ [框选型数据区域缩放组件（dataZoomSelect）](https://echarts.apache.org/zh/option.html#toolbox.feature.dataZoom)：提供一个选框进行数据区域缩放。即 [toolbox.feature.dataZoom](https://echarts.apache.org/zh/option.html#toolbox.feature.dataZoom)，配置项在 `toolbox` 中。\n\n\n如下例子：\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=doc-example/scatter-dataZoom-all&edit=1&reset=1)\n\n<br>\n\n---\n\n**✦ dataZoom 和 数轴的关系 ✦**\n\n`dataZoom` 主要是对 `数轴（axis）` 进行操作（控制数轴的显示范围，或称窗口（window））。\n\n> 可以通过 [dataZoom.xAxisIndex](https://echarts.apache.org/zh/option.html#dataZoom.xAxisIndex) 或 [dataZoom.yAxisIndex](https://echarts.apache.org/zh/option.html#dataZoom.yAxisIndex) 或 [dataZoom.radiusAxisIndex](https://echarts.apache.org/zh/option.html#dataZoom.radiusAxisIndex) 或 [dataZoom.angleAxisIndex](https://echarts.apache.org/zh/option.html#dataZoom.angleAxisIndex) 来指定 `dataZoom` 控制哪个或哪些数轴。\n\n`dataZoom` 组件可 **同时存在多个**，起到共同控制的作用。如果多个 `dataZoom` 组件共同控制同一个数轴，他们会自动联动。\n\n<br>\n\n---\n\n**✦ dataZoom 组件如何影响轴和数据 ✦**\n\n\n\n`dataZoom` 的运行原理是通过 `数据过滤` 以及在内部设置轴的显示窗口来达到 `数据窗口缩放` 的效果。\n\n数据过滤模式（[dataZoom.filterMode](https://echarts.apache.org/zh/option.html#dataZoom.filterMode)）的设置不同，效果也不同。\n\n可选值为：\n\n+ 'filter'：当前数据窗口外的数据，被 **过滤掉**。即 **会** 影响其他轴的数据范围。每个数据项，只要有一个维度在数据窗口外，整个数据项就会被过滤掉。\n\n+ 'weakFilter'：当前数据窗口外的数据，被 **过滤掉**。即 **会** 影响其他轴的数据范围。每个数据项，只有当全部维度都在数据窗口同侧外部，整个数据项才会被过滤掉。\n\n+ 'empty'：当前数据窗口外的数据，被 **设置为空**。即 **不会** 影响其他轴的数据范围。\n\n+ 'none': 不过滤数据，只改变数轴范围。\n\n如何设置，由用户根据场景和需求自己决定。经验来说：\n\n+ 当『只有 X 轴 或 只有 Y 轴受 `dataZoom` 组件控制』时，常使用 `filterMode: 'filter'`，这样能使另一个轴自适应过滤后的数值范围。\n\n+ 当『X 轴 Y 轴分别受 `dataZoom` 组件控制』时：\n\n+ 如果 X 轴和 Y 轴是『同等地位的、不应互相影响的』，比如在『双数值轴散点图』中，那么两个轴可都设为 `fiterMode: 'empty'`。\n\n+ 如果 X 轴为主，Y 轴为辅，比如在『柱状图』中，需要『拖动 `dataZoomX` 改变 X 轴过滤柱子时，Y 轴的范围也自适应剩余柱子的高度』，『拖动 `dataZoomY` 改变 Y 轴过滤柱子时，X 轴范围不受影响』，那么就 X轴设为 `fiterMode: 'filter'`，Y 轴设为 `fiterMode: 'empty'`，即主轴 `'filter'`，辅轴 `'empty'`。\n\n下面是个具体例子：\n\n```javascript\noption = {\ndataZoom: [\n{\nid: 'dataZoomX',\ntype: 'slider',\nxAxisIndex: [0],\nfilterMode: 'filter'\n},\n{\nid: 'dataZoomY',\ntype: 'slider',\nyAxisIndex: [0],\nfilterMode: 'empty'\n}\n],\nxAxis: {type: 'value'},\nyAxis: {type: 'value'},\nseries{\ntype: 'bar',\ndata: [\n// 第一列对应 X 轴，第二列对应 Y 轴。\n[12, 24, 36],\n[90, 80, 70],\n[3, 9, 27],\n[1, 11, 111]\n]\n}\n}\n```\n上例中，`dataZoomX` 的 `filterMode` 设置为 `'filter'`。于是，假设当用户拖拽 `dataZoomX`（不去动 `dataZoomY`）导致其 valueWindow 变为 `[2, 50]` 时，`dataZoomX` 对 series.data 的第一列进行遍历，窗口外的整项去掉，最终得到的 series.data 为：\n\n```javascript\n[\n// 第一列对应 X 轴，第二列对应 Y 轴。\n[12, 24, 36],\n// [90, 80, 70] 整项被过滤掉，因为 90 在 dataWindow 之外。\n[3, 9, 27]\n// [1, 11, 111] 整项被过滤掉，因为 1 在 dataWindow 之外。\n]\n```\n\n过滤前，series.data 中对应 Y 轴的值有 `24`、`80`、`9`、`11`，过滤后，只剩下 `24` 和 `9`，那么 Y 轴的显示范围就会自动改变以适应剩下的这两个值的显示（如果 Y 轴没有被设置 `min`、`max` 固定其显示范围的话）。\n\n所以，`filterMode: 'filter'` 的效果是：过滤数据后使另外的轴也能自动适应当前数据的范围。\n\n再从头来，上例中 `dataZoomY` 的 `filterMode` 设置为 `'empty'`。于是，假设当用户拖拽 `dataZoomY`（不去动 `dataZoomX`）导致其 dataWindow 变为 `[10, 60]` 时，`dataZoomY` 对 series.data 的第二列进行遍历，窗口外的值被设置为 empty （即替换为 NaN，这样设置为空的项，其所对应柱形，在 X 轴还有占位，只是不显示出来）。最终得到的 series.data 为：\n\n```javascript\n[\n// 第一列对应 X 轴，第二列对应 Y 轴。\n[12, 24, 36],\n[90, NaN, 70], // 设置为 empty (NaN)\n[3, NaN, 27],  // 设置为 empty (NaN)\n[1, 11, 111]\n]\n```\n\n这时，series.data 中对应于 X 轴的值仍然全部保留不受影响，为 `12`、`90`、`3`、`1`。那么用户对 `dataZoomY` 的拖拽操作不会影响到 X 轴的范围。这样的效果，对于离群点（outlier）过滤功能，比较清晰。\n\n如下面的例子：\n~[600x400](doc-example/bar-dataZoom-filterMode&edit=1&reset=1)\n\n\n\n另外，如果在任一个数轴上设置了 `min`、`max`（如设置 `yAxis: {min: 0, max: 400}`），那么这个数轴无论如何也不会被其他数轴的 dataZoom 行为影响了。\n\n<br>\n\n---\n\n**✦ 数据窗口的设置 ✦**\n\n`dataZoom` 的数据窗口范围的设置，目前支持两种形式：\n\n+ 百分比形式：即设置 [dataZoom.start](https://echarts.apache.org/zh/option.html#dataZoom.start) 和 [dataZoom.end](https://echarts.apache.org/zh/option.html#dataZoom.end)。\n\n+ 绝对数值形式：即设置 [dataZoom.startValue](https://echarts.apache.org/zh/option.html#dataZoom.startValue) 和 [dataZoom.endValue](https://echarts.apache.org/zh/option.html#dataZoom.endValue)。\n\n注意：当使用百分比形式指定 `dataZoom` 范围时，且处于如下场景（或类似场景）中，`dataZoom` 的结果是和 `dataZoom` 组件的定义顺序相关的。\n\n```javascript\noption = {\ndataZoom: [\n{\nid: 'dataZoomX',\ntype: 'slider',\nxAxisIndex: [0],\nfilterMode: 'filter', // 设定为 'filter' 从而 X 的窗口变化会影响 Y 的范围。\nstart: 30,\nend: 70\n},\n{\nid: 'dataZoomY',\ntype: 'slider',\nyAxisIndex: [0],\nfilterMode: 'empty',\nstart: 20,\nend: 80\n}\n],\nxAxis: {\ntype: 'value'\n},\nyAxis: {\ntype: 'value'\n// yAxis 中并没有使用 min、max 来显示限定轴的显示范围。\n},\nseries{\ntype: 'bar',\ndata: [\n// 第一列对应 X 轴，第二列对应 Y 轴。\n[12, 24, 36],\n[90, 80, 70],\n[3, 9, 27],\n[1, 11, 111]\n]\n}\n}\n```\n\n在上例中，`dataZoomY` 的 `start: 20, end: 80` 到底表示什么意思？\n\n+ 如果 `yAxis.min`、`yAxis.max` 进行了直接设置：\n\n那么 `dataZoomY` 的 `start: 20, end: 80` 表示 `yAxis.min` ~ `yAxis.max` 的 `20%` 到 `80%`。\n\n+ 如果 `yAxis.min`、`yAxis.max` 没有设置：\n\n+ 如果 `dataZoomX` 设置为 `filterMode: 'empty'`：\n\n那么 `dataZoomY` 的 `start: 20, end: 80` 表示 series.data 中 `dataMinY` ~ `dataMaxY`（即上例中的 `9` ~ `80`）的 `20%` 到 `80%`。\n\n+ 如果 `dataZoomX` 设置为 `filterMode: 'filter'`：\n\n那么，因为 `dataZoomX` 定义 `dataZoomY` 组件之前，所以 `dataZoomX` 的 `start: 30, end: 70` 表示全部数据的 `30%` 到 `70%`，而 `dataZoomY` 组件的 `start: 20, end: 80` 表示经过 `dataZoomX` 过滤处理后，所得数据集的 `20%` 到 `80%`。\n\n如果需要改变这种处理顺序，那么改变 `dataZoomX` 和 `dataZoomY` 在 option 中的出现顺序即可。",
        "detailFileName": "dataZoom"
    },
    {
        "name": "visualMap",
        "type": [
            "Array",
            "Object"
        ],
        "desc": "`visualMap` 是视觉映射组件，用于进行『视觉编码』，也就是将数据映射到视觉元素（视觉通道）。\n\n视觉元素可以是：<br>\n\n\n\n+ `symbol`: 图元的图形类别。\n+ `symbolSize`: 图元的大小。\n+ `color`: 图元的颜色。\n+ `colorAlpha`: 图元的颜色的透明度。\n+ `opacity`: 图元以及其附属物（如文字标签）的透明度。\n+ `colorLightness`: 颜色的明暗度，参见 [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV)。\n+ `colorSaturation`: 颜色的饱和度，参见 [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV)。\n+ `colorHue`: 颜色的色调，参见 [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV)。\n\n\n\n`visualMap` 组件可以定义多个，从而可以同时对数据中的多个维度进行视觉映射。\n\n`visualMap` 组件可以定义为 [分段型（visualMapPiecewise）](https://echarts.apache.org/zh/option.html#visualMap-piecewise) 或 [连续型（visualMapContinuous）](https://echarts.apache.org/zh/option.html#visualMap-continuous)，通过 `type` 来区分。例如：\n\n```javascript\noption = {\nvisualMap: [\n{ // 第一个 visualMap 组件\ntype: 'continuous', // 定义为连续型 visualMap\n...\n},\n{ // 第二个 visualMap 组件\ntype: 'piecewise', // 定义为分段型 visualMap\n...\n}\n],\n...\n};\n```\n\n<br>\n**✦ 视觉映射方式的配置 ✦**\n\n既然是『数据』到『视觉元素』的映射，`visualMap` 中可以指定数据的『哪个维度』（参见[visualMap.dimension](https://echarts.apache.org/zh/option.html#visualMap.dimension)）映射到哪些『视觉元素』（参见[visualMap.inRange](https://echarts.apache.org/zh/option.html#visualMap.inRange) 和 [visualMap.outOfRange](https://echarts.apache.org/zh/option.html#visualMap.outOfRange)）中。\n\n<br>\n在 visualMap 组件所控制的 series 中，如果 series 中某个数据项需要避开 visualMap 映射，可以这么配置：\n```\nseries: {\ntype: '...',\ndata: [\n{name: 'Shanghai', value: 251},\n{name: 'Haikou', value: 21},\n// 设置 `visualMap: false` 则 visualMap 不对此项进行控制，此时系列\n// 可使用自身的视觉参数（color/symbol/ ...控制此项的显示。\n{name: 'Beijing', value: 821, visualMap: false},\n...\n]\n}\n```\n\n\n\n<br>\n**✦ 与 ECharts2 中 dataRange 的关系 ✦**\n\n`visualMap` 是由 ECharts2 中的 `dataRange` 组件改名以及扩展而来。ECharts3里 `option` 中的 `dataRange` 配置项仍然被兼容，会自动转换成 `visualMap` 配置项。在option中推荐写 `visualMap` 而非 `dataRange`。",
        "detailFileName": "visualMap"
    },
    {
        "name": "tooltip",
        "type": "Object",
        "desc": "提示框组件。\n\n---\n\n\n\n**提示框组件的通用介绍：**\n\n提示框组件可以设置在多种地方：\n\n+ 可以设置在全局，即 [tooltip](https://echarts.apache.org/zh/option.html#tooltip)\n\n+ 可以设置在坐标系中，即 [grid.tooltip](https://echarts.apache.org/zh/option.html#grid.tooltip)、[polar.tooltip](https://echarts.apache.org/zh/option.html#polar.tooltip)、[single.tooltip](https://echarts.apache.org/zh/option.html#single.tooltip)\n\n+ 可以设置在系列中，即 [series.tooltip](https://echarts.apache.org/zh/option.html#series.tooltip)\n\n+ 可以设置在系列的每个数据项中，即 [series.data.tooltip](https://echarts.apache.org/zh/option.html#series.data.tooltip)",
        "detailFileName": "tooltip"
    },
    {
        "name": "axisPointer",
        "type": "Object",
        "desc": "这是坐标轴指示器（axisPointer）的全局公用设置。\n\n\n\n---\n\n\n\n坐标轴指示器是指示坐标轴当前刻度的工具。\n\n如下例，鼠标悬浮到图上，可以出现标线和刻度文本。\n\n~[600x450](doc-example/candlestick-axisPointer&edit=1&reset=1)\n\n上例中，使用了 [axisPointer.link](https://echarts.apache.org/zh/option.html#axisPointer.link) 来关联不同的坐标系中的 axisPointer。\n\n坐标轴指示器也有适合触屏的交互方式，如下：\n\n~[600x400](line-tooltip-touch&edit=1&reset=1)\n\n坐标轴指示器在多轴的场景能起到辅助作用：\n\n~[600x300](multiple-y-axis&edit=1&reset=1)\n~[600x300](multiple-x-axis&edit=1&reset=1)\n\n\n\n---\n\n> **注意：**\n> 一般来说，axisPointer 的具体配置项会配置在各个轴中（如 [xAxis.axisPointer](https://echarts.apache.org/zh/option.html#xAxis.axisPointer)）或者 `tooltip` 中（如 [tooltip.axisPointer](https://echarts.apache.org/zh/option.html#tooltip.axisPointer)）。\n\n> 但是这几个选项只能配置在全局的 axisPointer 中：[axisPointer.triggerOn](https://echarts.apache.org/zh/option.html#axisPointer.triggerOn)、[axisPointer.link](https://echarts.apache.org/zh/option.html#axisPointer.link)。\n\n---\n\n**如何显示 axisPointer：**\n\n直角坐标系 [grid](https://echarts.apache.org/zh/option.html#grid)、极坐标系 [polar](https://echarts.apache.org/zh/option.html#polar)、单轴坐标系 [single](https://echarts.apache.org/zh/option.html#single) 中的每个轴都自己的 axisPointer。\n\n他们的 axisPointer 默认不显示。有两种方法可以让他们显示：\n\n+ 设置轴上的 `axisPointer.show`（例如 [xAxis.axisPointer.show](https://echarts.apache.org/zh/option.html#xAxis.axisPointer.show)）为 `true`，则显示此轴的 axisPointer。\n\n+ 设置 [tooltip.trigger](https://echarts.apache.org/zh/option.html#tooltip.trigger) 设置为 `'axis'` 或者 [tooltip.axisPointer.type](https://echarts.apache.org/zh/option.html#tooltip.axisPointer.type) 设置为 `'cross'`，则此时坐标系会自动选择显示哪个轴的 axisPointer，也可以使用 [tooltip.axisPointer.axis](https://echarts.apache.org/zh/option.html#tooltip.axisPointer.axis) 改变这种选择。注意，轴上如果设置了 axisPointer，会覆盖此设置。\n\n---\n\n**如何显示 axisPointer 的 label：**\n\naxisPointer 的 label 默认不显示（也就是默认只显示指示线），除非：\n\n+ 设置轴上的 `axisPointer.label.show`（例如 [xAxis.axisPointer.label.show](https://echarts.apache.org/zh/option.html#xAxis.axisPointer.show)）为 `true`，则显示此轴的 axisPointer 的 label。\n\n+ 设置 [tooltip.axisPointer.type](https://echarts.apache.org/zh/option.html#tooltip.axisPointer.type) 为 `'cross'` 时会自动显示 axisPointer 的 label。\n\n---\n\n**关于触屏的 axisPointer 的设置**\n\n设置轴上的 `axisPointer.handle.show`（例如 [xAxis.axisPointer.handle.show](https://echarts.apache.org/zh/option.html#xAxis.axisPointer.handle.show) 为 `true` 则会显示出此 axisPointer 的拖拽按钮。（polar 坐标系暂不支持此功能）。\n\n**注意：**\n如果发现此时 tooltip 效果不良好，可设置 [tooltip.triggerOn](https://echarts.apache.org/zh/option.html#tooltip.triggerOn) 为 `'none'`（于是效果为：手指按住按钮则显示 tooltip，松开按钮则隐藏 tooltip），或者 [tooltip.alwaysShowContent](https://echarts.apache.org/zh/option.html#tooltip.alwaysShowContent) 为 `true`（效果为 tooltip 一直显示）。\n\n参见[例子](line-tooltip-touch&edit=1&reset=1)。\n\n---\n\n**自动吸附到数据（snap）**\n\n对于数值轴、时间轴，如果开启了 [snap](https://echarts.apache.org/zh/option.html#xAxis.axisPointer.snap)，则 axisPointer 会自动吸附到最近的点上。\n\n\n\n\n\n\n---",
        "detailFileName": "axisPointer"
    },
    {
        "name": "toolbox",
        "type": "Object",
        "desc": "工具栏。内置有[导出图片](https://echarts.apache.org/zh/option.html#toolbox.feature.saveAsImage)，[数据视图](https://echarts.apache.org/zh/option.html#toolbox.feature.dataView)，[动态类型切换](https://echarts.apache.org/zh/option.html#toolbox.feature.magicType)，[数据区域缩放](https://echarts.apache.org/zh/option.html#toolbox.feature.dataZoom)，[重置](https://echarts.apache.org/zh/option.html#toolbox.feature.reset)五个工具。\n\n**如下示例：**\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=line-marker&reset=1&edit=1)",
        "detailFileName": "toolbox"
    },
    {
        "name": "brush",
        "type": "Object",
        "desc": "`brush` 是区域选择组件，用户可以选择图中一部分数据，从而便于向用户展示被选中数据，或者他们的一些统计计算结果。\n\n\n\n<br>\n\n---\n\n**刷子的类型和启动按钮**\n\n目前 `brush` 组件支持的图表类型：`scatter`、`bar`、`candlestick`（`parallel` 本身自带刷选功能，但并非由 brush 组件来提供）。\n\n点击 `toolbox` 中的按钮，能够进行『区域选择』、『清除选择』等操作。\n\n<br>\n`横向刷子` 的示例如下（点击 `toolbox` 中的按钮启动刷选）：\n~[800x500](https://echarts.apache.org/examples/zh/view.html?c=candlestick-brush&edit=1&reset=1)\n\n<br>\n`bar` 图中的 `brush`（点击 `toolbox` 中的按钮启动刷选）：\n~[800x400](https://echarts.apache.org/examples/zh/view.html?c=bar-brush&edit=1&reset=1)\n\n\n启动 `brush` 的按钮既可以在 `toolbox` 中指定（参见 [toolbox.feature.brush.type](https://echarts.apache.org/zh/option.html#toolbox.feature.brush.type)），也可以在 `brush` 组件的配置中指定（参见 [brush.toolbox](https://echarts.apache.org/zh/option.html#brush.toolbox)）。\n\n支持这几种选框：`矩形刷子`，`任意形状刷子`，`横向刷子`，`纵向刷子`。参见 [brush.toolbox](https://echarts.apache.org/zh/option.html#brush.toolbox)。\n\n可以使用 `保持选择` 按钮，切换单选和多选模式。\n\n+ 单选即同时只能存在一个选框，可单击空白区域消除选框。\n+ 多选即同时可存在多个选框，单击空白区域不能消除选框，需要点击『清除按钮』消除线框。\n\n<br>\n\n---\n\n**刷选和坐标系的关系**\n\n\n\n可以设置 `brush` 是『全局的』还是『属于坐标系的』。\n\n**全局 brush**\n\n在 echarts 实例中任意地方刷选。这是默认情况。如果没有指定为『坐标系 brush』，就是『全局 brush』。\n\n**坐标系 brush**\n\n在 指定的坐标系中刷选。选框可以跟随坐标系的缩放和平移（roam 和 dataZoom）而移动。\n\n坐标系 brush 实际更为常用，尤其是在 geo 中。\n\n通过指定 [brush.geoIndex](https://echarts.apache.org/zh/option.html#brush.geoIndex) 或 [brush.xAxisIndex](https://echarts.apache.org/zh/option.html#brush.xAxisIndex) 或 [brush.yAxisIndex](https://echarts.apache.org/zh/option.html#brush.yAxisIndex) 来规定可以在哪些坐标系中进行刷选。\n\n这几个配置项的取值可以是：\n\n+ `'all'`，表示所有\n+ `number`，如 `0`，表示这个 index 所对应的坐标系。\n+ `Array`，如 `[0, 4, 2]`，表示指定这些 index 所对应的坐标系。\n+ `'none'` 或 `null` 或 `undefined`，表示不指定。\n\n例如：\n```javascript\noption = {\ngeo: {\n...\n},\nbrush: {\ngeoIndex: 'all', // 只可以在所有 geo 坐标系中刷选，也就是上面定义的 geo 组件中。\n...\n}\n};\n```\n\n例如：\n```javascript\noption = {\ngrid: [\n{...}, // grid 0\n{...}  // grid 1\n],\nxAxis: [\n{gridIndex: 1, ...}, // xAxis 0，属于 grid 1。\n{gridIndex: 0, ...}  // xAxis 1，属于 grid 0。\n],\nyAxis: [\n{gridIndex: 1, ...}, // yAxis 0，属于 grid 1。\n{gridIndex: 0, ...}  // yAxis 1，属于 grid 0。\n],\nbrush: {\nxAxisIndex: [0, 1], // 只可以在 xAxisIndex 为 `0` 和 `1` 的 xAxis 所在的直角坐标系中刷选。\n...\n}\n};\n```\n\n\n\n\n\n<br>\n\n---\n\n** 使用 API 控制选框 **\n\n可以通过调用 `dispatchAction` 来用程序主动渲染选框，例如：\n\n```javascript\nmyChart.dispatchAction({\ntype: 'brush',\nareas: [\n{\ngeoIndex: 0,\n// 指定选框的类型。\nbrushType: 'polygon',\n// 指定选框的形状。\ncoordRange: [[119.72,34.85],[119.68,34.85],[119.5,34.84],[119.19,34.77]]\n}\n]\n});\n```\n详情参见 [action.brush](api.html#action.brush)\n\n<br>\n\n---\n\n** brushLink **\n\n\n\n不同系列间，选中的项可以联动。\n\n参见如下效果（刷选一个 `scatter`，其他 `scatter` 以及 `parallel` 图都会有选中效果）：\n~[800x550](scatter-matrix&edit=1&reset=1)\n\n`brushLink` 配置项是一个数组，内容是 seriesIndex，指定了哪些 series 可以被联动。例如可以是：\n\n+ `[3, 4, 5]` 表示 seriesIndex 为 `3`, `4`, `5` 的 series 可以被联动。\n+ `'all'` 表示所有 series 都进行 brushLink。\n+ `'none'` 或 `null` 或 `undefined` 表示不启用 brushLink 功能。\n\n**注意**\n\nbrushLink 是通过 dataIndex 进行映射，所以需要保证，**联动的每个系列的 `data` 都是 `index` 对应的**。*\n\n例如：\n```javascript\noption = {\nbrush: {\nbrushLink: [0, 1]\n},\nseries: [\n{\ntype: 'bar'\ndata: [232,    4434,    545,      654]     // data 有四个项\n},\n{\ntype: 'parallel',\ndata: [[4, 5], [3, 5], [66, 33], [99, 66]] // data 同样有四个项，两个系列的 data 是对应的。\n}\n]\n};\n```\n\n\n\n\n\n参见 [brush.brushLink](https://echarts.apache.org/zh/option.html#brush.brushLink)。\n\n\n\n<br>\n\n---\n\n** throttle / debounce / 事件延迟 **\n\n\n\n默认情况，刷选或者移动选区的时候，会不断得发 `brushSelected` 事件，从而告诉外界选中的内容。\n\n但是频繁的事件可能导致性能问题，或者动画效果很差。所以 brush 组件提供了 [brush.throttleType](https://echarts.apache.org/zh/option.html#brush.throttleType)，[brush.throttleDelay](https://echarts.apache.org/zh/option.html#brush.throttleDelay) 来解决这个问题。\n\nthrottleType 取值可以是：\n+ `'debounce'`：表示只有停止动作了（即一段时间没有操作了），才会触发事件。时间阈值由 [brush.throttleDelay](https://echarts.apache.org/zh/option.html#brush.throttleDelay) 指定。\n+ `'fixRate'`：表示按照一定的频率触发事件，时间间隔由 [brush.throttleDelay](https://echarts.apache.org/zh/option.html#brush.throttleDelay) 指定。\n\n\n\n\n\n<br>\n\n---\n\n** 被选中项和未被选中项的视觉设置 **\n\n参见 [brush.inBrush](https://echarts.apache.org/zh/option.html#brush.inBrush) 和 [brush.outOfBrush](https://echarts.apache.org/zh/option.html#brush.outOfBrush)。\n\n\n<br>\n\n---\n\n\n下面是详细配置。",
        "detailFileName": "brush"
    },
    {
        "name": "geo",
        "type": "Object",
        "desc": "地理坐标系组件。\n\n地理坐标系组件用于地图的绘制，支持在地理坐标系上绘制[散点图](https://echarts.apache.org/zh/option.html#series-scatter)，[线集](https://echarts.apache.org/zh/option.html#series-lines)。\n\n`3.1.10` 开始 geo 组件也支持鼠标事件。事件参数为\n```ts\n{\ncomponentType: 'geo',\n// Geo 组件在 option 中的 index\ngeoIndex: number,\n// 点击区域的名称，比如\"上海\"\nname: string,\n// 传入的点击区域的 region 对象，见 geo.regions\nregion: Object\n}\n```\n\n**Tip:**\ngeo 区域的颜色也可以被 map series 所控制，参见 [series-map.geoIndex](https://echarts.apache.org/zh/option.html#series-map.geoIndex)。",
        "detailFileName": "geo"
    },
    {
        "name": "parallel",
        "type": "Object",
        "desc": "**平行坐标系介绍**\n\n[平行坐标系（Parallel Coordinates）](https://en.wikipedia.org/wiki/Parallel_coordinates) 是一种常用的可视化高维数据的图表。\n\n\n\n例如 [series-parallel.data](https://echarts.apache.org/zh/option.html#series-parallel.data) 中有如下数据：\n\n```javascript\n[\n[1,  55,  9,   56,  0.46,  18,  6,  '良'],\n[2,  25,  11,  21,  0.65,  34,  9,  '优'],\n[3,  56,  7,   63,  0.3,   14,  5,  '良'],\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n{ // 数据项也可以是 Object，从而里面能含有对线条的特殊设置。\nvalue: [5,  42,  24,  44,  0.76,  40,  16, '优']\nlineStyle: {...},\n}\n...\n]\n```\n数据中，每一行是一个『数据项』，每一列属于一个『维度』。（例如上面数据每一列的含义分别是：『日期』,『AQI指数』, 『PM2.5』, 『PM10』, 『一氧化碳值』, 『二氧化氮值』, 『二氧化硫值』）。\n\n\n\n\n\n平行坐标系适用于对这种多维数据进行可视化分析。每一个维度（每一列）对应一个坐标轴，每一个『数据项』是一条线，贯穿多个坐标轴。在坐标轴上，可以进行数据选取等操作。如下：\n\n~[600x400](doc-example/parallel-all&edit=1&reset=1)\n\n**配置方式概要**\n\n『平行坐标系』的 `option` 基本配置如下例：\n\n```javascript\noption = {\nparallelAxis: [                     // 这是一个个『坐标轴』的定义\n{dim: 0, name: schema[0].text}, // 每个『坐标轴』有个 'dim' 属性，表示坐标轴的维度号。\n{dim: 1, name: schema[1].text},\n{dim: 2, name: schema[2].text},\n{dim: 3, name: schema[3].text},\n{dim: 4, name: schema[4].text},\n{dim: 5, name: schema[5].text},\n{dim: 6, name: schema[6].text},\n{dim: 7, name: schema[7].text,\ntype: 'category',           // 坐标轴也可以支持类别型数据\ndata: ['优', '良', '轻度污染', '中度污染', '重度污染', '严重污染']\n}\n],\nparallel: {                         // 这是『坐标系』的定义\nleft: '5%',                     // 平行坐标系的位置设置\nright: '13%',\nbottom: '10%',\ntop: '20%',\nparallelAxisDefault: {          // 『坐标轴』的公有属性可以配置在这里避免重复书写\ntype: 'value',\nnameLocation: 'end',\nnameGap: 20\n}\n},\nseries: [                           // 这里三个系列共用一个平行坐标系\n{\nname: '北京',\ntype: 'parallel',           // 这个系列类型是 'parallel'\ndata: [\n[1,  55,  9,   56,  0.46,  18,  6,  '良'],\n[2,  25,  11,  21,  0.65,  34,  9,  '优'],\n...\n]\n},\n{\nname: '上海',\ntype: 'parallel',\ndata: [\n[3,  56,  7,   63,  0.3,   14,  5,  '良'],\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n...\n]\n},\n{\nname: '广州',\ntype: 'parallel',\ndata: [\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n[5,  42,  24,  44,  0.76,  40,  16, '优'],\n...\n]\n}\n]\n};\n```\n\n需要涉及到三个组件：[parallel](https://echarts.apache.org/zh/option.html#parallel)、[parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)、[series-parallel](https://echarts.apache.org/zh/option.html#series-parallel)\n\n+ [parallel](https://echarts.apache.org/zh/option.html#parallel)\n\n这个配置项是平行坐标系的『坐标系』本身。一个系列（`series`）或多个系列（如上图中的『北京』、『上海』、『广州』分别各是一个系列）可以共用这个『坐标系』。\n\n和其他坐标系一样，坐标系也可以创建多个。\n\n位置设置，也是放在这里进行。\n\n+ [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)\n\n这个是『坐标系』中的坐标轴的配置。自然，需要有多个坐标轴。\n\n其中有 [parallelAxis.parallelIndex](https://echarts.apache.org/zh/option.html#parallelAxis.parallelIndex) 属性，指定这个『坐标轴』在哪个『坐标系』中。默认使用第一个『坐标系』。\n\n+ [series-parallel](https://echarts.apache.org/zh/option.html#series-parallel)\n\n这个是『系列』的定义。系列被画到『坐标系』上。\n\n其中有 [series-parallel.parallelIndex](https://echarts.apache.org/zh/option.html#series-parallel.parallelIndex) 属性，指定使用哪个『坐标系』。默认使用第一个『坐标系』。\n\n**配置注意和最佳实践**\n\n\n\n配置多个 [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis) 时，有些值一样的属性，如果书写多遍则比较繁琐，那么可以放置在 [parallel.parallelAxisDefault](https://echarts.apache.org/zh/option.html#parallel.parallelAxisDefault) 里。在坐标轴初始化前，[parallel.parallelAxisDefault](https://echarts.apache.org/zh/option.html#parallel.parallelAxisDefault) 里的配置项，会分别融合进 [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)，形成最终的坐标轴的配置。\n\n\n\n\n\n**如果数据量很大并且发生卡顿**\n\n建议把 [series-parallel.lineStyle.width](https://echarts.apache.org/zh/option.html#series-parallel.lineStyle.width) 设为 `0.5`（或更小），\n可能显著改善性能。\n\n**高维数据的显示**\n\n\n\n维度比较多时，比如有 50+ 的维度，那么就会有 50+ 个轴。那么可能会页面显示不下。\n\n可以通过 [parallel.axisExpandable](https://echarts.apache.org/zh/option.html#parallel.axisExpandable) 来改善显示效果。",
        "detailFileName": "parallel"
    },
    {
        "name": "parallelAxis",
        "type": "Object",
        "desc": "这个组件是平行坐标系中的坐标轴。\n\n\n\n**平行坐标系介绍**\n\n[平行坐标系（Parallel Coordinates）](https://en.wikipedia.org/wiki/Parallel_coordinates) 是一种常用的可视化高维数据的图表。\n\n\n\n例如 [series-parallel.data](https://echarts.apache.org/zh/option.html#series-parallel.data) 中有如下数据：\n\n```javascript\n[\n[1,  55,  9,   56,  0.46,  18,  6,  '良'],\n[2,  25,  11,  21,  0.65,  34,  9,  '优'],\n[3,  56,  7,   63,  0.3,   14,  5,  '良'],\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n{ // 数据项也可以是 Object，从而里面能含有对线条的特殊设置。\nvalue: [5,  42,  24,  44,  0.76,  40,  16, '优']\nlineStyle: {...},\n}\n...\n]\n```\n数据中，每一行是一个『数据项』，每一列属于一个『维度』。（例如上面数据每一列的含义分别是：『日期』,『AQI指数』, 『PM2.5』, 『PM10』, 『一氧化碳值』, 『二氧化氮值』, 『二氧化硫值』）。\n\n\n\n\n\n平行坐标系适用于对这种多维数据进行可视化分析。每一个维度（每一列）对应一个坐标轴，每一个『数据项』是一条线，贯穿多个坐标轴。在坐标轴上，可以进行数据选取等操作。如下：\n\n~[600x400](doc-example/parallel-all&edit=1&reset=1)\n\n**配置方式概要**\n\n『平行坐标系』的 `option` 基本配置如下例：\n\n```javascript\noption = {\nparallelAxis: [                     // 这是一个个『坐标轴』的定义\n{dim: 0, name: schema[0].text}, // 每个『坐标轴』有个 'dim' 属性，表示坐标轴的维度号。\n{dim: 1, name: schema[1].text},\n{dim: 2, name: schema[2].text},\n{dim: 3, name: schema[3].text},\n{dim: 4, name: schema[4].text},\n{dim: 5, name: schema[5].text},\n{dim: 6, name: schema[6].text},\n{dim: 7, name: schema[7].text,\ntype: 'category',           // 坐标轴也可以支持类别型数据\ndata: ['优', '良', '轻度污染', '中度污染', '重度污染', '严重污染']\n}\n],\nparallel: {                         // 这是『坐标系』的定义\nleft: '5%',                     // 平行坐标系的位置设置\nright: '13%',\nbottom: '10%',\ntop: '20%',\nparallelAxisDefault: {          // 『坐标轴』的公有属性可以配置在这里避免重复书写\ntype: 'value',\nnameLocation: 'end',\nnameGap: 20\n}\n},\nseries: [                           // 这里三个系列共用一个平行坐标系\n{\nname: '北京',\ntype: 'parallel',           // 这个系列类型是 'parallel'\ndata: [\n[1,  55,  9,   56,  0.46,  18,  6,  '良'],\n[2,  25,  11,  21,  0.65,  34,  9,  '优'],\n...\n]\n},\n{\nname: '上海',\ntype: 'parallel',\ndata: [\n[3,  56,  7,   63,  0.3,   14,  5,  '良'],\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n...\n]\n},\n{\nname: '广州',\ntype: 'parallel',\ndata: [\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n[5,  42,  24,  44,  0.76,  40,  16, '优'],\n...\n]\n}\n]\n};\n```\n\n需要涉及到三个组件：[parallel](https://echarts.apache.org/zh/option.html#parallel)、[parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)、[series-parallel](https://echarts.apache.org/zh/option.html#series-parallel)\n\n+ [parallel](https://echarts.apache.org/zh/option.html#parallel)\n\n这个配置项是平行坐标系的『坐标系』本身。一个系列（`series`）或多个系列（如上图中的『北京』、『上海』、『广州』分别各是一个系列）可以共用这个『坐标系』。\n\n和其他坐标系一样，坐标系也可以创建多个。\n\n位置设置，也是放在这里进行。\n\n+ [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)\n\n这个是『坐标系』中的坐标轴的配置。自然，需要有多个坐标轴。\n\n其中有 [parallelAxis.parallelIndex](https://echarts.apache.org/zh/option.html#parallelAxis.parallelIndex) 属性，指定这个『坐标轴』在哪个『坐标系』中。默认使用第一个『坐标系』。\n\n+ [series-parallel](https://echarts.apache.org/zh/option.html#series-parallel)\n\n这个是『系列』的定义。系列被画到『坐标系』上。\n\n其中有 [series-parallel.parallelIndex](https://echarts.apache.org/zh/option.html#series-parallel.parallelIndex) 属性，指定使用哪个『坐标系』。默认使用第一个『坐标系』。\n\n**配置注意和最佳实践**\n\n\n\n配置多个 [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis) 时，有些值一样的属性，如果书写多遍则比较繁琐，那么可以放置在 [parallel.parallelAxisDefault](https://echarts.apache.org/zh/option.html#parallel.parallelAxisDefault) 里。在坐标轴初始化前，[parallel.parallelAxisDefault](https://echarts.apache.org/zh/option.html#parallel.parallelAxisDefault) 里的配置项，会分别融合进 [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)，形成最终的坐标轴的配置。\n\n\n\n\n\n**如果数据量很大并且发生卡顿**\n\n建议把 [series-parallel.lineStyle.width](https://echarts.apache.org/zh/option.html#series-parallel.lineStyle.width) 设为 `0.5`（或更小），\n可能显著改善性能。\n\n**高维数据的显示**\n\n\n\n维度比较多时，比如有 50+ 的维度，那么就会有 50+ 个轴。那么可能会页面显示不下。\n\n可以通过 [parallel.axisExpandable](https://echarts.apache.org/zh/option.html#parallel.axisExpandable) 来改善显示效果。",
        "detailFileName": "parallelAxis"
    },
    {
        "name": "singleAxis",
        "type": "Object",
        "desc": "单轴。可以被应用到散点图中展现一维数据，如下示例\n\n~[700x500](https://echarts.apache.org/examples/zh/view.html?c=scatter-single-axis&edit=1&reset=1)",
        "detailFileName": "singleAxis"
    },
    {
        "name": "timeline",
        "type": "Object",
        "desc": "`timeline` 组件，提供了在多个 ECharts `option` 间进行切换、播放等操作的功能。\n\n示例效果如下：\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=doc-example/mix-timeline-all&edit=1&reset=1)\n\n`timeline` 和其他场景有些不同，它需要操作『多个option』。我们把传入 `setOption` 第一个参数的东西，称为 `ECOption`，然后称传统的 ECharts 单个 option 为 `ECUnitOption`。\n\n+ 当 `timeline` 和 `media query` 没有被设置时，一个 `ECUnitOption` 就是一个 `ECOption`。\n+ 当 `timeline` 或 `media query` 被使用设置时，一个 `ECOption` 由几个 `ECUnitOption` 组成。\n+ `ECOption` 的各个根属性，形成一个 `ECUnitOption`，叫做 `baseOption`，它代表了各种默认设置。\n+ `options` 数组每项，形成一个 `ECUnitOption`，我们为了方便也叫做 `switchableOption`，它代表了每个时间粒度对应的 option。\n+ `baseOption` 和一个 `switchableOption` 会用来计算最终的 `finalOption`，图表就是根据这个最终结果绘制的。\n\n例如：\n\n```javascript\n// 如下，baseOption 是一个 『原子option』，options 数组\n// 中的每一项也是一个 『原子option』。\n// 每个『原子option』中就是本文档中描述的各种配置项。\nmyChart.setOption({\n// `baseOption` 的属性.\ntimeline: {\n...,\n// `timeline.data` 中的每一项，对应于 `options`\n// 数组中的每个 `option`\ndata: ['2002-01-01', '2003-01-01', '2004-01-01']\n},\ngrid: { ... },\nxAxis: [ ... ],\nyAxis: [ ... ],\nseries: [{\n// 系列一的一些其他配置\ntype: 'bar',\n...\n}, {\n// 系列二的一些其他配置\ntype: 'line',\n...\n}, {\n// 系列三的一些其他配置\ntype: 'pie',\n...\n}],\n// `switchableOption`s:\noptions: [{\n// 这是'2002-01-01' 对应的 option\ntitle: {\ntext: '2002年统计值'\n},\nseries: [\n{ data: [] }, // 系列一的数据\n{ data: [] }, // 系列二的数据\n{ data: [] }  // 系列三的数据\n]\n}, {\n// 这是'2003-01-01' 对应的 option\ntitle: {\ntext: '2003年统计值'\n},\nseries: [\n{ data: [] },\n{ data: [] },\n{ data: [] }\n]\n}, {\n// 这是'2004-01-01' 对应的 option\ntitle: {\ntext: '2004年统计值'\n},\nseries: [\n{ data: [] },\n{ data: [] },\n{ data: [] }\n]\n}]\n});\n```\n\n<br>\n**`finalOption` 是怎么计算出来的?**\n\n\n\n初始化的时候，对应于当前时间的那个 `switchableOption` 会被合并（merge）到 `baseOption`，形成 `finalOption`。而每当时间变化时，对应于新时间的 `switchableOption` 会被合并（merge）到`finalOption`。\n\n有两种合并（merge）策略：\n+ 默认使用 `NORMAL_MERGE`。\n+ 如果 [timeline.replaceMerge](https://echarts.apache.org/zh/option.html#option.html#timeline.replaceMerge) 被指定了，则使用 `REPLACE_MERGE`。如果要知道 `REPLACE_MERGE` 更多信息，可以参见 [setOption](https://echarts.apache.org/zh/option.html#api.html#echartsInstance.setOption) 中 `REPLACE_MERGE` 一节。\n。\n\n\n\n<br>\n**兼容 ECharts4**\n\n如下这种设置方式，也支持：\n```ts\noption = {\nbaseOption: {\ntimeline: {},\nseries: [],\n// ... other properties of baseOption.\n},\noptions: []\n};\n```",
        "detailFileName": "timeline"
    },
    {
        "name": "graphic",
        "type": "*",
        "desc": "`graphic` 是原生图形元素组件。可以支持的图形元素包括：\n\n\n\n[image](https://echarts.apache.org/zh/option.html#graphic.elements-image),\n[text](https://echarts.apache.org/zh/option.html#graphic.elements-text),\n[circle](https://echarts.apache.org/zh/option.html#graphic.elements-circle),\n[sector](https://echarts.apache.org/zh/option.html#graphic.elements-sector),\n[ring](https://echarts.apache.org/zh/option.html#graphic.elements-ring),\n[polygon](https://echarts.apache.org/zh/option.html#graphic.elements-polygon),\n[polyline](https://echarts.apache.org/zh/option.html#graphic.elements-polyline),\n[rect](https://echarts.apache.org/zh/option.html#graphic.elements-rect),\n[line](https://echarts.apache.org/zh/option.html#graphic.elements-line),\n[bezierCurve](https://echarts.apache.org/zh/option.html#graphic.elements-bezierCurve),\n[arc](https://echarts.apache.org/zh/option.html#graphic.elements-arc),\n[group](https://echarts.apache.org/zh/option.html#graphic.elements-group),\n\n\n\n\n\n下面示例中，使用图形元素做了水印，和文本块：\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=line-graphic&edit=1&reset=1)\n\n下面示例中，使用隐藏的图形元素实现了拖拽：\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=line-draggable&edit=1&reset=1)\n\n\n**graphic 设置介绍**\n\n只配一个图形元素时的简写方法：\n```javascript\nmyChart.setOption({\n...,\ngraphic: {\ntype: 'image',\n...\n}\n});\n```\n\n配多个图形元素：\n```javascript\nmyChart.setOption({\n...,\ngraphic: [\n{ // 一个图形元素，类型是 image。\ntype: 'image',\n...\n},\n{ // 一个图形元素，类型是 text，指定了 id。\ntype: 'text',\nid: 'text1',\n...\n},\n{ // 一个图形元素，类型是 group，可以嵌套子节点。\ntype: 'group',\nchildren: [\n{\ntype: 'rect',\nid: 'rect1',\n...\n},\n{\ntype: 'image',\n...\n},\n...\n]\n}\n...\n]\n});\n\n```\n\n使用 setOption 来删除或更换（替代）已有的图形元素：\n```javascript\nmyChart.setOption({\n...,\ngraphic: [\n{ // 删除上例中定义的 'text1' 元素。\nid: 'text1',\n$action: 'remove',\n...\n},\n{ // 将上例中定义的 'rect1' 元素换成 circle。\n// 注意尽管 'rect1' 在一个 group 中，但这里并不需要顾忌层级，用id指定就可以了。\nid: 'rect1',\n$action: 'replace',\ntype: 'circle',\n...\n}\n]\n});\n```\n注意，如果没有指定 id，第二次 setOption 时会按照元素在 option 中出现的顺序和已有的图形元素进行匹配。这有时会产生不易理解的效果。\n所以，一般来说，更新 elements 时推荐使用 id 进行准确的指定，而非省略 id。\n\n\n\n**图形元素设置介绍**\n\n介绍每个图形元素的配置。不同类型的图形元素的设置有这些共性：\n\n```javascript\n{\n// id 用于在更新图形元素时指定更新哪个图形元素，如果不需要用可以忽略。\nid: 'xxx',\n\n// 这个字段在第一次设置时不能忽略，取值见上方『支持的图形元素』。\ntype: 'image',\n\n// 下面的各个属性如果不需要设置都可以忽略，忽略则取默认值。\n\n// 指定本次 setOption 对此图形元素进行的操作。默认是 'merge'，还可以 'replace' 或 'remove'。\n$action: 'replace',\n\n// 这是四个相对于父元素的定位属性，每个属性可取『像素值』或者『百分比』或者 'center'/'middle'。\nleft: 10,\n// right: 10,\ntop: 'center',\n// bottom: '10%',\n\nshape: {\n// 定位、形状相关的设置，如 x, y, cx, cy, width, height, r, points 等。\n// 注意，如果设置了 left/right/top/bottom，这里的定位用的 x/y/cx/cy 会失效。\n},\n\nstyle: {\n// 样式相关的设置，如 fill, stroke, lineWidth, shadowBlur 等。\n},\n\n// 表示 z 高度，从而指定了图形元素的覆盖关系。\nz: 10,\n// 表示不响应事件。\nsilent: true,\n// 表示节点不显示\ninvisible: false,\n// 设置是否整体限制在父节点范围内。可选值：'raw', 'all'。\nbouding: 'raw',\n// 是否可以被拖拽。\ndraggable: false,\n// 事件的监听器，还可以是 onmousemove, ondrag 等。支持的事件参见下。\nonclick: function () {...}\n}\n```\n\n\n**图形元素的事件**\n\n支持这些事件配置：\n`onclick`, `onmouseover`, `onmouseout`, `onmousemove`, `onmousewheel`, `onmousedown`, `onmouseup`, `ondrag`, `ondragstart`, `ondragend`, `ondragenter`, `ondragleave`, `ondragover`, `ondrop`。\n\n\n\n**图形元素的层级关系**\n\n只有 `group` 元素可以有子节点，从而以该 `group` 元素为根的元素树可以共同定位（共同移动）。\n\n\n\n\n\n**图形元素的基本形状设置**\n\n每个图形元素本身有自己的图形基本的位置和尺寸设置，例如：\n\n```javascript\n{\ntype: 'rect',\nshape: {\nx: 10,\ny: 10,\nwidth: 100,\nheight: 200\n}\n},\n{\ntype: 'circle',\nshape: {\ncx: 20,\ncy: 30,\nr: 100\n}\n},\n{\ntype: 'image',\nstyle: {\nimage: 'http://example.website/a.png',\nx: 100,\ny: 200,\nwidth: 230,\nheight: 400\n}\n},\n{\ntype: 'text',\nstyle: {\ntext: 'This text',\nx: 100,\ny: 200\n}\n\n}\n```\n\n\n\n\n**图形元素的定位和 transfrom**\n\n\n除此以外，可以以 transform 的方式对图形进行平移、旋转、缩放，\n参见：[position](https://echarts.apache.org/zh/option.html#graphic.elements.position)、[rotation](https://echarts.apache.org/zh/option.html#graphic.elements.rotation)、[scale](https://echarts.apache.org/zh/option.html#graphic.elements.scale)、[origin](https://echarts.apache.org/zh/option.html#graphic.elements.origin)。\n\n```javascript\n{\ntype: 'rect',\nposition: [100, 200], // 平移，默认值为 [0, 0]。\nscale: [2, 4], // 缩放，默认值为 [1, 1]。表示缩放的倍数。\nrotation: Math.PI / 4, // 旋转，默认值为 0。表示旋转的弧度值。正值表示逆时针旋转。\norigin: [10, 20], // 旋转和缩放的中心点，默认值为 [0, 0]。\nshape: {\n// ...\n}\n}\n```\n\n每个图形元素在父节点的坐标系中进行 transform，也就是说父子节点的 transform 能『叠加』。\n\n每个图形元素进行 transform 顺序是：\n1. 平移 [-el.origin[0], -el.origin[1]]。\n2. 根据 el.scale 缩放。\n3. 根据 el.rotation 旋转。\n4. 根据 el.origin 平移。\n5. 根据 el.position 平移。\n\n也就是说先缩放旋转后平移，这样平移不会影响缩放旋转的 origin。\n\n\n\n\n\n**图形元素相对定位**\n\n\n\n以上两者是基本的绝对定位，除此之外，在实际应用中，容器尺寸常常是不确定甚至动态变化的，所以需要提供相对定位的机制。graphic 组件使用 [left](https://echarts.apache.org/zh/option.html#graphic.elements.left) / [right](https://echarts.apache.org/zh/option.html#graphic.elements.right) / [top](https://echarts.apache.org/zh/option.html#graphic.elements.top) / [bottom](https://echarts.apache.org/zh/option.html#graphic.elements.bottom) / [width](https://echarts.apache.org/zh/option.html#graphic.elements.width) / [height](https://echarts.apache.org/zh/option.html#graphic.elements.height) 提供了相对定位的机制。\n\n例如：\n```javascript\n{ // 将图片定位到最下方的中间：\ntype: 'image',\nleft: 'center', // 水平定位到中间\nbottom: '10%',  // 定位到距离下边界 10% 处\nstyle: {\nimage: 'http://example.website/a.png',\nwidth: 45,\nheight: 45\n}\n},\n{ // 将旋转过的 group 整体定位右下角：\ntype: 'group',\nright: 0,  // 定位到右下角\nbottom: 0, // 定位到右下角\nrotation: Math.PI / 4,\nchildren: [\n{\ntype: 'rect',\nleft: 'center', // 相对父元素居中\ntop: 'middle',  // 相对父元素居中\nshape: {\nwidth: 190,\nheight: 90\n},\nstyle: {\nfill: '#fff',\nstroke: '#999',\nlineWidth: 2,\nshadowBlur: 8,\nshadowOffsetX: 3,\nshadowOffsetY: 3,\nshadowColor: 'rgba(0,0,0,0.3)'\n}\n},\n{\ntype: 'text',\nleft: 'center', // 相对父元素居中\ntop: 'middle',  // 相对父元素居中\nstyle: {\nfill: '#777',\ntext: [\n'This is text',\n'这是一段文字',\n'Print some text'\n].join('\\n'),\nfont: '14px Microsoft YaHei'\n}\n}\n]\n}\n```\n\n注意，可以用 [bounding](graphic.elements.bounding) 来设置是否整体限制在父节点范围内。",
        "detailFileName": "graphic"
    },
    {
        "name": "calendar",
        "type": "Object",
        "desc": "日历坐标系组件。\n\n在ECharts中，我们非常有创意地实现了日历图，是通过使用日历坐标系组件来达到日历图效果的，如下方的几个示例图所示，我们可以在热力图、散点图、关系图中使用日历坐标系。\n\n在日历坐标系中使用热力图的示例:\n~[800x400](https://echarts.apache.org/examples/zh/view.html?c=calendar-heatmap&edit=1&reset=1)\n\n在日历坐标系中使用散点图的示例:\n~[800x600](https://echarts.apache.org/examples/zh/view.html?c=calendar-effectscatter&edit=1&reset=1)\n\n在日历坐标系中使用关系图（以及混合图表）的示例:\n~[600x600](https://echarts.apache.org/examples/zh/view.html?c=calendar-graph&edit=1&reset=1)\n\n灵活利用 echarts 图表和坐标系的组合，以及 API，可以实现更丰富的效果。\n[在日历中使用文字](calendar-lunar&edit=1&reset=1)、\n[在日历中放置饼图](calendar-pie&edit=1&reset=1)\n\n---\n\n**水平和垂直放置日历**\n\n在日历坐标系可以水平放置，也可以垂直放置。如上面的例子，使用热力图时，经常是水平放置的。但是如果需要格子的尺寸大些，水平放置就过于宽了，于是也可以选择垂直放置。参见 [calendar.orient](https://echarts.apache.org/zh/option.html#calendar.orient)。\n\n\n---\n\n**尺寸的自适应**\n\n可以设置日历坐标系使他支持不同尺寸的容器（页面）大小变化的自适应。首先，和 echarts 其他组件一样，日历坐标系可以选择使用 [left](https://echarts.apache.org/zh/option.html#calendar.left) [right](https://echarts.apache.org/zh/option.html#calendar.right) [top](https://echarts.apache.org/zh/option.html#calendar.top) [bottom](bottom) [width](https://echarts.apache.org/zh/option.html#calendar.width) [height](https://echarts.apache.org/zh/option.html#calendar.height) 来描述尺寸和位置，从而将日历摆放在上下左右各种位置，并随着页面尺寸变动而改变自身尺寸。另外，也可以使用 [cellSize](https://echarts.apache.org/zh/option.html#calendar.cellSize) 来固定日历格子的长宽。\n\n---\n\n**中西方日历习惯的支持**\n\n中西方日历有所差别，西方常使用星期日作为一周的第一天，中国使用星期一为一周的第一天。日历坐标系做了这种切换的支持。参见 [calendar.dayLabel.firstDay](https://echarts.apache.org/zh/option.html#calendar.dayLabel.firstDay)。\n\n另外，日历上的『月份』和『星期几』的文字，也可以较方便的切换中英文，甚至自定义。参见 [calendar.dayLabel.nameMap](https://echarts.apache.org/zh/option.html#calendar.dayLabel.nameMap) [calendar.monthLabel.nameMap](https://echarts.apache.org/zh/option.html#calendar.monthLabel.nameMap)。\n\n\n\n---",
        "detailFileName": "calendar"
    },
    {
        "name": "dataset",
        "type": "Object",
        "desc": "ECharts 4 开始支持了 `数据集`（`dataset`）组件用于单独的数据集声明，从而数据可以单独管理，被多个组件复用，并且可以自由指定数据到视觉的映射。这在不少场景下能带来使用上的方便。\n\n关于 `dataset` 的详情，请参见[教程](concepts/dataset)。",
        "detailFileName": "dataset"
    },
    {
        "name": "aria",
        "type": "*",
        "desc": "W3C 制定了无障碍富互联网应用规范集（[WAI-ARIA](https://www.w3.org/WAI/intro/aria)，the Accessible Rich Internet Applications Suite），致力于使得网页内容和网页应用能够被更多残障人士访问。Apache ECharts 4 遵从这一规范，支持自动根据图表配置项智能生成描述，使得盲人可以在朗读设备的帮助下了解图表内容，让图表可以被更多人群访问。除此之外，Apache ECharts 5 新增支持贴花纹理，作为颜色的辅助表达，进一步用以区分数据。\n\n默认关闭，需要通过将 [aria.enabled](https://echarts.apache.org/zh/option.html#aria.enabled) 设置为 `true` 开启。",
        "detailFileName": "aria"
    },
    {
        "name": "series",
        "type": [
            "Array",
            "Object"
        ],
        "desc": "图形系列",
        "detailFileName": "series"
    },
    {
        "name": "darkMode",
        "type": "boolean",
        "desc": "是否是暗黑模式，默认会根据背景色 [backgroundColor](https://echarts.apache.org/zh/option.html#backgroundColor) 的亮度自动设置。\n如果是设置了容器的背景色而无法判断到，就可以使用该配置手动指定，echarts 会根据是否是暗黑模式调整文本等的颜色。\n\n该配置通常会被用于主题中。",
        "children": []
    },
    {
        "name": "color",
        "type": "Array",
        "desc": "调色盘颜色列表。如果系列没有设置颜色，则会依次循环从该列表中取颜色作为系列颜色。 默认为：\n```ts\n['#5470c6', '#91cc75', '#fac858', '#ee6666', '#73c0de', '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc']\n```\n\n支持的颜色格式：\n\n+ 使用 RGB 表示颜色，比如 `'rgb(128, 128, 128)'`，如果想要加上 alpha 通道表示不透明度，可以使用 RGBA，比如 `'rgba(128, 128, 128, 0.5)'`，也可以使用十六进制格式，比如 `'#ccc'`。\n\n+ 渐变色或者纹理填充\n```ts\n// 线性渐变，前四个参数分别是 x0, y0, x2, y2, 范围从 0 - 1，相当于在图形包围盒中的百分比，如果 globalCoord 为 `true`，则该四个值是绝对的像素位置\n{\ntype: 'linear',\nx: 0,\ny: 0,\nx2: 0,\ny2: 1,\ncolorStops: [{\noffset: 0, color: 'red' // 0% 处的颜色\n}, {\noffset: 1, color: 'blue' // 100% 处的颜色\n}],\nglobal: false // 缺省为 false\n}\n// 径向渐变，前三个参数分别是圆心 x, y 和半径，取值同线性渐变\n{\ntype: 'radial',\nx: 0.5,\ny: 0.5,\nr: 0.5,\ncolorStops: [{\noffset: 0, color: 'red' // 0% 处的颜色\n}, {\noffset: 1, color: 'blue' // 100% 处的颜色\n}],\nglobal: false // 缺省为 false\n}\n// 纹理填充\n{\nimage: imageDom, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\nrepeat: 'repeat' // 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'\n}\n```",
        "children": []
    },
    {
        "name": "backgroundColor",
        "type": "Color",
        "default": "'transparent'",
        "desc": "背景色，默认无背景。\n\n\n\n> 支持使用`rgb(255,255,255)`，`rgba(255,255,255,1)`，`#fff`等方式设置为纯色，也支持设置为渐变色和纹理填充，具体见[option.color](https://echarts.apache.org/zh/option.html#color)",
        "children": []
    },
    {
        "name": "textStyle",
        "type": "Object",
        "desc": "全局的字体样式。",
        "detailFileName": "textStyle"
    },
    {
        "name": "animation",
        "type": "boolean",
        "default": "true",
        "desc": "是否开启动画。",
        "children": []
    },
    {
        "name": "animationThreshold",
        "type": "number",
        "default": "2000",
        "desc": "是否开启动画的阈值，当单个系列显示的图形数量大于这个阈值时会关闭动画。",
        "children": []
    },
    {
        "name": "animationDuration",
        "type": "number",
        "default": "1000",
        "desc": "初始动画的时长，支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的初始动画效果：\n\n```ts\nanimationDuration: function (idx) {\n// 越往后的数据时长越大\nreturn idx * 100;\n}\n```",
        "children": [],
        "min": "0",
        "step": "20"
    },
    {
        "name": "animationEasing",
        "type": "enum",
        "desc": "初始动画的缓动效果。不同的缓动效果可以参考 [缓动示例](line-easing)。",
        "children": [],
        "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
    },
    {
        "name": "animationDelay",
        "type": [
            "number",
            "Function"
        ],
        "default": "0",
        "desc": "初始动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的初始动画效果。\n\n如下示例：\n```ts\nanimationDelay: function (idx) {\n// 越往后的数据延迟越大\nreturn idx * 100;\n}\n```\n\n也可以看[该示例](bar-animation-delay)",
        "children": []
    },
    {
        "name": "animationDurationUpdate",
        "type": "number",
        "default": "300",
        "desc": "数据更新动画的时长。\n\n支持回调函数，可以通过每个数据返回不同的时长实现更戏剧的更新动画效果：\n\n```ts\nanimationDurationUpdate: function (idx) {\n// 越往后的数据时长越大\nreturn idx * 100;\n}\n```",
        "children": [],
        "min": "0",
        "step": "20"
    },
    {
        "name": "animationEasingUpdate",
        "type": "enum",
        "desc": "数据更新动画的缓动效果。",
        "children": [],
        "options": "'linear','quadraticIn','quadraticOut','quadraticInOut','cubicIn','cubicOut','cubicInOut','quarticIn','quarticOut','quarticInOut','quinticIn','quinticOut','quinticInOut','sinusoidalIn','sinusoidalOut','sinusoidalInOut','exponentialIn','exponentialOut','exponentialInOut','circularIn','circularOut','circularInOut','elasticIn','elasticOut','elasticInOut','backIn','backOut','backInOut','bounceIn','bounceOut','bounceInOut'"
    },
    {
        "name": "animationDelayUpdate",
        "type": [
            "number",
            "Function"
        ],
        "default": "0",
        "desc": "数据更新动画的延迟，支持回调函数，可以通过每个数据返回不同的 delay 时间实现更戏剧的更新动画效果。\n\n如下示例：\n```ts\nanimationDelayUpdate: function (idx) {\n// 越往后的数据延迟越大\nreturn idx * 100;\n}\n```\n\n也可以看[该示例](bar-animation-delay)",
        "children": []
    },
    {
        "name": "stateAnimation",
        "type": "Object",
        "desc": "状态切换的动画配置，支持在每个系列里设置单独针对该系列的配置。",
        "detailFileName": "stateAnimation"
    },
    {
        "name": "blendMode",
        "type": "string",
        "default": "'source-over'",
        "desc": "图形的混合模式，不同的混合模式见 https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation 。\n\n默认为 `'source-over'`。 支持每个系列单独设置。\n\n`'lighter'` 也是比较常见的一种混合模式，该模式下图形数量集中的区域会颜色叠加成高亮度的颜色（白色）。常常能起到突出该区域的效果。见示例 [全球飞行航线](lines-airline)",
        "children": []
    },
    {
        "name": "hoverLayerThreshold",
        "type": "number",
        "default": "3000",
        "desc": "图形数量阈值，决定是否开启单独的 hover 层，在整个图表的图形数量大于该阈值时开启单独的 hover 层。\n\n单独的 hover 层主要是为了在高亮图形的时候不需要重绘整个图表，只需要把高亮的图形放入单独的一个 canvas 层进行绘制，防止在图形数量很多的时候因为高亮重绘所有图形导致卡顿。\n\nECharts 2 里是底层强制使用单独的层绘制高亮图形，但是会带来很多问题，比如高亮的图形可能会不正确的遮挡所有其它图形，还有图形有透明度因为高亮和正常图形叠加导致不正确的透明度显示，还有移动端上因为每个图表都要多一个 canvas 带来的额外内存开销。因此 3 里默认不会开启该优化，只有在图形数量特别多，有必要做该优化时才会自动开启。",
        "children": []
    },
    {
        "name": "useUTC",
        "type": "boolean",
        "default": "false",
        "desc": "是否使用 UTC 时间。\n\n+ `true`: 表示 `axis.type` 为 `'time'` 时，依据 UTC 时间确定 tick 位置，并且 `axisLabel` 和 `tooltip` 默认展示的是 UTC 时间。\n+ `false`: 表示 `axis.type` 为 `'time'` 时，依据本地时间确定 tick 位置，并且 `axisLabel` 和 `tooltip` 默认展示的是本地时间。\n\n默认取值为false，即使用本地时间。因为考虑到：\n\n+ 很多情况下，需要展示为本地时间（无论服务器存储的是否为 `UTC` 时间）。\n+ 如果 data 中的时间为 '2012-01-02' 这样的没有指定时区的时间表达式，往往意为本地时间。默认情况下，时间被展示时需要和输入一致而非有时差。\n\n注意，这个参数实际影响的是『展示』，而非用户输入的时间值的解析。\n关于用户输入的时间值（例如 `1491339540396`, `'2013-01-04'` 等）的解析，参见 [date 中时间相关部分](https://echarts.apache.org/zh/option.html#series-line.data)。",
        "children": []
    },
    {
        "name": "options",
        "type": "Array",
        "desc": "用于 [timeline](option.html#timeline) 的 option 数组。数组的每一项是一个 echarts option (`ECUnitOption`)。",
        "children": []
    },
    {
        "name": "media",
        "type": "Array",
        "desc": "请参见 [移动端自适应](tutorial.html#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94)。",
        "detailFileName": "media"
    }
]