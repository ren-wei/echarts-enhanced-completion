[
    {
        "name": "series.line",
        "type": "Object",
        "desc": "**折线/面积图**\n\n折线图是用折线将各个数据点[标志](https://echarts.apache.org/zh/option.html#series-line.symbol)连接起来的图表，用于展现数据的变化趋势。可用于[直角坐标系](https://echarts.apache.org/zh/option.html#grid)和[极坐标系](https://echarts.apache.org/zh/option.html#polar)上。\n\n**Tip:** 设置 [areaStyle](https://echarts.apache.org/zh/option.html#series-line.areaStyle) 后可以绘制面积图。\n\n**Tip:** 配合分段型 [visualMap](https://echarts.apache.org/zh/option.html#visualMap-piecewise) 组件可以将折线/面积图通过不同颜色分区间。如下示例\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=line-aqi&edit=1&reset=1)",
        "detailFileName": "series.line",
        "required": [
            {
                "key": "type",
                "value": "'line'",
                "valueRegExp": "^['\"]line['\"]$"
            }
        ]
    },
    {
        "name": "series.bar",
        "type": "Object",
        "desc": "**柱状图**\n\n柱状图（或称条形图）是一种通过柱形的高度（横向的情况下则是宽度）来表现数据大小的一种常用图表类型。",
        "detailFileName": "series.bar",
        "required": [
            {
                "key": "type",
                "value": "'bar'",
                "valueRegExp": "^['\"]bar['\"]$"
            }
        ]
    },
    {
        "name": "series.pie",
        "type": "Object",
        "desc": "**饼图**\n\n饼图主要用于表现不同类目的数据在总和中的占比。每个的弧度表示数据数量的比例。\n\n对于一个图表中有多个饼图的场景，可以使用 [left](https://echarts.apache.org/zh/option.html#series-pie.left)、[right](https://echarts.apache.org/zh/option.html#series-pie.right)、[top](https://echarts.apache.org/zh/option.html#series-pie.top)、[bottom](https://echarts.apache.org/zh/option.html#series-pie.bottom)、[width](https://echarts.apache.org/zh/option.html#series-pie.width)、[height](https://echarts.apache.org/zh/option.html#series-pie.height) 配置每个饼图系列的位置和视口大小。[radius](https://echarts.apache.org/zh/option.html#series-pie.radius)、[label.edgeDistance](https://echarts.apache.org/zh/option.html#series-pie.label.edgeDistance) 等支持百分比的配置项，是相对于该配置项决定的矩形的大小而言的。\n\n**Tip:** 饼图更适合表现数据相对于总数的百分比等关系。如果只是表示不同类目数据间的大小，建议使用 [柱状图](bar)，人们对于微小的弧度差别相比于微小的长度差别更不敏感，或者也可以通过配置 [roseType](https://echarts.apache.org/zh/option.html#series-pie.roseType) 显示成南丁格尔图，通过半径大小区分数据的大小。\n\n**下面是自定义南丁格尔图的示例：**\n~[500x400](https://echarts.apache.org/examples/zh/view.html?c=pie-custom&edit=1&reset=1)\n\n\n\n从 ECharts v4.6.0 版本起，我们提供了 `'labelLine'` 与 `'edge'` 两种新的布局方式。详情参见 [label.alignTo](https://echarts.apache.org/zh/option.html#series-pie.label.alignTo)。",
        "detailFileName": "series.pie",
        "required": [
            {
                "key": "type",
                "value": "'pie'",
                "valueRegExp": "^['\"]pie['\"]$"
            }
        ]
    },
    {
        "name": "series.scatter",
        "type": "Object",
        "desc": "散点（气泡）图。[直角坐标系](https://echarts.apache.org/zh/option.html#grid)上的散点图可以用来展现数据的 `x`，`y` 之间的关系，如果数据项有多个维度，其它维度的值可以通过不同大小的 [symbol](https://echarts.apache.org/zh/option.html#series-scatter.symbol) 展现成气泡图，也可以用颜色来表现。这些可以配合 [visualMap](https://echarts.apache.org/zh/option.html#visualMap) 组件完成。\n\n可以应用在[直角坐标系](https://echarts.apache.org/zh/option.html#grid)，[极坐标系](https://echarts.apache.org/zh/option.html#polar)，[地理坐标系](https://echarts.apache.org/zh/option.html#geo)上。",
        "detailFileName": "series.scatter",
        "required": [
            {
                "key": "type",
                "value": "'scatter'",
                "valueRegExp": "^['\"]scatter['\"]$"
            }
        ]
    },
    {
        "name": "series.effectScatter",
        "type": "Object",
        "desc": "带有涟漪特效动画的散点（气泡）图。利用动画特效可以将某些想要突出的数据进行视觉突出。\n\n**Tip:** ECharts 2.x 中在地图上通过 markPoint 实现地图特效在 ECharts 3 中建议通过地理坐标系上的 effectScatter 实现。",
        "detailFileName": "series.effectScatter",
        "required": [
            {
                "key": "type",
                "value": "'effectScatter'",
                "valueRegExp": "^['\"]effectScatter['\"]$"
            }
        ]
    },
    {
        "name": "series.radar",
        "type": "Object",
        "desc": "**雷达图**\n\n雷达图主要用于表现多变量的数据，例如球员的各个属性分析。依赖 [radar](https://echarts.apache.org/zh/option.html#radar) 组件。\n\n下面是 AQI 数据用雷达图表现的示例。\n\n~[600x500](https://echarts.apache.org/examples/zh/view.html?c=radar-aqi&edit=1&reset=1)",
        "detailFileName": "series.radar",
        "required": [
            {
                "key": "type",
                "value": "'radar'",
                "valueRegExp": "^['\"]radar['\"]$"
            }
        ]
    },
    {
        "name": "series.tree",
        "type": "Object",
        "desc": "**树图**\n\n树图主要用来可视化树形数据结构，是一种特殊的层次类型，具有唯一的根节点，左子树，和右子树。\n\n**注意：目前不支持在单个 series 中直接绘制森林，可以通过在一个 option 中配置多个 series 实现森林**\n\n**树图示例：**\n\n~[900x780](https://echarts.apache.org/examples/zh/view.html?c=tree-vertical&edit=1&reset=1)\n\n**多个 series 组合成森林示例：**\n\n~[800x680](https://echarts.apache.org/examples/zh/view.html?c=tree-legend&edit=1&reset=1)",
        "detailFileName": "series.tree",
        "required": [
            {
                "key": "type",
                "value": "'tree'",
                "valueRegExp": "^['\"]tree['\"]$"
            }
        ]
    },
    {
        "name": "series.treemap",
        "type": "Object",
        "desc": "[Treemap](https://en.wikipedia.org/wiki/Treemapping) 是一种常见的表达『层级数据』『树状数据』的可视化形式。它主要用面积的方式，便于突出展现出『树』的各层级中重要的节点。\n\n**示例：**\n\n~[700x580](https://echarts.apache.org/examples/zh/view.html?c=treemap-obama&edit=1&reset=1)\n\n\n**视觉映射：**\n\ntreemap 首先是把数值映射到『面积』这种视觉元素上。\n\n此外，也支持对数据的其他维度进行视觉映射，例如映射到颜色、颜色明暗度上。\n\n\n\n关于视觉设置，详见 [series-treemap.levels](https://echarts.apache.org/zh/option.html#series-treemap.levels)。\n\n\n\n\n\n**下钻（drill down）：**\n\n`drill down` 功能即点击后才展示子层级。\n设置了 [leafDepth](https://echarts.apache.org/zh/option.html#series-treemap.leafDepth) 后，下钻（`drill down`）功能开启。\n\n**如下是 drill down 的例子：**\n~[800x500](https://echarts.apache.org/examples/zh/view.html?c=treemap-drill-down&edit=1&reset=1)\n\n\n注：treemap 的配置项 和 ECharts2 相比有一些变化，一些不太成熟的配置方式不再支持或不再兼容：\n\n+ `center/size` 方式的定位不再支持，而是统一使用 `left/top/bottom/right/width/height` 方式定位。\n\n+ `breadcrumb` 的配置被移动到了 `itemStyle/itemStyle.emphasis` 外部，和 `itemStyle` 平级。\n\n+ `root` 的设置暂时不支持。目前可以使用 `zoom` 的方式来查看树更下层次的细节，或者使用 [leafDepth](https://echarts.apache.org/zh/option.html#series-treemap.leafDepth) 开启 \"drill down\" 功能。\n\n+ `label` 的配置被移动到了 `itemStyle/itemStyle.emphasis` 外部，和 `itemStyle` 平级。\n\n+ `itemStyle.childBorderWidth`、`itemStyle.childBorderColor`不再支持（因为这个配置方式只能定义两层的treemap）。统一使用 [series-treemap.levels](https://echarts.apache.org/zh/option.html#series-treemap.levels) 来进行各层级的定义。",
        "detailFileName": "series.treemap",
        "required": [
            {
                "key": "type",
                "value": "'treemap'",
                "valueRegExp": "^['\"]treemap['\"]$"
            }
        ]
    },
    {
        "name": "series.sunburst",
        "type": "Object",
        "desc": "[旭日图（Sunburst）](https://en.wikipedia.org/wiki/Pie_chart#Ring_chart,_sunburst_chart,_and_multilevel_pie_chart)由多层的环形图组成，在数据结构上，内圈是外圈的父节点。因此，它既能像[饼图](https://echarts.apache.org/zh/option.html#series-pie)一样表现局部和整体的占比，又能像[矩形树图](https://echarts.apache.org/zh/option.html#series-treemap)一样表现层级关系。\n\n**示例：**\n\n~[700x500](https://echarts.apache.org/examples/zh/view.html?c=sunburst-monochrome&edit=1&reset=1)\n\n~[700x700](https://echarts.apache.org/examples/zh/view.html?c=sunburst-drink&edit=1&reset=1)\n\n**数据下钻**\n\n旭日图默认支持数据下钻，也就是说，当用户点击了某个扇形块之后，将会以该节点作为根结点显示，并且在中间出现一个返回上层节点的圆。如果不希望有数据下钻功能，可以通过将 [series-sunburst.nodeClick](https://echarts.apache.org/zh/option.html#series-sunburst.nodeClick) 设置为 `false` 实现。",
        "detailFileName": "series.sunburst",
        "required": [
            {
                "key": "type",
                "value": "'sunburst'",
                "valueRegExp": "^['\"]sunburst['\"]$"
            }
        ]
    },
    {
        "name": "series.boxplot",
        "type": "Object",
        "desc": "[Boxplot](https://en.wikipedia.org/wiki/Box_plot) 中文可以称为『箱形图』、『盒须图』、『盒式图』、『盒状图』、『箱线图』，是一种用作显示一组数据分散情况资料的统计图。它能显示出一组数据的最大值、最小值、中位数、下四分位数及上四分位数。\n\n**示例如下：**\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=boxplot-light-velocity&edit=1&reset=1)\n\n也支持多个 `series` 在同一个坐标系中，参见 [例子](boxplot-multi&edit=1&reset=1)。",
        "detailFileName": "series.boxplot",
        "required": [
            {
                "key": "type",
                "value": "'boxplot'",
                "valueRegExp": "^['\"]boxplot['\"]$"
            }
        ]
    },
    {
        "name": "series.candlestick",
        "type": "Object",
        "desc": "[Candlestick](https://en.wikipedia.org/wiki/Candlestick_chart) 即我们常说的 `K线图`。\n\n在 ECharts3 中，同时支持 `'candlestick'` 和 `'k'`这两种 `'series.type'`（`'k'` 会被自动转为 `'candlestick'`）。\n\n**示例如下：**\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=candlestick-sh&edit=1&reset=1)\n\n\n<br>\n**关于『涨』『跌』的颜色：**\n\n不同国家或地区对于 K线图 的颜色定义不一样，可能是『红涨绿跌』或『红涨蓝跌』（如大陆、台湾、日本、韩国等），可能是『绿涨红跌』（如西方国家、香港、新加坡等）。K线图也不一定要用红蓝、红绿来表示涨跌，也可以是『有色/无色』等表示方法。\n\n默认配置项，采用的是『红涨蓝跌』。如果想更改这个颜色配置，在这些配置项中更改即可：\n\n+ [series-candlestick.itemStyle.color](https://echarts.apache.org/zh/option.html#series-candlestick.itemStyle.color)：阳线填充色（即『涨』）\n+ [series-candlestick.itemStyle.color0](https://echarts.apache.org/zh/option.html#series-candlestick.itemStyle.color0)：阴线填充色（即『跌』）\n+ [series-candlestick.itemStyle.borderColor](https://echarts.apache.org/zh/option.html#series-candlestick.itemStyle.borderColor)：阳线边框色（即『涨』）\n+ [series-candlestick.itemStyle.borderColor0](https://echarts.apache.org/zh/option.html#series-candlestick.itemStyle.borderColor0)：阴线边框色（即『跌』）\n+ [series-candlestick.itemStyle.borderColorDoji](https://echarts.apache.org/zh/option.html#series-candlestick.itemStyle.borderColorDoji)：十字星边框色（即开盘价等于收盘价时候的边框色）\n\n\n<br>\n<br>",
        "detailFileName": "series.candlestick",
        "required": [
            {
                "key": "type",
                "value": "'candlestick'",
                "valueRegExp": "^['\"]candlestick['\"]$"
            }
        ]
    },
    {
        "name": "series.heatmap",
        "type": "Object",
        "desc": "**热力图**\n\n热力图主要通过颜色去表现数值的大小，必须要配合 [visualMap](https://echarts.apache.org/zh/option.html#visualMap) 组件使用。\n\n可以应用在[直角坐标系](https://echarts.apache.org/zh/option.html#grid)以及[地理坐标系](https://echarts.apache.org/zh/option.html#geo)上，这两个坐标系上的表现形式相差很大，直角坐标系上必须要使用两个类目轴。\n\n下面是在直角坐标系上应用的例子：\n\n**直角坐标系：**\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=heatmap-cartesian&edit=1&reset=1)",
        "detailFileName": "series.heatmap",
        "required": [
            {
                "key": "type",
                "value": "'heatmap'",
                "valueRegExp": "^['\"]heatmap['\"]$"
            }
        ]
    },
    {
        "name": "series.map",
        "type": "Object",
        "desc": "**地图。**\n\n地图主要用于地理区域数据的可视化，配合 [visualMap](https://echarts.apache.org/zh/option.html#visualMap) 组件用于展示不同区域的人口分布密度等数据。\n\n多个[地图类型](https://echarts.apache.org/zh/option.html#series-map.map)相同的系列会在同一地图上显示，这时候使用第一个系列的配置项作为地图绘制的配置。\n\n**Tip: **在 ECharts 3 中不再建议在地图类型的图表使用 `markLine` 和 `markPoint`。如果要实现点数据或者线数据的可视化，可以使用在[地理坐标系组件](https://echarts.apache.org/zh/option.html#geo)上的[散点图](https://echarts.apache.org/zh/option.html#series-scatter)和[线图](https://echarts.apache.org/zh/option.html#series-lines)。",
        "detailFileName": "series.map",
        "required": [
            {
                "key": "type",
                "value": "'map'",
                "valueRegExp": "^['\"]map['\"]$"
            }
        ]
    },
    {
        "name": "series.parallel",
        "type": "Object",
        "desc": "平行坐标系的系列。\n\n\n\n**平行坐标系介绍**\n\n[平行坐标系（Parallel Coordinates）](https://en.wikipedia.org/wiki/Parallel_coordinates) 是一种常用的可视化高维数据的图表。\n\n\n\n例如 [series-parallel.data](https://echarts.apache.org/zh/option.html#series-parallel.data) 中有如下数据：\n\n```javascript\n[\n[1,  55,  9,   56,  0.46,  18,  6,  '良'],\n[2,  25,  11,  21,  0.65,  34,  9,  '优'],\n[3,  56,  7,   63,  0.3,   14,  5,  '良'],\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n{ // 数据项也可以是 Object，从而里面能含有对线条的特殊设置。\nvalue: [5,  42,  24,  44,  0.76,  40,  16, '优']\nlineStyle: {...},\n}\n...\n]\n```\n数据中，每一行是一个『数据项』，每一列属于一个『维度』。（例如上面数据每一列的含义分别是：『日期』,『AQI指数』, 『PM2.5』, 『PM10』, 『一氧化碳值』, 『二氧化氮值』, 『二氧化硫值』）。\n\n\n\n\n\n平行坐标系适用于对这种多维数据进行可视化分析。每一个维度（每一列）对应一个坐标轴，每一个『数据项』是一条线，贯穿多个坐标轴。在坐标轴上，可以进行数据选取等操作。如下：\n\n~[600x400](doc-example/parallel-all&edit=1&reset=1)\n\n**配置方式概要**\n\n『平行坐标系』的 `option` 基本配置如下例：\n\n```javascript\noption = {\nparallelAxis: [                     // 这是一个个『坐标轴』的定义\n{dim: 0, name: schema[0].text}, // 每个『坐标轴』有个 'dim' 属性，表示坐标轴的维度号。\n{dim: 1, name: schema[1].text},\n{dim: 2, name: schema[2].text},\n{dim: 3, name: schema[3].text},\n{dim: 4, name: schema[4].text},\n{dim: 5, name: schema[5].text},\n{dim: 6, name: schema[6].text},\n{dim: 7, name: schema[7].text,\ntype: 'category',           // 坐标轴也可以支持类别型数据\ndata: ['优', '良', '轻度污染', '中度污染', '重度污染', '严重污染']\n}\n],\nparallel: {                         // 这是『坐标系』的定义\nleft: '5%',                     // 平行坐标系的位置设置\nright: '13%',\nbottom: '10%',\ntop: '20%',\nparallelAxisDefault: {          // 『坐标轴』的公有属性可以配置在这里避免重复书写\ntype: 'value',\nnameLocation: 'end',\nnameGap: 20\n}\n},\nseries: [                           // 这里三个系列共用一个平行坐标系\n{\nname: '北京',\ntype: 'parallel',           // 这个系列类型是 'parallel'\ndata: [\n[1,  55,  9,   56,  0.46,  18,  6,  '良'],\n[2,  25,  11,  21,  0.65,  34,  9,  '优'],\n...\n]\n},\n{\nname: '上海',\ntype: 'parallel',\ndata: [\n[3,  56,  7,   63,  0.3,   14,  5,  '良'],\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n...\n]\n},\n{\nname: '广州',\ntype: 'parallel',\ndata: [\n[4,  33,  7,   29,  0.33,  16,  6,  '优'],\n[5,  42,  24,  44,  0.76,  40,  16, '优'],\n...\n]\n}\n]\n};\n```\n\n需要涉及到三个组件：[parallel](https://echarts.apache.org/zh/option.html#parallel)、[parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)、[series-parallel](https://echarts.apache.org/zh/option.html#series-parallel)\n\n+ [parallel](https://echarts.apache.org/zh/option.html#parallel)\n\n这个配置项是平行坐标系的『坐标系』本身。一个系列（`series`）或多个系列（如上图中的『北京』、『上海』、『广州』分别各是一个系列）可以共用这个『坐标系』。\n\n和其他坐标系一样，坐标系也可以创建多个。\n\n位置设置，也是放在这里进行。\n\n+ [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)\n\n这个是『坐标系』中的坐标轴的配置。自然，需要有多个坐标轴。\n\n其中有 [parallelAxis.parallelIndex](https://echarts.apache.org/zh/option.html#parallelAxis.parallelIndex) 属性，指定这个『坐标轴』在哪个『坐标系』中。默认使用第一个『坐标系』。\n\n+ [series-parallel](https://echarts.apache.org/zh/option.html#series-parallel)\n\n这个是『系列』的定义。系列被画到『坐标系』上。\n\n其中有 [series-parallel.parallelIndex](https://echarts.apache.org/zh/option.html#series-parallel.parallelIndex) 属性，指定使用哪个『坐标系』。默认使用第一个『坐标系』。\n\n**配置注意和最佳实践**\n\n\n\n配置多个 [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis) 时，有些值一样的属性，如果书写多遍则比较繁琐，那么可以放置在 [parallel.parallelAxisDefault](https://echarts.apache.org/zh/option.html#parallel.parallelAxisDefault) 里。在坐标轴初始化前，[parallel.parallelAxisDefault](https://echarts.apache.org/zh/option.html#parallel.parallelAxisDefault) 里的配置项，会分别融合进 [parallelAxis](https://echarts.apache.org/zh/option.html#parallelAxis)，形成最终的坐标轴的配置。\n\n\n\n\n\n**如果数据量很大并且发生卡顿**\n\n建议把 [series-parallel.lineStyle.width](https://echarts.apache.org/zh/option.html#series-parallel.lineStyle.width) 设为 `0.5`（或更小），\n可能显著改善性能。\n\n**高维数据的显示**\n\n\n\n维度比较多时，比如有 50+ 的维度，那么就会有 50+ 个轴。那么可能会页面显示不下。\n\n可以通过 [parallel.axisExpandable](https://echarts.apache.org/zh/option.html#parallel.axisExpandable) 来改善显示效果。",
        "detailFileName": "series.parallel",
        "required": [
            {
                "key": "type",
                "value": "'parallel'",
                "valueRegExp": "^['\"]parallel['\"]$"
            }
        ]
    },
    {
        "name": "series.lines",
        "type": "Object",
        "desc": "**路径图**\n\n用于带有起点和终点信息的线数据的绘制，主要用于地图上的航线，路线的可视化。\n\nECharts 2.x 里会用地图上的 `markLine` 去绘制迁徙效果，在 ECharts 3 里建议使用单独的 `lines` 类型图表。",
        "detailFileName": "series.lines",
        "required": [
            {
                "key": "type",
                "value": "'lines'",
                "valueRegExp": "^['\"]lines['\"]$"
            }
        ]
    },
    {
        "name": "series.graph",
        "type": "Object",
        "desc": "**关系图**\n\n用于展现节点以及节点之间的关系数据。\n\n**示例：**\n\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=graph&reset=1&edit=1)",
        "detailFileName": "series.graph",
        "required": [
            {
                "key": "type",
                "value": "'graph'",
                "valueRegExp": "^['\"]graph['\"]$"
            }
        ]
    },
    {
        "name": "series.sankey",
        "type": "Object",
        "desc": "** 桑基图 **\n\n是一种特殊的流图（可以看作是有向无环图）。 它主要用来表示原材料、能量等如何从最初形式经过中间过程的加工或转化达到最终状态。\n\n**示例：**\n\n~[700x580](https://echarts.apache.org/examples/zh/view.html?c=sankey-energy&edit=1&reset=1)\n\n<br>\n**可视编码：**\n\n桑基图将原数据中的每个`node`编码成一个小矩形，不同的节点尽量用不同的颜色展示，小矩形旁边的`label`编码的是节点的名称。\n\n此外，图中每两个小矩形之间的边编码的是原数据中的`link`，边的粗细编码的是`link`中的`value`。\n\n<br>\n**排序：**\n\n如果想指定每层节点的顺序是按照 [data](https://echarts.apache.org/zh/option.html#series-sankey.data) 中的顺序排列的。可以设置 [layoutIterations](https://echarts.apache.org/zh/option.html#series-sankey.layoutIterations) 为 `0`。",
        "detailFileName": "series.sankey",
        "required": [
            {
                "key": "type",
                "value": "'sankey'",
                "valueRegExp": "^['\"]sankey['\"]$"
            }
        ]
    },
    {
        "name": "series.funnel",
        "type": "Object",
        "desc": "**漏斗图**\n\n**示例：**\n~[600x400](https://echarts.apache.org/examples/zh/view.html?c=funnel&reset=1&edit=1)",
        "detailFileName": "series.funnel",
        "required": [
            {
                "key": "type",
                "value": "'funnel'",
                "valueRegExp": "^['\"]funnel['\"]$"
            }
        ]
    },
    {
        "name": "series.gauge",
        "type": "Object",
        "desc": "**仪表盘**\n\n**示例：**\n~[600x500](https://echarts.apache.org/examples/zh/view.html?c=gauge&reset=1&edit=1)",
        "detailFileName": "series.gauge",
        "required": [
            {
                "key": "type",
                "value": "'gauge'",
                "valueRegExp": "^['\"]gauge['\"]$"
            }
        ]
    },
    {
        "name": "series.pictorialBar",
        "type": "Object",
        "desc": "**象形柱图**\n\n象形柱图是可以设置各种具象图形元素（如图片、[SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData) 等）的柱状图。往往用在信息图中。用于有至少一个类目轴或时间轴的[直角坐标系](https://echarts.apache.org/zh/option.html#grid)上。\n\n**示例：**\n~[800x400](https://echarts.apache.org/examples/zh/view.html?c=pictorialBar-hill&reset=1&edit=1)\n\n\n**布局**\n\n象形柱图可以被想象为：它首先是个柱状图，但是柱状图的柱子并不显示。这些柱子我们称为『基准柱（reference bar）』，根据基准柱来定位和显示各种象形图形（包括图片）。\n\n每个象形图形根据基准柱的定位，是通过 [symbolPosition](https://echarts.apache.org/zh/option.html#series-pictorialBar.symbolPosition)、[symbolOffset](https://echarts.apache.org/zh/option.html#series-pictorialBar.symbolOffset) 来调整其于基准柱的相对位置。\n\n参见例子：\n~[800x600](https://echarts.apache.org/examples/zh/view.html?c=doc-example/pictorialBar-position&reset=1&edit=1)\n\n可以使用 [symbolSize](https://echarts.apache.org/zh/option.html#series-pictorialBar.symbolSize) 调整大小，从而形成各种视图效果。\n\n参见例子：\n~[800x600](https://echarts.apache.org/examples/zh/view.html?c=doc-example/pictorialBar-symbolSize&reset=1&edit=1)\n\n\n**象形图形类型**\n\n每个图形可以配置成『单独』和『重复』两种类型，即通过 [symbolRepeat](https://echarts.apache.org/zh/option.html#series-pictorialBar.symbolRepeat) 来设置。\n\n+ 设置为 `false`（默认），则一个图形来代表一个数据项。\n+ 设置为 `true`，则一组重复的图形来代表一个数据项。\n\n参见例子：\n~[800x400](https://echarts.apache.org/examples/zh/view.html?c=doc-example/pictorialBar-repeat&reset=1&edit=1)\n\n每个象形图形可以是基本图形（如 `'circle'`, `'rect'`, ...）、[SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)、图片，参见：[symbolType](https://echarts.apache.org/zh/option.html#series-pictorialBar.symbolType)。\n\n参见例子：\n~[800x400](https://echarts.apache.org/examples/zh/view.html?c=doc-example/pictorialBar-graphicType&reset=1&edit=1)\n\n可以使用 [symbolClip](https://echarts.apache.org/zh/option.html#series-pictorialBar.symbolClip) 对图形进行剪裁。\n\n参见例子：\n~[800x600](https://echarts.apache.org/examples/zh/view.html?c=doc-example/pictorialBar-clip&reset=1&edit=1)",
        "detailFileName": "series.pictorialBar",
        "required": [
            {
                "key": "type",
                "value": "'pictorialBar'",
                "valueRegExp": "^['\"]pictorialBar['\"]$"
            }
        ]
    },
    {
        "name": "series.themeRiver",
        "type": "Object",
        "desc": "** 主题河流 **\n\n是一种特殊的流图, 它主要用来表示事件或主题等在一段时间内的变化。\n\n**示例：**\n\n~[700x580](https://echarts.apache.org/examples/zh/view.html?c=themeRiver-lastfm&edit=1&reset=1)\n\n\n<br>\n**可视编码：**\n\n主题河流中不同颜色的条带状河流分支编码了不同的事件或主题，河流分支的宽度编码了原数据集中的value值。\n\n此外，原数据集中的时间属性，映射到单个时间轴上。",
        "detailFileName": "series.themeRiver",
        "required": [
            {
                "key": "type",
                "value": "'themeRiver'",
                "valueRegExp": "^['\"]themeRiver['\"]$"
            }
        ]
    },
    {
        "name": "series.custom",
        "type": "Object",
        "desc": "**自定义系列**\n\n自定义系列可以自定义系列中的图形元素渲染。从而能扩展出不同的图表。\n\n同时，echarts 会统一管理图形的创建删除、动画、与其他组件（如 [dataZoom](https://echarts.apache.org/zh/option.html#dataZoom)、[visualMap](https://echarts.apache.org/zh/option.html#visualMap)）的联动，使开发者不必纠结这些细节。\n\n**例如，下面的例子使用 custom series 扩展出了 x-range 图：**\n~[800x500](https://echarts.apache.org/examples/zh/view.html?c=custom-profile&reset=1&edit=1)\n\n**更多的例子参见：[custom examples](/examples/zh/index.html#chart-type-custom)**\n\n**[这里是个教程](tutorial.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B3%BB%E5%88%97)**\n\n**开发者自定义渲染逻辑（renderItem 函数）**\n\n\n\ncustom 系列需要开发者自己提供图形渲染的逻辑。这个渲染逻辑一般命名为 [renderItem](https://echarts.apache.org/zh/option.html#series-custom.renderItem)。例如：\n\n```ts\nvar option = {\n...,\nseries: [{\ntype: 'custom',\nrenderItem: function (params, api) {\nvar categoryIndex = api.value(0);\nvar start = api.coord([api.value(1), categoryIndex]);\nvar end = api.coord([api.value(2), categoryIndex]);\nvar height = api.size([0, 1])[1] * 0.6;\n\nvar rectShape = echarts.graphic.clipRectByRect({\nx: start[0],\ny: start[1] - height / 2,\nwidth: end[0] - start[0],\nheight: height\n}, {\nx: params.coordSys.x,\ny: params.coordSys.y,\nwidth: params.coordSys.width,\nheight: params.coordSys.height\n});\n\nreturn rectShape && {\ntype: 'rect',\nshape: rectShape,\nstyle: api.style()\n};\n},\ndata: data\n}]\n}\n```\n\n对于 `data` 中的每个数据项（为方便描述，这里称为 `dataItem`)，会调用此 [renderItem](https://echarts.apache.org/zh/option.html#series-custom.renderItem) 函数。\n\n[renderItem](https://echarts.apache.org/zh/option.html#series-custom.renderItem) 函数提供了两个参数：\n+ [params](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.params)：包含了当前数据信息和坐标系的信息。\n+ [api](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api)：是一些开发者可调用的方法集合。\n\n[renderItem](https://echarts.apache.org/zh/option.html#series-custom.renderItem) 函数须返回根据此 `dataItem` 绘制出的图形元素的定义信息，参见 [renderItem.return](https://echarts.apache.org/zh/option.html#series-custom.renderItem.return)。\n\n一般来说，[renderItem](https://echarts.apache.org/zh/option.html#series-custom.renderItem) 函数的主要逻辑，是将 `dataItem` 里的值映射到坐标系上的图形元素。这一般需要用到 [renderItem.arguments.api](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api) 中的两个函数：\n+ [api.value(...)](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api.value)，意思是取出 `dataItem` 中的数值。例如 `api.value(0)` 表示取出当前 `dataItem` 中第一个维度的数值。\n+ [api.coord(...)](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api.coord)，意思是进行坐标转换计算。例如 `var point = api.coord([api.value(0), api.value(1)])` 表示 `dataItem` 中的数值转换成坐标系上的点。\n\n有时候还需要用到 [api.size(...)](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api.size) 函数，表示得到坐标系上一段数值范围对应的长度。\n\n返回值中样式的设置可以使用 [api.style(...)](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api.style) 函数，他能得到 [series.itemStyle](https://echarts.apache.org/zh/option.html#series-custom.itemStyle) 中定义的样式信息，以及视觉映射的样式信息。也可以用这种方式覆盖这些样式信息：`api.style({fill: 'green', stroke: 'yellow'})`。\n\n\n\n\n\n**维度的映射（encode 和 dimensions 属性）**\n\n`custom` 系列往往需要定义 [series.encode](https://echarts.apache.org/zh/option.html#series-custom.encode)，主要用于指明 `data` 的哪些维度映射到哪些数轴上。从而，echarts 能根据这些维度的值的范围，画出合适的数轴刻度。\n同时，encode.tooltip 和 encode.label 也可以被指定，指明默认的 tooltip 和 label 显示什么内容。[series.dimensions](https://echarts.apache.org/zh/option.html#series-custom.dimensions) 也可以被指定，指明显示在 tooltip 中的维度名称，或者维度的类型。\n\n例如：\n```ts\nseries: {\ntype: 'custom',\nrenderItem: function () {\n...\n},\nencode: {\nx: [2, 4, 3],\ny: 1,\nlabel: 0,\ntooltip: [2, 4, 3]\n}\n}\n```\n\n**与 dataZoom 组件的结合**\n\n与 [dataZoom](https://echarts.apache.org/zh/option.html#dataZoom) 结合使用的时候，常常使用会设置 [dataZoom.filterMode](https://echarts.apache.org/zh/option.html#dataZoom.filterMode) 为 'weakFilter'，从而让 `dataItem` 部分超出坐标系边界的时候，不会整体被过滤掉。\n\n**关于 `dataIndex` 和 `dataIndexInside` 的区别**\n\n\n\n+ `dataIndex` 指的 `dataItem` 在原始数据中的 index。\n+ `dataIndexInside` 指的是 `dataItem` 在当前数据窗口（参见 [dataZoom](https://echarts.apache.org/zh/option.html#dataZoom)）中的 index。\n\n[renderItem.arguments.api](https://echarts.apache.org/zh/option.html#series-custom.renderItem.arguments.api) 中使用的参数都是 `dataIndexInside` 而非 `dataIndex`，因为从 `dataIndex` 转换成 `dataIndexInside` 需要时间开销。\n\n\n\n**Event listener**\n\n```ts\nchart.setOption({\n// ...\nseries: {\ntype: 'custom',\nrenderItem: function () {\n// ...\nreturn {\ntype: 'group',\nchildren: [{\ntype: 'circle'\n// ...\n}, {\ntype: 'circle',\nname: 'aaa',\n// 用户指定的信息，可以在 event handler 访问到。\ninfo: 12345,\n// ...\n}]\n};\n}\n}\n});\nchart.on('click', {element: 'aaa'}, function (params) {\n// 当 name 为 'aaa' 的图形元素被点击时，此回调被触发。\nconsole.log(params.info);\n});\n```",
        "detailFileName": "series.custom",
        "required": [
            {
                "key": "type",
                "value": "'${0}'",
                "valueRegExp": "^['\"].*['\"]$"
            }
        ]
    }
]