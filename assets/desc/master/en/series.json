[
    {
        "name": "series.line",
        "type": "Object",
        "desc": "**broken line chart**\n\nBroken line chart relates all the data points [symbol](https://echarts.apache.org/en/option.html#series-line.symbol) by broken lines, which is used to show the trend of data changing. It could be used in both [rectangular coordinate](https://echarts.apache.org/en/option.html#grid) and[polar coordinate](https://echarts.apache.org/en/option.html#polar).\n\n**Tip:** When [areaStyle](https://echarts.apache.org/en/option.html#series-line.areaStyle) is set, area chart will be drawn.\n\n**Tip:** With [visualMap](https://echarts.apache.org/en/option.html#visualMap-piecewise) component, Broken line / area chart can have different colors on different sections, as below:\n\n~[600x400](https://echarts.apache.org/examples/en/view.html?c=line-aqi&edit=1&reset=1)",
        "detailFileName": "series.line",
        "required": [
            {
                "key": "type",
                "value": "'line'",
                "valueRegExp": "^['\"]line['\"]$"
            }
        ]
    },
    {
        "name": "series.bar",
        "type": "Object",
        "desc": "**bar chart**\n\nBar chart shows different data through the height of a bar, which is used in [rectangular coordinate](https://echarts.apache.org/en/option.html#grid) with at least 1 category axis.",
        "detailFileName": "series.bar",
        "required": [
            {
                "key": "type",
                "value": "'bar'",
                "valueRegExp": "^['\"]bar['\"]$"
            }
        ]
    },
    {
        "name": "series.pie",
        "type": "Object",
        "desc": "The pie chart is mainly used for showing proportion of different categories. Each arc length represents the proportion of data quantity.\n\n\n**Tip:** The pie chart is more suitable for illustrating the numerical proportion. If you just to present the numerical differences of various categories, the [bar graph](bar) chart is more suggested. Because compared to tiny length difference,  people is less sensitive to the minor radian difference. Otherwise, it can also be shown as Nightingale chart by using the [roseType](https://echarts.apache.org/en/option.html#series-pie.roseType) to distinguish different data through radius.\n\n\n\nFor multiple pie series in a single chart, you may use [left](https://echarts.apache.org/en/option.html#series-pie.left), [right](https://echarts.apache.org/en/option.html#series-pie.right), [top](https://echarts.apache.org/en/option.html#series-pie.top), [bottom](https://echarts.apache.org/en/option.html#series-pie.bottom), [width](https://echarts.apache.org/en/option.html#series-pie.width), and [height](https://echarts.apache.org/en/option.html#series-pie.height) to locate the pies. Percetage values like [radius](https://echarts.apache.org/en/option.html#series-pie.radius) or [label.edgeDistance](https://echarts.apache.org/en/option.html#series-pie.label.edgeDistance) are relative to the viewport defined by this setting.\n\n** The below example shows a customized Nightingale chart: **\n~[500x400](https://echarts.apache.org/examples/en/view.html?c=pie-custom&edit=1&reset=1)\n\nSince ECharts v4.6.0, we provide `'labelLine'` and `'edge'` two extra layouts. Check [label.alignTo](https://echarts.apache.org/en/option.html#series-pie.label.alignTo) for more information.",
        "detailFileName": "series.pie",
        "required": [
            {
                "key": "type",
                "value": "'pie'",
                "valueRegExp": "^['\"]pie['\"]$"
            }
        ]
    },
    {
        "name": "series.scatter",
        "type": "Object",
        "desc": "Scatter (bubble) chart . The scatter chart in [rectangular coordinate](https://echarts.apache.org/en/option.html#grid) could be used to present the relation between  `x` and `y`. If data have multiple dimensions, the values of the other dimensions can be visualized through [symbol](https://echarts.apache.org/en/option.html#series-scatter.symbol) with various sizes and colors, which becomes a bubble chart. These can be done by using with [visualMap](https://echarts.apache.org/en/option.html#visualMap) component.\n\n\nIt could be used with [rectangular coordinate](https://echarts.apache.org/en/option.html#grid) and [polar coordinate](https://echarts.apache.org/en/option.html#polar) and [geographical coordinate](https://echarts.apache.org/en/option.html#geo).",
        "detailFileName": "series.scatter",
        "required": [
            {
                "key": "type",
                "value": "'scatter'",
                "valueRegExp": "^['\"]scatter['\"]$"
            }
        ]
    },
    {
        "name": "series.effectScatter",
        "type": "Object",
        "desc": "The scatter (bubble) graph with ripple animation. The special animation effect can visually highlights some data.\n\n**Tip:**  The effects of map was achieved through markPoint in ECharts 2.x. However, in  ECharts 3, effectScatter on geographic coordinate is recommended for achieving that effects of map.",
        "detailFileName": "series.effectScatter",
        "required": [
            {
                "key": "type",
                "value": "'effectScatter'",
                "valueRegExp": "^['\"]effectScatter['\"]$"
            }
        ]
    },
    {
        "name": "series.radar",
        "type": "Object",
        "desc": "**radar chart**\n\nRadar chart is mainly used to show multi-variable data, such as the analysis of a football player's varied attributes. It relies [radar](https://echarts.apache.org/en/option.html#radar) component.\n\nHere is the example of AQI data which is presented in radar chart.\n\n~[600x500](https://echarts.apache.org/examples/en/view.html?c=radar-aqi&edit=1&reset=1)",
        "detailFileName": "series.radar",
        "required": [
            {
                "key": "type",
                "value": "'radar'",
                "valueRegExp": "^['\"]radar['\"]$"
            }
        ]
    },
    {
        "name": "series.tree",
        "type": "Object",
        "desc": "**Tree Diagram**\n\nThe tree diagram is mainly used to visualize the tree data structure, which is a special hierarchical type with a unique root node, left subtree, and right subtree.\n\n**Note: Forests are not currently supported directly in a single series, and can be implemented by configuring multiple series in an option**\n\n**Tree example：**\n\n~[900x780](https://echarts.apache.org/examples/en/view.html?c=tree-vertical&edit=1&reset=1)\n\n**Multiple series are combined into forest：**\n\n~[800x680](https://echarts.apache.org/examples/en/view.html?c=tree-legend&edit=1&reset=1)",
        "detailFileName": "series.tree",
        "required": [
            {
                "key": "type",
                "value": "'tree'",
                "valueRegExp": "^['\"]tree['\"]$"
            }
        ]
    },
    {
        "name": "series.treemap",
        "type": "Object",
        "desc": "[Treemap](https://en.wikipedia.org/wiki/Treemapping) is a common way to present \"hierarchical data\" or \"tree data\". It primarily highlights the important nodes at all hierarchies in 『Tree』with area.\n\n\n\n**Example:**\n\n~[700x580](https://echarts.apache.org/examples/en/view.html?c=treemap-obama&edit=1&reset=1)\n\n\n\n**Visual Mapping:**\n\ntreemap maps the numerical values to area.\n\nMoreover, it is able to map some dimensions of data to other visual channel, like colors, lightness of colors and etc.\n\n\n\nAbout visual encoding, see details in [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels).\n\n\n\n\n\n**Drill Down:**\n\nThe feature `drill down` means: when clicking a tree node, this node will be set as root and its children will be shown. When [leafDepth](https://echarts.apache.org/en/option.html#series-treemap.leafDepth) is set, this feature is enabled.\n\n**An example about drill down:**\n~[800x500](https://echarts.apache.org/examples/en/view.html?c=treemap-drill-down&edit=1&reset=1)\n\n\nNotice: There are some difference in treemap configuration between ECharts3 and ECharts2. Some immature configuration ways are no longer supported:\n\n+ The position method using `center/size` is no longer supported, and `left/top/bottom/right/width/height` are used to position treemap, as other components do.\n\n+ The configuration item `breadcrumb` is moved outside `itemStyle/itemStyle.emphasis`, and it is in the same level with `itemStyle` now.\n\n+ The configuration item `root` is not available temporarily.User can zoom treemap to see some tiny or deep descendants, or using [leafDepth](https://echarts.apache.org/en/option.html#series-treemap.leafDepth) to enable the feature of \"drill down\".\n\n+ The configuration item `label` is moved outside the `itemStyle/itemStyle.emphasis`, and it is in the same level with `itemStyle` now.\n\n+ The configuration items `itemStyle.childBorderWidth` and `itemStyle.childBorderColor` are not supported anymore (because in this way only 2 levels can be defined). [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels) is used to define all levels now.",
        "detailFileName": "series.treemap",
        "required": [
            {
                "key": "type",
                "value": "'treemap'",
                "valueRegExp": "^['\"]treemap['\"]$"
            }
        ]
    },
    {
        "name": "series.sunburst",
        "type": "Object",
        "desc": "[Sunburst Chart](https://en.wikipedia.org/wiki/Pie_chart#Ring_chart,_sunburst_chart,_and_multilevel_pie_chart) is composed of multiple pie charts. From the view of data structure, inner rings are the parent nodes of outer rings. Therefore, it can show the partial-overall relationship as [Pie](https://echarts.apache.org/en/option.html#series-pie) charts, and also level relation as [Treemap](https://echarts.apache.org/en/option.html#series-treemap) charts.\n\n**For example:**\n\n~[700x500](https://echarts.apache.org/examples/en/view.html?c=sunburst-monochrome&edit=1&reset=1)\n\n~[700x700](https://echarts.apache.org/examples/en/view.html?c=sunburst-drink&edit=1&reset=1)\n\n**Data Drilling**\n\nThe sunburst chart supports data drilling by default, which means when a user clicks a sector, it will be used as the root node, and there will be a circle in the center used to return to the parent node. If data drilling is not needed, it can be disabled by [series-sunburst.nodeClick](https://echarts.apache.org/en/option.html#series-sunburst.nodeClick).",
        "detailFileName": "series.sunburst",
        "required": [
            {
                "key": "type",
                "value": "'sunburst'",
                "valueRegExp": "^['\"]sunburst['\"]$"
            }
        ]
    },
    {
        "name": "series.boxplot",
        "type": "Object",
        "desc": "[Boxplot](https://en.wikipedia.org/wiki/Box_plot) is a convenient way of graphically depicting groups of numerical data through their quartiles.\n\n**Example:**\n\n~[600x400](https://echarts.apache.org/examples/en/view.html?c=boxplot-light-velocity&edit=1&reset=1)\n\n<br>\nMultiple `series` can be displayed in the same coordinate system. Please refer to [this example](boxplot-multi&edit=1&reset=1).\n\n<br>\n<br>",
        "detailFileName": "series.boxplot",
        "required": [
            {
                "key": "type",
                "value": "'boxplot'",
                "valueRegExp": "^['\"]boxplot['\"]$"
            }
        ]
    },
    {
        "name": "series.candlestick",
        "type": "Object",
        "desc": "A [candlestick](https://en.wikipedia.org/wiki/Candlestick_chart) chart (also called Japanese candlestick chart) is a style of financial chart used to describe price movements of a security, derivative, or currency.\n\nECharts3 supports both `'candlestick'` and `'k'` in [series.type](https://echarts.apache.org/en/option.html#(series.type) (`'k'` would automatically turns into `'candlestick'`).\n\n**An example:**\n\n~[600x400](https://echarts.apache.org/examples/en/view.html?c=candlestick-sh&edit=1&reset=1)\n\n\n<br>\n**About color of increase and decrease**\n\nDifferent countries or regions have different implications on the color of candle stick chart. It may use red to imply increasing with red and decreasing with blue (in China mainland, Taiwan, Japan, Koera, and so on), or to imply increasing with green and decreasing with red (in Europe, North America, Hong Kong, Singapore, and so on). Besides color, the increase and decrease of stock may also be represented with candle stick with or without filling colors.\n\nWe use red to represent increasing and blue decreasing by default. If you want to change the configuration, you may change the following parameters.\n\n+ [series-candlestick.itemStyle.color](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.color): fill color for bullish candle stick (namely, increase)\n+ [series-candlestick.itemStyle.color0](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.color0): fill color for bearish candle stick (namely, decrease)\n+ [series-candlestick.itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.borderColor): border color for bullish candle stick (namely, increase)\n+ [series-candlestick.itemStyle.borderColor0](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.borderColor0): border color for bearish candle stick (namely, decrease)\n+ [series-candlestick.itemStyle.borderColorDoji](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.borderColorDoji): border color for doji (when the open price is the same as the close price)\n\n\n<br>\n<br>",
        "detailFileName": "series.candlestick",
        "required": [
            {
                "key": "type",
                "value": "'candlestick'",
                "valueRegExp": "^['\"]candlestick['\"]$"
            }
        ]
    },
    {
        "name": "series.heatmap",
        "type": "Object",
        "desc": "**heat map**\n\nHeat map mainly use colors to represent values, which must be used along with [visualMap](https://echarts.apache.org/en/option.html#visualMap) component.\n\nIt can be used in either [rectangular coordinate](https://echarts.apache.org/en/option.html#grid) or [geographic coordinate](https://echarts.apache.org/en/option.html#geo). But the behaviour on them are quite different. Rectangular coordinate must have two categories to use it.\n\nHere are the examples using it in rectangular coordinate and geographic coordinate:\n\n**rectangular coordinate: **\n~[600x400](https://echarts.apache.org/examples/en/view.html?c=heatmap-cartesian&edit=1&reset=1)",
        "detailFileName": "series.heatmap",
        "required": [
            {
                "key": "type",
                "value": "'heatmap'",
                "valueRegExp": "^['\"]heatmap['\"]$"
            }
        ]
    },
    {
        "name": "series.map",
        "type": "Object",
        "desc": "**Map.**\n\nMap is mainly used in the visualization of geographic area data, which can be used with [visualMap](https://echarts.apache.org/en/option.html#visualMap) component to visualize the data such as population distribution density in different areas.\n\nSeries of same [map type](https://echarts.apache.org/en/option.html#series-map.map) will show in one map. At this point, the configuration of the first series will be used for the map configuration.",
        "detailFileName": "series.map",
        "required": [
            {
                "key": "type",
                "value": "'map'",
                "valueRegExp": "^['\"]map['\"]$"
            }
        ]
    },
    {
        "name": "series.parallel",
        "type": "Object",
        "desc": "The series in parallel coordinate system.\n\n\n\n**Introduction about Parallel coordinates**\n\n[Parallel Coordinates](https://en.wikipedia.org/wiki/Parallel_coordinates) is a common way of visualizing high-dimensional geometry and analyzing multivariate data.\n\n\n\nFor example, [series-parallel.data](https://echarts.apache.org/en/option.html#series-parallel.data) is the following data:\n\n```javascript\n[\n[1,  55,  9,   56,  0.46,  18,  6,  'good'],\n[2,  25,  11,  21,  0.65,  34,  9,  'excellent'],\n[3,  56,  7,   63,  0.3,   14,  5,  'good'],\n[4,  33,  7,   29,  0.33,  16,  6,  'excellent'],\n{ // Data item can also be an Object, so that perticular settings of its line can be set here.\nvalue: [5,  42,  24,  44,  0.76,  40,  16, 'excellent']\nlineStyle: {...},\n}\n...\n]\n```\nIn data above, each row is a \"data item\", and each column represents a \"dimension\". For example, the meanings of columns above are: \"data\", \"AQI\", \"PM2.5\", \"PM10\", \"carbon monoxide level\", \"nitrogen dioxide level\", and \"sulfur dioxide level\".\n\n\n\n\n\nParallel coordinates are often used to visualize multi-dimension data shown above. Each axis represents a dimension (namely, a column), and each line represents a data item. Data can be brush-selected on axes. For example:\n\n~[600x400](doc-example/parallel-all&edit=1&reset=1)\n\n\n**Brief about Configuration**\n\nBasic configuration parallel coordinates is shown as follow:\n\n```javascript\noption = {\nparallelAxis: [                     // Definitions of axes.\n{dim: 0, name: schema[0].text}, // Each axis has a 'dim' attribute, representing dimension index in data.\n{dim: 1, name: schema[1].text},\n{dim: 2, name: schema[2].text},\n{dim: 3, name: schema[3].text},\n{dim: 4, name: schema[4].text},\n{dim: 5, name: schema[5].text},\n{dim: 6, name: schema[6].text},\n{dim: 7, name: schema[7].text,\ntype: 'category',           // Also supports category data.\ndata: ['Excellent', 'good', 'light pollution', 'moderate pollution', 'heavy pollution', 'severe pollution']\n}\n],\nparallel: {                         // Definition of a parallel coordinate system.\nleft: '5%',                     // Location of parallel coordinate system.\nright: '13%',\nbottom: '10%',\ntop: '20%',\nparallelAxisDefault: {          // A pattern for axis definition, which can avoid repeating in `parallelAxis`.\ntype: 'value',\nnameLocation: 'end',\nnameGap: 20\n}\n},\nseries: [                           // Here the three series sharing the same parallel coordinate system.\n{\nname: 'Beijing',\ntype: 'parallel',           // The type of this series is 'parallel'\ndata: [\n[1,  55,  9,   56,  0.46,  18,  6,  'good'],\n[2,  25,  11,  21,  0.65,  34,  9,  'excellent'],\n...\n]\n},\n{\nname: 'Shanghai',\ntype: 'parallel',\ndata: [\n[3,  56,  7,   63,  0.3,   14,  5,  'good'],\n[4,  33,  7,   29,  0.33,  16,  6,  'excellent'],\n...\n]\n},\n{\nname: 'Guangzhou',\ntype: 'parallel',\ndata: [\n[4,  33,  7,   29,  0.33,  16,  6,  'excellent'],\n[5,  42,  24,  44,  0.76,  40,  16, 'excellent'],\n...\n]\n}\n]\n};\n```\n\nThree components are involved here: [parallel](https://echarts.apache.org/en/option.html#parallel), [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis), [series-parallel](https://echarts.apache.org/en/option.html#series-parallel)\n\n+ [parallel](https://echarts.apache.org/en/option.html#parallel)\n\nThis component is the coordinate system. One or more series (like \"Beijing\", \"Shanghai\", and \"Guangzhou\" in the above example) can share one coordinate system.\n\nLike other coordinate systems, multiple parallel coordinate systems can be created in one echarts instance.\n\nPosition setting is also carried out here.\n\n+ [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis)\n\nThis is axis configuration. Multiple axes are needed in parallel coordinates.\n\n[parallelAxis.parallelIndex](https://echarts.apache.org/en/option.html#parallelAxis.parallelIndex) is used to specify which coordinate system this axis belongs to. The first coordinate system is used by default.\n\n+ [series-parallel](https://echarts.apache.org/en/option.html#series-parallel)\n\nThis is the definition of parallel series, which will be drawn on parallel coordinate system.\n\n[parallelAxis.parallelIndex](https://echarts.apache.org/en/option.html#parallelAxis.parallelIndex) is used to specify which coordinate system this axis belongs to. The first coordinate system is used by default.\n\n**Notes and Best Practices**\n\n\n\nWhen configuring multiple [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis), there might be some common attributes in each axis configuration. To avoid writing them repeatedly, they can be put under [parallel.parallelAxisDefault](https://echarts.apache.org/en/option.html#parallel.parallelAxisDefault). Before initializing axis, configurations in [parallel.parallelAxisDefault](https://echarts.apache.org/en/option.html#parallel.parallelAxisDefault) will be merged into [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis) to generate the final axis configuration.\n\n\n\n\n\n**If data is too large and cause bad performance**\n\nIt is suggested to set [series-parallel.lineStyle.width](https://echarts.apache.org/en/option.html#series-parallel.lineStyle.width) to be `0.5` (or less), which may improve performance significantly.\n\n**Display High-Dimension Data**\n\n\n\nWhen dimension number is extremely large, say, more than 50 dimensions, there will be more than 50 axes, which may hardly display in a page.\n\nIn this case, you may use [parallel.axisExpandable](https://echarts.apache.org/en/option.html#parallel.axisExpandable) to improve the display. See this example:\n\n~[600x460](map-parallel-prices&edit=1&reset=1)",
        "detailFileName": "series.parallel",
        "required": [
            {
                "key": "type",
                "value": "'parallel'",
                "valueRegExp": "^['\"]parallel['\"]$"
            }
        ]
    },
    {
        "name": "series.lines",
        "type": "Object",
        "desc": "**Lines graph**\n\nIt is used to draw the line data with the information about \"from\" and \"to\"; and it is applied for drawing the air routes on map, which visualizes these routes.\n\nECharts 2.x uses the `markLine` to draw the migrating effect, while in ECharts 3, the `lines` graph is recommended to be used.",
        "detailFileName": "series.lines",
        "required": [
            {
                "key": "type",
                "value": "'lines'",
                "valueRegExp": "^['\"]lines['\"]$"
            }
        ]
    },
    {
        "name": "series.graph",
        "type": "Object",
        "desc": "**relation graph**\n\nGraph is a diagram to represent [nodes](https://echarts.apache.org/en/option.html#series-graph.nodes) and the [links](https://echarts.apache.org/en/option.html#series-graph.links) connecting nodes.\n\n**Example: **\n\n~[600x400](https://echarts.apache.org/examples/en/view.html?c=graph&reset=1&edit=1)",
        "detailFileName": "series.graph",
        "required": [
            {
                "key": "type",
                "value": "'graph'",
                "valueRegExp": "^['\"]graph['\"]$"
            }
        ]
    },
    {
        "name": "series.sankey",
        "type": "Object",
        "desc": "** Sankey diagram **\nSankey diagram is a specific type of streamgraph (can also be seen as a directed acyclic graph) in which the width of each branch is shown proportionally to the flow quantity. These graphs are typically used to visualize energy or material or cost transfers between processes. They can also visualize the energy accounts, material flow accounts on a regional or national level, and also the breakdown of cost of item or services.\n\n**Example: **\n\n~[700x580](https://echarts.apache.org/examples/en/view.html?c=sankey-energy&edit=1&reset=1)\n\n\n<br>\n**Visual Encoding: **\n\nThe Sankey diagram encodes each `node` of the raw data into a small rectangle. Different nodes are presented in different colors as far as possible. The `label` next to the small rectangle encodes the name of the node.\n\nIn addition, the edge between two small rectangles in the diagram encodes the `link` of the raw data. The width of edge is shown proportionally to the `value` of `link`.",
        "detailFileName": "series.sankey",
        "required": [
            {
                "key": "type",
                "value": "'sankey'",
                "valueRegExp": "^['\"]sankey['\"]$"
            }
        ]
    },
    {
        "name": "series.funnel",
        "type": "Object",
        "desc": "**Funnel chart**\n\n**sample: **\n~[600x400](https://echarts.apache.org/examples/en/view.html?c=funnel&reset=1&edit=1)",
        "detailFileName": "series.funnel",
        "required": [
            {
                "key": "type",
                "value": "'funnel'",
                "valueRegExp": "^['\"]funnel['\"]$"
            }
        ]
    },
    {
        "name": "series.gauge",
        "type": "Object",
        "desc": "**Gauge chart**\n\n**Example: **\n~[600x500](https://echarts.apache.org/examples/en/view.html?c=gauge&reset=1&edit=1)",
        "detailFileName": "series.gauge",
        "required": [
            {
                "key": "type",
                "value": "'gauge'",
                "valueRegExp": "^['\"]gauge['\"]$"
            }
        ]
    },
    {
        "name": "series.pictorialBar",
        "type": "Object",
        "desc": "**pictorial bar chart**\n\nPictorial bar chart is a type of bar chart that customized glyph (like images, [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)) can be used instead of rectangular bar. This kind of chart is usually used in infographic.\n\nPictorial bar chart can only be used in [rectangular coordinate](https://echarts.apache.org/en/option.html#grid) with at least 1 category axis.\n\n\n**Example:**\n~[800x400](https://echarts.apache.org/examples/en/view.html?c=pictorialBar-hill&reset=1&edit=1)\n\n\n**Layout**\n\nBasically `pictorialBar` is a type of bar chart, which follows the bar chart layout. In `pictorialBar`, each bar is named as `reference bar`, which does not be shown, but only be used as a reference for layout of pictorial graphic elements. Each pictorial graphic element is positioned with respect to its `reference bar` according to the setting of [symbolPosition](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPosition)、[symbolOffset](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolOffset).\n\nSee the example below:\n~[800x600](https://echarts.apache.org/examples/en/view.html?c=doc-example/pictorialBar-position&reset=1&edit=1)\n\n[symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize) is used to specify the size of graphic elements.\n\nSee the example below:\n~[800x600](https://echarts.apache.org/examples/en/view.html?c=doc-example/pictorialBar-symbolSize&reset=1&edit=1)\n\n\n\n**Graphic types**\n\n[symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat) can be\n\nGraphic elements can be set as 'repeat' or not by [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat).\n\n+ If set as `false` (default), a single graphic element is used to represent a data item.\n+ If set as `true`, a group of repeat graphic elements are used to represent a data item.\n\nSee the example below:\n~[800x400](https://echarts.apache.org/examples/en/view.html?c=doc-example/pictorialBar-repeat&reset=1&edit=1)\n\nEach graphic element can be basic shape (like `'circle'`, `'rect'`, ...), or [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData), or image. See [symbolType](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolType).\n\nSee the example below:\n~[800x400](https://echarts.apache.org/examples/en/view.html?c=doc-example/pictorialBar-graphicType&reset=1&edit=1)\n\n[symbolClip](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip) can be used to clip graphic elements.\n\nSee the example below:\n~[800x600](https://echarts.apache.org/examples/en/view.html?c=doc-example/pictorialBar-clip&reset=1&edit=1)",
        "detailFileName": "series.pictorialBar",
        "required": [
            {
                "key": "type",
                "value": "'pictorialBar'",
                "valueRegExp": "^['\"]pictorialBar['\"]$"
            }
        ]
    },
    {
        "name": "series.themeRiver",
        "type": "Object",
        "desc": "** Theme river **\n\nIt is a special flow graph which is mainly used to present the changes of an event or theme during a period.\n\n**Sample: **\n\n~[700x580](https://echarts.apache.org/examples/en/view.html?c=themeRiver-lastfm&edit=1&reset=1)\n\n\n<br>\n**visual encoding: **\n\nThe ribbon-shape river branches in different colors in theme river encode variable events or themes. The width of river branches encode the value of the original dataset.\n\nWhat's more, the time attribute of the orinigal dataset would map to a single time axis.",
        "detailFileName": "series.themeRiver",
        "required": [
            {
                "key": "type",
                "value": "'themeRiver'",
                "valueRegExp": "^['\"]themeRiver['\"]$"
            }
        ]
    },
    {
        "name": "series.custom",
        "type": "Object",
        "desc": "**custom series**\n\n`custom series` supports customizing graphic elements, and then generate more types of charts.\n\necharts manages the creation, deletion, animation and interaction with other components (like [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)、[visualMap](https://echarts.apache.org/en/option.html#visualMap)), which frees developers from handling those issue themselves.\n\n**For example, a \"x-range\" chart is made by custom sereis:**\n~[800x400](https://echarts.apache.org/examples/en/view.html?c=custom-profile&reset=1&edit=1)\n\n**[More samples of custom series](/examples/en/index.html#chart-type-custom)**\n\n**[A tutotial of custom series](tutorial.html#Custom%20Series)**\n\n<br>\n**Customize the render logic (in renderItem method)**\n\n\n\n`custom series` requires developers to write a render logic by themselves. This render logic is called [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem).\n\nFor example:\n\n```ts\nvar option = {\n...,\nseries: [{\ntype: 'custom',\nrenderItem: function (params, api) {\nvar categoryIndex = api.value(0);\nvar start = api.coord([api.value(1), categoryIndex]);\nvar end = api.coord([api.value(2), categoryIndex]);\nvar height = api.size([0, 1])[1] * 0.6;\n\nvar rectShape = echarts.graphic.clipRectByRect({\nx: start[0],\ny: start[1] - height / 2,\nwidth: end[0] - start[0],\nheight: height\n}, {\nx: params.coordSys.x,\ny: params.coordSys.y,\nwidth: params.coordSys.width,\nheight: params.coordSys.height\n});\n\nreturn rectShape && {\ntype: 'rect',\nshape: rectShape,\nstyle: api.style()\n};\n},\ndata: data\n}]\n}\n```\n\n[renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) will be called on each data item.\n\n[renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) provides two parameters:\n+ [params](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.params): provides info about the current series and data and coordinate system.\n+ [api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api): includes some methods.\n\n[renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) method should returns graphic elements definitions.See [renderItem.return](https://echarts.apache.org/en/option.html#series-custom.renderItem.return).\n\nGenerally, the main process of [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem) is that retrieve value from data and convert them to graphic elements on the current coordinate system. Two methods in [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api) are always used in this procedure:\n+ [api.value(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.value) is used to retrieve value from data. For example, `api.value(0)` retrieve the value of the first dimension in the current data item.\n+ [api.coord(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.coord) is used to convert data to coordinate. For example, `var point = api.coord([api.value(0), api.value(1)])` converet the data to the point on the current coordinate system.\n\nSometimes [api.size(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.size) method is needed, which calculates the size on the coordinate system by a given data range.\n\nMoreover, [api.style(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.style) method can be used to set style. It provides not only the style settings specified in [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle), but also the result of visual mapping. This method can also be called like `api.style({fill: 'green', stroke: 'yellow'})` to override those style settings.\n\n\n\n\n\n<br>\n**Dimension mapping (by encode and dimension option)**\n\nIn most cases, [series.encode](https://echarts.apache.org/en/option.html#series-custom.encode) needs to be specified when using `custom series` series, which indicate the mapping of dimensions, and then echarts can render appropriate axis by the extent of those data.\n\n`encode.tooltip` and `encode.label` can also be specified to define the content of default `tooltip` and `label`.\n[series.dimensions](https://echarts.apache.org/en/option.html#series-custom.dimensions) can also be specified to defined names of each dimensions, which will be displayed in tooltip.\n\nFor example:\n```ts\nseries: {\ntype: 'custom',\nrenderItem: function () {\n...\n},\nencode: {\nx: [2, 4, 3],\ny: 1,\nlabel: 0,\ntooltip: [2, 4, 3]\n}\n}\n```\n\n<br>\n**Controlled by dataZoom**\n\nWhen use `custom series` with [dataZoom](https://echarts.apache.org/en/option.html#dataZoom), [dataZoom.filterMode](https://echarts.apache.org/en/option.html#dataZoom.filterMode) usually be set as `'weakFilter'`, which prevent `dataItem` from being filtered when only part of its dimensions are out of the current data window.\n\n\n<br>\n<br>\n**Difference between `dataIndex` and `dataIndexInside`**\n\n\n\n+ `dataIndex` is the index of a `dataItem` in the original data.\n+ `dataIndexInside` is the index of a `dataItem` in the current data window (see [dataZoom](https://echarts.apache.org/en/option.html#dataZoom).\n\n[renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api) uses `dataIndexInside` as the input parameter but not `dataIndex`, because conversion from `dataIndex` to `dataIndexInside` is time-consuming.\n\n\n\n<br>\n**Event listener**\n\n```ts\nchart.setOption({\n// ...\nseries: {\ntype: 'custom',\nrenderItem: function () {\n// ...\nreturn {\ntype: 'group',\nchildren: [{\ntype: 'circle'\n// ...\n}, {\ntype: 'circle',\nname: 'aaa',\n// User specified info, available\n// in event handler.\ninfo: 12345,\n// ...\n}]\n};\n}\n}\n});\nchart.on('click', {element: 'aaa'}, function (params) {\n// When the element with name 'aaa' clicked,\n// this method called.\nconsole.log(params.info);\n});\n```",
        "detailFileName": "series.custom",
        "required": [
            {
                "key": "type",
                "value": "'${0}'",
                "valueRegExp": "^['\"].*['\"]$"
            }
        ]
    }
]