[
    {
        "name": "id",
        "type": "string",
        "desc": "Component ID, not specified by default. If specified, it can be used to refer the component in option or API.",
        "children": []
    },
    {
        "name": "show",
        "type": "boolean",
        "default": "true",
        "desc": "Whether to show the geo component.",
        "children": []
    },
    {
        "name": "map",
        "type": "string",
        "default": "''",
        "desc": "Map name registered in [registerMap](api.html#echarts.registerMap).\n\n\n**Use geoJSON**\n```ts\n$.get('map/china_geo.json', function (chinaJson) {\necharts.registerMap('china', {geoJSON: geoJson});\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\ngeo: [{\nmap: 'china',\n...\n}]\n});\n});\n```\nSee also [geoJSON hexbin](custom-hexbin).\n\n\nThe demo above shows that ECharts can uses [geoJSON](http://geojson.org/) format as map outline. You can use third-party [geoJSON](http://geojson.org/) data (like [maps](https://github.com/echarts-maps)) and register them into ECharts.\n\n\n**Use SVG**\n```ts\n$.get('map/topographic_map.svg', function (svg) {\necharts.registerMap('topo', {svg: svg});\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\ngeo: [{\nmap: 'topo',\n...\n}]\n});\n});\n```\nSee also [Flight Seatmap](geo-seatmap-flight).\n\n\nThe demo above shows that SVG format can be used in ECharts. See more info in [SVG Base Map](tutorial.html#SVG%20Base%20Map%20in%20Geo%20Coords%20and%20Map%20Series).",
        "children": []
    },
    {
        "name": "roam",
        "type": "enum",
        "desc": "Whether to enable mouse zooming and translating. `false` by default. If either zooming or translating is wanted, it can be set to `'scale'` or `'move'`. Otherwise, set it to be `true` to enable both.",
        "children": [],
        "options": "true,false,'scale','move'"
    },
    {
        "name": "projection",
        "type": "Object",
        "desc": "> Since `v5.3.0`\n\n\n\nFor custom map projection, at least two methods `project`, `unproject` should be provided to calculate the coordinates after projection and before projection respectively.\n\nFor example, for the Mercator projection.\n\n```ts\nseries: {\ntype: 'map',\nprojection: {\nproject: (point) => [point[0] / 180 * Math.PI, -Math.log(Math.tan((Math.PI / 2 + point[1] / 180 * Math.PI) / 2))],\nunproject: (point) => [point[0] * 180 / Math.PI, 2 * 180 / Math.PI * Math.atan(Math.exp(point[1])) - 90]\n}\n}\n```\n\nIn addition to our own implementation of the projection formula, we can also use exists projection implementations provided by third-party libraries such as [d3-geo](https://github.com/d3/d3-geo).\n\n```ts\nconst projection = d3.geoConicEqualArea();\n// ...\nseries: {\ntype: 'map',\nprojection: {\nproject: (point) => projection(point),\nunproject: (point) => projection.invert(point)\n}\n}\n\n```\n\nNote: Custom projections are only useful when using `GeoJSON` as a data source.",
        "children": [
            {
                "name": "project",
                "type": "Function",
                "desc": "```ts\n(coord: [number, number]) => [number, number]\n```\n\nProjection of latitude and longitude coordinates to other coordinates.",
                "children": []
            },
            {
                "name": "unproject",
                "type": "Function",
                "desc": "```ts\n(point: [number, number]) => [number, number]\n```\n\nCalculate the raw latitude and longitude coordinates from the projected coordinates",
                "children": []
            },
            {
                "name": "stream",
                "type": "Function",
                "desc": "This property is mainly used to adapt the [stream](https://github.com/d3/d3-geo#streams) interface used in [d3-geo](https://github.com/d3/d3-geo). After introducing stream, you can introduce both the [Antimeridian Clipping](https://bl.ocks.org/mbostock/3788999) and [Adaptive Sampling](https://bl.ocks.org/mbostock/3795544) algorithms implemented in [d3-geo](https://bl.ocks.org/mbostock/3795544).\n\n```ts\nconst projection = d3.geoProjection((x, y) => ([x, y / 0.75]))\n.rotate([-115, 0]);\n// ...\nseries: {\ntype: 'map',\nprojection: {\n// We still need project and unproject when stream is provided.\nproject: (point) => projection(point),\nunproject: (point) => projection.invert(point),\n// We can directly use the stream method in d3 projection.\nstream: projection.stream\n}\n}\n```\n\nNote: `stream` is not required in the `projection`.",
                "children": []
            }
        ]
    },
    {
        "name": "center",
        "type": "Array",
        "desc": "Center of current view-port, in longitude and latitude by default. Use the projected coordinates if `projection` is set.\n\nExample:\n\n```ts\ncenter: [115.97, 29.71]\n```\n\n```ts\nprojection: {\nprojection: (pt) => project(pt)\n},\ncenter: project([115.97, 29.71])\n```",
        "children": []
    },
    {
        "name": "aspectScale",
        "type": "number",
        "default": "0.75",
        "desc": "Used to scale aspect of geo. Will be ignored if `projection` is set.\n\nThe final aspect is calculated by: `geoBoundingRect.width / geoBoundingRect.height * aspectScale`.",
        "children": []
    },
    {
        "name": "boundingCoords",
        "type": "Array",
        "default": "null",
        "desc": "Two dimension array. Define coord of left-top, right-bottom in layout box.\n\n```ts\n// A complete world map\nmap: 'world',\nleft: 0, top: 0, right: 0, bottom: 0,\nboundingCoords: [\n// [lng, lat] of left-top corner\n[-180, 90],\n// [lng, lat] of right-bottom corner\n[180, -90]\n],\n```",
        "children": []
    },
    {
        "name": "zoom",
        "type": "number",
        "default": "1",
        "desc": "Zoom rate of current view-port.",
        "children": []
    },
    {
        "name": "scaleLimit",
        "type": "Object",
        "desc": "Limit of scaling, with `min` and `max`. `1` by default.",
        "children": [
            {
                "name": "min",
                "type": "number",
                "desc": "Minimum scaling",
                "children": []
            },
            {
                "name": "max",
                "type": "number",
                "desc": "Maximum scaling",
                "children": []
            }
        ]
    },
    {
        "name": "nameMap",
        "type": "Object",
        "desc": "Name mapping for customized areas. For example:\n```ts\n{\n'China' : '中国'\n}\n```",
        "children": []
    },
    {
        "name": "nameProperty",
        "type": "string",
        "default": "'name'",
        "desc": "> Since `v4.8.0`\n\n\n\ncustomized property key for GeoJSON feature. By default, 'name' is used as primary key to identify GeoJSON feature.\nFor example:\n```ts\n{\nnameProperty: 'NAME', // key to connect following data point to GeoJSON region {\"type\":\"Feature\",\"id\":\"01\",\"properties\":{\"NAME\":\"Alabama\"}, \"geometry\": { ... }}\ndata:[\n{name: 'Alabama', value: 4822023},\n{name: 'Alaska', value: 731449},\n]\n}\n```",
        "children": []
    },
    {
        "name": "selectedMode",
        "type": [
            "boolean",
            "string"
        ],
        "default": "false",
        "desc": "Selected mode decides whether multiple selecting is supported. By default, `false` is used for disabling selection. Its value can also be `'single'` for selecting single area, or `'multiple'` for selecting multiple areas.",
        "children": []
    },
    {
        "name": "label",
        "type": "Object",
        "desc": "Text label of , to explain some data information about graphic item like value, name and so on. `label` is placed under `itemStyle` in ECharts 2.x. In ECharts 3, to make the configuration structure flatter, `label`is taken to be at the same level with `itemStyle`, and has `emphasis` as `itemStyle` does.",
        "children": [
            {
                "name": "show",
                "type": "boolean",
                "default": "false",
                "desc": "Whether to show label.",
                "children": []
            },
            {
                "name": "position",
                "type": "enum",
                "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                "children": [],
                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
            },
            {
                "name": "distance",
                "type": "number",
                "default": "5",
                "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "rotate",
                "type": "angle",
                "default": "0",
                "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                "children": [],
                "min": "-90",
                "max": "90",
                "step": "1"
            },
            {
                "name": "offset",
                "type": "vector",
                "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                "children": [],
                "dims": "x,y",
                "step": "0.5"
            },
            {
                "name": "formatter",
                "type": [
                    "string",
                    "Function"
                ],
                "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                "children": []
            },
            {
                "name": "color",
                "type": "color",
                "default": "'#fff'",
                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                "children": []
            },
            {
                "name": "fontStyle",
                "type": "enum",
                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                "children": [],
                "options": "'normal','italic','oblique'"
            },
            {
                "name": "fontWeight",
                "type": "enum",
                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                "children": [],
                "options": "'normal','bold','bolder','lighter'"
            },
            {
                "name": "fontFamily",
                "type": "enum",
                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                "children": [],
                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
            },
            {
                "name": "fontSize",
                "type": "number",
                "default": "12",
                "desc": "font size.",
                "children": [],
                "min": "1",
                "step": "1"
            },
            {
                "name": "align",
                "type": "enum",
                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                "children": [],
                "options": "'left','center','right'"
            },
            {
                "name": "verticalAlign",
                "type": "enum",
                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                "children": [],
                "options": "'top','middle','bottom'"
            },
            {
                "name": "lineHeight",
                "type": "number",
                "default": "12",
                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                "children": [],
                "min": "0",
                "step": "1"
            },
            {
                "name": "backgroundColor",
                "type": "color",
                "default": "'transparent'",
                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "color",
                "default": "'#fff'",
                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "Border width of the text fragment.",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "borderType",
                "type": "enum",
                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                "children": [],
                "options": "'solid','dashed','dotted'"
            },
            {
                "name": "borderDashOffset",
                "type": "number",
                "default": "0",
                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                "children": [],
                "min": "0",
                "step": "1"
            },
            {
                "name": "borderRadius",
                "type": "vector",
                "default": "0",
                "desc": "Border radius of the text fragment.",
                "children": [],
                "min": "0",
                "dims": "LT,RT, RB, LB"
            },
            {
                "name": "padding",
                "type": "vector",
                "default": "0",
                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                "children": [],
                "min": "0",
                "dims": "T,R,B,L"
            },
            {
                "name": "shadowColor",
                "type": "color",
                "default": "'transparent'",
                "desc": "Shadow color of the text block.",
                "children": []
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "default": "0",
                "desc": "Show blur of the text block.",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "Shadow X offset of the text block.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "Shadow Y offset of the text block.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "width",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                "children": []
            },
            {
                "name": "height",
                "type": [
                    "number",
                    "string"
                ],
                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                "children": []
            },
            {
                "name": "textBorderColor",
                "type": "color",
                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                "children": []
            },
            {
                "name": "textBorderWidth",
                "type": "number",
                "desc": "Stroke line width of the text.",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "textBorderType",
                "type": "enum",
                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                "children": [],
                "options": "'solid','dashed','dotted'"
            },
            {
                "name": "textBorderDashOffset",
                "type": "number",
                "default": "0",
                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                "children": [],
                "min": "0",
                "step": "1"
            },
            {
                "name": "textShadowColor",
                "type": "color",
                "default": "'transparent'",
                "desc": "Shadow color of the text itself.",
                "children": []
            },
            {
                "name": "textShadowBlur",
                "type": "number",
                "default": "0",
                "desc": "Shadow blue of the text itself.",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "textShadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "Shadow X offset of the text itself.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "textShadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "Shadow Y offset of the text itself.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "width",
                "type": "number",
                "default": "100",
                "desc": "Width of text block.",
                "children": [],
                "min": "1",
                "max": "500",
                "step": "1"
            },
            {
                "name": "height",
                "type": "number",
                "default": "50",
                "desc": "Height of text block.",
                "children": [],
                "min": "1",
                "max": "500",
                "step": "1"
            },
            {
                "name": "overflow",
                "type": "enum",
                "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                "children": [],
                "options": "'truncate','break','breakAll'"
            },
            {
                "name": "ellipsis",
                "type": "string",
                "default": "'...'",
                "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                "children": []
            },
            {
                "name": "rich",
                "type": "Object",
                "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                "children": [
                    {
                        "name": "<style_name>",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "color",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "fontStyle",
                                "type": "enum",
                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                "children": [],
                                "options": "'normal','italic','oblique'"
                            },
                            {
                                "name": "fontWeight",
                                "type": "enum",
                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                "children": [],
                                "options": "'normal','bold','bolder','lighter'"
                            },
                            {
                                "name": "fontFamily",
                                "type": "enum",
                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                "children": [],
                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                            },
                            {
                                "name": "fontSize",
                                "type": "number",
                                "default": "12",
                                "desc": "font size.",
                                "children": [],
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "verticalAlign",
                                "type": "enum",
                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'top','middle','bottom'"
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "default": "12",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "backgroundColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Border width of the text fragment.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderRadius",
                                "type": "vector",
                                "default": "0",
                                "desc": "Border radius of the text fragment.",
                                "children": [],
                                "min": "0",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "padding",
                                "type": "vector",
                                "default": "0",
                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                "children": [],
                                "min": "0",
                                "dims": "T,R,B,L"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text block.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Show blur of the text block.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "textBorderColor",
                                "type": "color",
                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "textBorderWidth",
                                "type": "number",
                                "desc": "Stroke line width of the text.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textBorderType",
                                "type": "enum",
                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "textBorderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "textShadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text itself.",
                                "children": []
                            },
                            {
                                "name": "textShadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow blue of the text itself.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name": "itemStyle",
        "type": "Object",
        "desc": "Graphic style of Map Area Border, `emphasis` is the style when it is highlighted, like being hovered by mouse, or highlighted via legend connect.",
        "children": [
            {
                "name": "areaColor",
                "type": "Color",
                "default": "'#eee'",
                "desc": "Area filling color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                "children": []
            },
            {
                "name": "color",
                "type": "color",
                "default": "null",
                "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "color",
                "default": "'#000'",
                "desc": "border color, whose format is similar to that of `color`.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "borderType",
                "type": "enum",
                "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                "children": [],
                "options": "'solid','dashed','dotted'"
            },
            {
                "name": "borderDashOffset",
                "type": "number",
                "default": "0",
                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                "children": [],
                "min": "0",
                "step": "1"
            },
            {
                "name": "borderCap",
                "type": "enum",
                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                "children": [],
                "options": "'butt','round','square'"
            },
            {
                "name": "borderJoin",
                "type": "enum",
                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                "children": [],
                "options": "'bevel','round','miter'"
            },
            {
                "name": "borderMiterLimit",
                "type": "number",
                "default": "10",
                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                "children": [],
                "min": "0",
                "step": "1"
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "default": "",
                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                "children": [],
                "min": "0",
                "step": "0.5"
            },
            {
                "name": "shadowColor",
                "type": "color",
                "default": "",
                "desc": "Shadow color. Support same format as `color`.",
                "children": []
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "default": "0",
                "desc": "Offset distance on the horizontal direction of shadow.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "default": "0",
                "desc": "Offset distance on the vertical direction of shadow.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "opacity",
                "type": "number",
                "default": "1",
                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                "children": [],
                "min": "0",
                "max": "1",
                "step": "0.01"
            }
        ]
    },
    {
        "name": "emphasis",
        "type": "Object",
        "desc": "Map area style in highlighted state.",
        "children": [
            {
                "name": "disabled",
                "type": "boolean",
                "default": "false",
                "desc": "> Since `v5.3.0`\n\n\n\nWhether to disable the emphasis state.\n\nWhen emphasis state is disabled. There will be no highlight effect when the mouse hovered the element, tooltip is triggered, or the legend is hovered. It can be used to improve interaction fluency when there are massive graphic elements.",
                "children": []
            },
            {
                "name": "focus",
                "type": "string",
                "default": "'none'",
                "desc": "> Since `v5.1.0`\n\n\n\n\nWhen the data is highlighted, whether to fade out of other data to focus the highlighted. The following configurations are supported:\n\n+ `'none'` Do not fade out other data, it's by default.\n+ `'self'` Only focus (not fade out) the element of the currently highlighted data.\n\n\n\n\n\n\n\n**Example: **\n\n\n```ts\nemphasis: {\nfocus: 'self'\n}\n```\n\n~[600x400](geo-organ&reset=1&edit=1)",
                "children": []
            },
            {
                "name": "label",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether to show label.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rotate",
                        "type": "angle",
                        "default": "0",
                        "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                        "children": [],
                        "min": "-90",
                        "max": "90",
                        "step": "1"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "fontStyle",
                        "type": "enum",
                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                        "children": [],
                        "options": "'normal','italic','oblique'"
                    },
                    {
                        "name": "fontWeight",
                        "type": "enum",
                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                        "children": [],
                        "options": "'normal','bold','bolder','lighter'"
                    },
                    {
                        "name": "fontFamily",
                        "type": "enum",
                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                        "children": [],
                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                    },
                    {
                        "name": "fontSize",
                        "type": "number",
                        "default": "12",
                        "desc": "font size.",
                        "children": [],
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "verticalAlign",
                        "type": "enum",
                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'top','middle','bottom'"
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "default": "12",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "backgroundColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "Border width of the text fragment.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderRadius",
                        "type": "vector",
                        "default": "0",
                        "desc": "Border radius of the text fragment.",
                        "children": [],
                        "min": "0",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "padding",
                        "type": "vector",
                        "default": "0",
                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                        "children": [],
                        "min": "0",
                        "dims": "T,R,B,L"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text block.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Show blur of the text block.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "textBorderColor",
                        "type": "color",
                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "textBorderWidth",
                        "type": "number",
                        "desc": "Stroke line width of the text.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textBorderType",
                        "type": "enum",
                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "textBorderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "textShadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text itself.",
                        "children": []
                    },
                    {
                        "name": "textShadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow blue of the text itself.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "100",
                        "desc": "Width of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "50",
                        "desc": "Height of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "overflow",
                        "type": "enum",
                        "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                        "children": [],
                        "options": "'truncate','break','breakAll'"
                    },
                    {
                        "name": "ellipsis",
                        "type": "string",
                        "default": "'...'",
                        "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                        "children": []
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "Object",
                                "desc": "",
                                "children": [
                                    {
                                        "name": "color",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "fontStyle",
                                        "type": "enum",
                                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                        "children": [],
                                        "options": "'normal','italic','oblique'"
                                    },
                                    {
                                        "name": "fontWeight",
                                        "type": "enum",
                                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                        "children": [],
                                        "options": "'normal','bold','bolder','lighter'"
                                    },
                                    {
                                        "name": "fontFamily",
                                        "type": "enum",
                                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                        "children": [],
                                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                    },
                                    {
                                        "name": "fontSize",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "font size.",
                                        "children": [],
                                        "min": "1",
                                        "step": "1"
                                    },
                                    {
                                        "name": "align",
                                        "type": "enum",
                                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'left','center','right'"
                                    },
                                    {
                                        "name": "verticalAlign",
                                        "type": "enum",
                                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'top','middle','bottom'"
                                    },
                                    {
                                        "name": "lineHeight",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "backgroundColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderColor",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderWidth",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Border width of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "borderType",
                                        "type": "enum",
                                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "borderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "borderRadius",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Border radius of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "padding",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "T,R,B,L"
                                    },
                                    {
                                        "name": "shadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text block.",
                                        "children": []
                                    },
                                    {
                                        "name": "shadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Show blur of the text block.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderColor",
                                        "type": "color",
                                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderWidth",
                                        "type": "number",
                                        "desc": "Stroke line width of the text.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textBorderType",
                                        "type": "enum",
                                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "textBorderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "textShadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text itself.",
                                        "children": []
                                    },
                                    {
                                        "name": "textShadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow blue of the text itself.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "areaColor",
                        "type": "Color",
                        "default": "'#eee'",
                        "desc": "The color of the map area.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "null",
                        "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#000'",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderCap",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                        "children": [],
                        "options": "'butt','round','square'"
                    },
                    {
                        "name": "borderJoin",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                        "children": [],
                        "options": "'bevel','round','miter'"
                    },
                    {
                        "name": "borderMiterLimit",
                        "type": "number",
                        "default": "10",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            }
        ]
    },
    {
        "name": "select",
        "type": "Object",
        "desc": "Map area style in selected state.",
        "children": [
            {
                "name": "disabled",
                "type": "boolean",
                "default": "false",
                "desc": "> Since `v5.3.0`\n\n\n\nIf data can be selected. Available when `selectedMode` is used. Can be used to disable selection for part of the data.",
                "children": []
            },
            {
                "name": "label",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether to show label.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rotate",
                        "type": "angle",
                        "default": "0",
                        "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                        "children": [],
                        "min": "-90",
                        "max": "90",
                        "step": "1"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "fontStyle",
                        "type": "enum",
                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                        "children": [],
                        "options": "'normal','italic','oblique'"
                    },
                    {
                        "name": "fontWeight",
                        "type": "enum",
                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                        "children": [],
                        "options": "'normal','bold','bolder','lighter'"
                    },
                    {
                        "name": "fontFamily",
                        "type": "enum",
                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                        "children": [],
                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                    },
                    {
                        "name": "fontSize",
                        "type": "number",
                        "default": "12",
                        "desc": "font size.",
                        "children": [],
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "verticalAlign",
                        "type": "enum",
                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'top','middle','bottom'"
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "default": "12",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "backgroundColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "Border width of the text fragment.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderRadius",
                        "type": "vector",
                        "default": "0",
                        "desc": "Border radius of the text fragment.",
                        "children": [],
                        "min": "0",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "padding",
                        "type": "vector",
                        "default": "0",
                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                        "children": [],
                        "min": "0",
                        "dims": "T,R,B,L"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text block.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Show blur of the text block.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "textBorderColor",
                        "type": "color",
                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "textBorderWidth",
                        "type": "number",
                        "desc": "Stroke line width of the text.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textBorderType",
                        "type": "enum",
                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "textBorderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "textShadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text itself.",
                        "children": []
                    },
                    {
                        "name": "textShadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow blue of the text itself.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "100",
                        "desc": "Width of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "50",
                        "desc": "Height of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "overflow",
                        "type": "enum",
                        "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                        "children": [],
                        "options": "'truncate','break','breakAll'"
                    },
                    {
                        "name": "ellipsis",
                        "type": "string",
                        "default": "'...'",
                        "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                        "children": []
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "Object",
                                "desc": "",
                                "children": [
                                    {
                                        "name": "color",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "fontStyle",
                                        "type": "enum",
                                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                        "children": [],
                                        "options": "'normal','italic','oblique'"
                                    },
                                    {
                                        "name": "fontWeight",
                                        "type": "enum",
                                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                        "children": [],
                                        "options": "'normal','bold','bolder','lighter'"
                                    },
                                    {
                                        "name": "fontFamily",
                                        "type": "enum",
                                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                        "children": [],
                                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                    },
                                    {
                                        "name": "fontSize",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "font size.",
                                        "children": [],
                                        "min": "1",
                                        "step": "1"
                                    },
                                    {
                                        "name": "align",
                                        "type": "enum",
                                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'left','center','right'"
                                    },
                                    {
                                        "name": "verticalAlign",
                                        "type": "enum",
                                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'top','middle','bottom'"
                                    },
                                    {
                                        "name": "lineHeight",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "backgroundColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderColor",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderWidth",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Border width of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "borderType",
                                        "type": "enum",
                                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "borderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "borderRadius",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Border radius of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "padding",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "T,R,B,L"
                                    },
                                    {
                                        "name": "shadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text block.",
                                        "children": []
                                    },
                                    {
                                        "name": "shadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Show blur of the text block.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderColor",
                                        "type": "color",
                                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderWidth",
                                        "type": "number",
                                        "desc": "Stroke line width of the text.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textBorderType",
                                        "type": "enum",
                                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "textBorderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "textShadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text itself.",
                                        "children": []
                                    },
                                    {
                                        "name": "textShadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow blue of the text itself.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "areaColor",
                        "type": "Color",
                        "default": "'#eee'",
                        "desc": "The color of the map area.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "null",
                        "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#000'",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderCap",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                        "children": [],
                        "options": "'butt','round','square'"
                    },
                    {
                        "name": "borderJoin",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                        "children": [],
                        "options": "'bevel','round','miter'"
                    },
                    {
                        "name": "borderMiterLimit",
                        "type": "number",
                        "default": "10",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            }
        ]
    },
    {
        "name": "blur",
        "type": "Object",
        "desc": "> Since `v5.1.0`\n\n\n\nMap area style in blurred state.",
        "children": [
            {
                "name": "label",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether to show label.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rotate",
                        "type": "angle",
                        "default": "0",
                        "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                        "children": [],
                        "min": "-90",
                        "max": "90",
                        "step": "1"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "fontStyle",
                        "type": "enum",
                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                        "children": [],
                        "options": "'normal','italic','oblique'"
                    },
                    {
                        "name": "fontWeight",
                        "type": "enum",
                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                        "children": [],
                        "options": "'normal','bold','bolder','lighter'"
                    },
                    {
                        "name": "fontFamily",
                        "type": "enum",
                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                        "children": [],
                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                    },
                    {
                        "name": "fontSize",
                        "type": "number",
                        "default": "12",
                        "desc": "font size.",
                        "children": [],
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "verticalAlign",
                        "type": "enum",
                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'top','middle','bottom'"
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "default": "12",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "backgroundColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "Border width of the text fragment.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderRadius",
                        "type": "vector",
                        "default": "0",
                        "desc": "Border radius of the text fragment.",
                        "children": [],
                        "min": "0",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "padding",
                        "type": "vector",
                        "default": "0",
                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                        "children": [],
                        "min": "0",
                        "dims": "T,R,B,L"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text block.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Show blur of the text block.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "textBorderColor",
                        "type": "color",
                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "textBorderWidth",
                        "type": "number",
                        "desc": "Stroke line width of the text.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textBorderType",
                        "type": "enum",
                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "textBorderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "textShadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text itself.",
                        "children": []
                    },
                    {
                        "name": "textShadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow blue of the text itself.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "100",
                        "desc": "Width of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "50",
                        "desc": "Height of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "overflow",
                        "type": "enum",
                        "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                        "children": [],
                        "options": "'truncate','break','breakAll'"
                    },
                    {
                        "name": "ellipsis",
                        "type": "string",
                        "default": "'...'",
                        "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                        "children": []
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "Object",
                                "desc": "",
                                "children": [
                                    {
                                        "name": "color",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "fontStyle",
                                        "type": "enum",
                                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                        "children": [],
                                        "options": "'normal','italic','oblique'"
                                    },
                                    {
                                        "name": "fontWeight",
                                        "type": "enum",
                                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                        "children": [],
                                        "options": "'normal','bold','bolder','lighter'"
                                    },
                                    {
                                        "name": "fontFamily",
                                        "type": "enum",
                                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                        "children": [],
                                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                    },
                                    {
                                        "name": "fontSize",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "font size.",
                                        "children": [],
                                        "min": "1",
                                        "step": "1"
                                    },
                                    {
                                        "name": "align",
                                        "type": "enum",
                                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'left','center','right'"
                                    },
                                    {
                                        "name": "verticalAlign",
                                        "type": "enum",
                                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'top','middle','bottom'"
                                    },
                                    {
                                        "name": "lineHeight",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "backgroundColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderColor",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderWidth",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Border width of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "borderType",
                                        "type": "enum",
                                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "borderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "borderRadius",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Border radius of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "padding",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "T,R,B,L"
                                    },
                                    {
                                        "name": "shadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text block.",
                                        "children": []
                                    },
                                    {
                                        "name": "shadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Show blur of the text block.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderColor",
                                        "type": "color",
                                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderWidth",
                                        "type": "number",
                                        "desc": "Stroke line width of the text.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textBorderType",
                                        "type": "enum",
                                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "textBorderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "textShadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text itself.",
                                        "children": []
                                    },
                                    {
                                        "name": "textShadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow blue of the text itself.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "",
                "children": [
                    {
                        "name": "areaColor",
                        "type": "Color",
                        "default": "'#eee'",
                        "desc": "The color of the map area.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "null",
                        "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#000'",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderCap",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                        "children": [],
                        "options": "'butt','round','square'"
                    },
                    {
                        "name": "borderJoin",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                        "children": [],
                        "options": "'bevel','round','miter'"
                    },
                    {
                        "name": "borderMiterLimit",
                        "type": "number",
                        "default": "10",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            }
        ]
    },
    {
        "name": "zlevel",
        "type": "number",
        "default": "0",
        "desc": "`zlevel` value of all graphical elements in .\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.",
        "children": []
    },
    {
        "name": "z",
        "type": "number",
        "default": "2",
        "desc": "`z` value of all graphical elements in , which controls order of drawing graphical components. Components with smaller `z` values may be overwritten by those with larger `z` values.\n\n`z` has a lower priority to `zlevel`, and will not create new Canvas.",
        "children": []
    },
    {
        "name": "left",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the left side of the container.\n\n`left` can be a pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'left'`, `'center'`, or `'right'`.\n\nIf the `left` value is set to be `'left'`, `'center'`, or `'right'`, then the component will be aligned automatically based on position.",
        "children": []
    },
    {
        "name": "top",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the top side of the container.\n\n`top` can be a pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'top'`, `'middle'`, or `'bottom'`.\n\nIf the `top` value is set to be `'top'`, `'middle'`, or `'bottom'`, then the component will be aligned automatically based on position.",
        "children": []
    },
    {
        "name": "right",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the right side of the container.\n\n`right` can be a pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\nAdaptive by default.",
        "children": []
    },
    {
        "name": "bottom",
        "type": [
            "string",
            "number"
        ],
        "default": "'auto'",
        "desc": "Distance between  component and the bottom side of the container.\n\n`bottom` can be a pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\nAdaptive by default.",
        "children": []
    },
    {
        "name": "layoutCenter",
        "type": "Array",
        "default": "null",
        "desc": "`layoutCenter` and `layoutSize` provides layout strategy other than `left/right/top/bottom/width/height`.\n\nWhen using `left/right/top/bottom/width/height`, it is hard to put the map inside a box area with a fixed width-height ratio. In this case, `layoutCenter` attribute can be used to define the center position of map, and `layoutSize` can be used to define the size of map. For example:\n\n```ts\nlayoutCenter: ['30%', '30%'],\n// If width-height ratio is larger than 1, then width is set to be 100.\n// Otherwise, height is set to be 100.\n// This makes sure that it will not exceed the area of 100x100\nlayoutSize: 100\n```\n\nAfter setting these two values, `left/right/top/bottom/width/height` becomes invalid.",
        "children": []
    },
    {
        "name": "layoutSize",
        "type": [
            "number",
            "string"
        ],
        "desc": "Size of map, see `layoutCenter` for more information. Percentage relative to screen width, and absolute pixel values are supported.",
        "children": []
    },
    {
        "name": "regions",
        "type": "Array",
        "desc": "Configure style for specified regions.\nFor example:\n```ts\nregions: [{\nname: 'Guangdong',\nitemStyle: {\nareaColor: 'red',\ncolor: 'red'\n}\n}]\n```\n\nThe region color can also be controlled by map series. See [series-map.geoIndex](https://echarts.apache.org/en/option.html#series-map.geoIndex).",
        "children": [
            {
                "name": "name",
                "type": "string",
                "desc": "Name of area in map, like `'Guangdong'`, or `'Zhejiang'`.",
                "children": []
            },
            {
                "name": "selected",
                "type": "boolean",
                "default": "false",
                "desc": "Whether this area is selected.",
                "children": []
            },
            {
                "name": "itemStyle",
                "type": "Object",
                "desc": "Item style of this area.",
                "children": [
                    {
                        "name": "areaColor",
                        "type": "Color",
                        "desc": "Area color in the map.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "null",
                        "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#000'",
                        "desc": "border color, whose format is similar to that of `color`.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderCap",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                        "children": [],
                        "options": "'butt','round','square'"
                    },
                    {
                        "name": "borderJoin",
                        "type": "enum",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                        "children": [],
                        "options": "'bevel','round','miter'"
                    },
                    {
                        "name": "borderMiterLimit",
                        "type": "number",
                        "default": "10",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "",
                        "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "",
                        "desc": "Shadow color. Support same format as `color`.",
                        "children": []
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the horizontal direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Offset distance on the vertical direction of shadow.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "opacity",
                        "type": "number",
                        "default": "1",
                        "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                        "children": [],
                        "min": "0",
                        "max": "1",
                        "step": "0.01"
                    }
                ]
            },
            {
                "name": "label",
                "type": "Object",
                "desc": "Text label of , to explain some data information about graphic item like value, name and so on. `label` is placed under `itemStyle` in ECharts 2.x. In ECharts 3, to make the configuration structure flatter, `label`is taken to be at the same level with `itemStyle`, and has `emphasis` as `itemStyle` does.",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "false",
                        "desc": "Whether to show label.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": "enum",
                        "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                    },
                    {
                        "name": "distance",
                        "type": "number",
                        "default": "5",
                        "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "rotate",
                        "type": "angle",
                        "default": "0",
                        "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                        "children": [],
                        "min": "-90",
                        "max": "90",
                        "step": "1"
                    },
                    {
                        "name": "offset",
                        "type": "vector",
                        "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                        "children": [],
                        "dims": "x,y",
                        "step": "0.5"
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                        "children": []
                    },
                    {
                        "name": "color",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "fontStyle",
                        "type": "enum",
                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                        "children": [],
                        "options": "'normal','italic','oblique'"
                    },
                    {
                        "name": "fontWeight",
                        "type": "enum",
                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                        "children": [],
                        "options": "'normal','bold','bolder','lighter'"
                    },
                    {
                        "name": "fontFamily",
                        "type": "enum",
                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                        "children": [],
                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                    },
                    {
                        "name": "fontSize",
                        "type": "number",
                        "default": "12",
                        "desc": "font size.",
                        "children": [],
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "align",
                        "type": "enum",
                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                        "children": [],
                        "options": "'left','center','right'"
                    },
                    {
                        "name": "verticalAlign",
                        "type": "enum",
                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                        "children": [],
                        "options": "'top','middle','bottom'"
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "default": "12",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "backgroundColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "Border width of the text fragment.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "borderType",
                        "type": "enum",
                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "borderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "borderRadius",
                        "type": "vector",
                        "default": "0",
                        "desc": "Border radius of the text fragment.",
                        "children": [],
                        "min": "0",
                        "dims": "LT,RT, RB, LB"
                    },
                    {
                        "name": "padding",
                        "type": "vector",
                        "default": "0",
                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                        "children": [],
                        "min": "0",
                        "dims": "T,R,B,L"
                    },
                    {
                        "name": "shadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text block.",
                        "children": []
                    },
                    {
                        "name": "shadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Show blur of the text block.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "shadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text block.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "textBorderColor",
                        "type": "color",
                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                        "children": []
                    },
                    {
                        "name": "textBorderWidth",
                        "type": "number",
                        "desc": "Stroke line width of the text.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textBorderType",
                        "type": "enum",
                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "textBorderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "textShadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text itself.",
                        "children": []
                    },
                    {
                        "name": "textShadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow blue of the text itself.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "100",
                        "desc": "Width of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "50",
                        "desc": "Height of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "overflow",
                        "type": "enum",
                        "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                        "children": [],
                        "options": "'truncate','break','breakAll'"
                    },
                    {
                        "name": "ellipsis",
                        "type": "string",
                        "default": "'...'",
                        "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                        "children": []
                    },
                    {
                        "name": "rich",
                        "type": "Object",
                        "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                        "children": [
                            {
                                "name": "<style_name>",
                                "type": "Object",
                                "desc": "",
                                "children": [
                                    {
                                        "name": "color",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "fontStyle",
                                        "type": "enum",
                                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                        "children": [],
                                        "options": "'normal','italic','oblique'"
                                    },
                                    {
                                        "name": "fontWeight",
                                        "type": "enum",
                                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                        "children": [],
                                        "options": "'normal','bold','bolder','lighter'"
                                    },
                                    {
                                        "name": "fontFamily",
                                        "type": "enum",
                                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                        "children": [],
                                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                    },
                                    {
                                        "name": "fontSize",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "font size.",
                                        "children": [],
                                        "min": "1",
                                        "step": "1"
                                    },
                                    {
                                        "name": "align",
                                        "type": "enum",
                                        "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'left','center','right'"
                                    },
                                    {
                                        "name": "verticalAlign",
                                        "type": "enum",
                                        "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                        "children": [],
                                        "options": "'top','middle','bottom'"
                                    },
                                    {
                                        "name": "lineHeight",
                                        "type": "number",
                                        "default": "12",
                                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "backgroundColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderColor",
                                        "type": "color",
                                        "default": "'#fff'",
                                        "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "borderWidth",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Border width of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "borderType",
                                        "type": "enum",
                                        "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "borderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "borderRadius",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Border radius of the text fragment.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "LT,RT, RB, LB"
                                    },
                                    {
                                        "name": "padding",
                                        "type": "vector",
                                        "default": "0",
                                        "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                        "children": [],
                                        "min": "0",
                                        "dims": "T,R,B,L"
                                    },
                                    {
                                        "name": "shadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text block.",
                                        "children": []
                                    },
                                    {
                                        "name": "shadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Show blur of the text block.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "shadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text block.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "width",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "height",
                                        "type": [
                                            "number",
                                            "string"
                                        ],
                                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderColor",
                                        "type": "color",
                                        "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                        "children": []
                                    },
                                    {
                                        "name": "textBorderWidth",
                                        "type": "number",
                                        "desc": "Stroke line width of the text.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textBorderType",
                                        "type": "enum",
                                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                        "children": [],
                                        "options": "'solid','dashed','dotted'"
                                    },
                                    {
                                        "name": "textBorderDashOffset",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                        "children": [],
                                        "min": "0",
                                        "step": "1"
                                    },
                                    {
                                        "name": "textShadowColor",
                                        "type": "color",
                                        "default": "'transparent'",
                                        "desc": "Shadow color of the text itself.",
                                        "children": []
                                    },
                                    {
                                        "name": "textShadowBlur",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow blue of the text itself.",
                                        "children": [],
                                        "min": "0",
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetX",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow X offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    },
                                    {
                                        "name": "textShadowOffsetY",
                                        "type": "number",
                                        "default": "0",
                                        "desc": "Shadow Y offset of the text itself.",
                                        "children": [],
                                        "step": "0.5"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "emphasis",
                "type": "Object",
                "desc": "Style of emphasis region.",
                "children": [
                    {
                        "name": "itemStyle",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "areaColor",
                                "type": "Color",
                                "desc": "The color of the map area.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "null",
                                "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#000'",
                                "desc": "border color, whose format is similar to that of `color`.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderCap",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                                "children": [],
                                "options": "'butt','round','square'"
                            },
                            {
                                "name": "borderJoin",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                                "children": [],
                                "options": "'bevel','round','miter'"
                            },
                            {
                                "name": "borderMiterLimit",
                                "type": "number",
                                "default": "10",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    },
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether to show label.",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rotate",
                                "type": "angle",
                                "default": "0",
                                "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                                "children": [],
                                "min": "-90",
                                "max": "90",
                                "step": "1"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": [
                                    "string",
                                    "Function"
                                ],
                                "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "fontStyle",
                                "type": "enum",
                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                "children": [],
                                "options": "'normal','italic','oblique'"
                            },
                            {
                                "name": "fontWeight",
                                "type": "enum",
                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                "children": [],
                                "options": "'normal','bold','bolder','lighter'"
                            },
                            {
                                "name": "fontFamily",
                                "type": "enum",
                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                "children": [],
                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                            },
                            {
                                "name": "fontSize",
                                "type": "number",
                                "default": "12",
                                "desc": "font size.",
                                "children": [],
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "verticalAlign",
                                "type": "enum",
                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'top','middle','bottom'"
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "default": "12",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "backgroundColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Border width of the text fragment.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderRadius",
                                "type": "vector",
                                "default": "0",
                                "desc": "Border radius of the text fragment.",
                                "children": [],
                                "min": "0",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "padding",
                                "type": "vector",
                                "default": "0",
                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                "children": [],
                                "min": "0",
                                "dims": "T,R,B,L"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text block.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Show blur of the text block.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "textBorderColor",
                                "type": "color",
                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "textBorderWidth",
                                "type": "number",
                                "desc": "Stroke line width of the text.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textBorderType",
                                "type": "enum",
                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "textBorderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "textShadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text itself.",
                                "children": []
                            },
                            {
                                "name": "textShadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow blue of the text itself.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "100",
                                "desc": "Width of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "default": "50",
                                "desc": "Height of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "overflow",
                                "type": "enum",
                                "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                                "children": [],
                                "options": "'truncate','break','breakAll'"
                            },
                            {
                                "name": "ellipsis",
                                "type": "string",
                                "default": "'...'",
                                "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                                "children": []
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "Object",
                                        "desc": "",
                                        "children": [
                                            {
                                                "name": "color",
                                                "type": "color",
                                                "default": "'#fff'",
                                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "fontStyle",
                                                "type": "enum",
                                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                                "children": [],
                                                "options": "'normal','italic','oblique'"
                                            },
                                            {
                                                "name": "fontWeight",
                                                "type": "enum",
                                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                                "children": [],
                                                "options": "'normal','bold','bolder','lighter'"
                                            },
                                            {
                                                "name": "fontFamily",
                                                "type": "enum",
                                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                                "children": [],
                                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                            },
                                            {
                                                "name": "fontSize",
                                                "type": "number",
                                                "default": "12",
                                                "desc": "font size.",
                                                "children": [],
                                                "min": "1",
                                                "step": "1"
                                            },
                                            {
                                                "name": "align",
                                                "type": "enum",
                                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                                "children": [],
                                                "options": "'left','center','right'"
                                            },
                                            {
                                                "name": "verticalAlign",
                                                "type": "enum",
                                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                                "children": [],
                                                "options": "'top','middle','bottom'"
                                            },
                                            {
                                                "name": "lineHeight",
                                                "type": "number",
                                                "default": "12",
                                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "backgroundColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "borderColor",
                                                "type": "color",
                                                "default": "'#fff'",
                                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "borderWidth",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Border width of the text fragment.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "borderType",
                                                "type": "enum",
                                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                                "children": [],
                                                "options": "'solid','dashed','dotted'"
                                            },
                                            {
                                                "name": "borderDashOffset",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "borderRadius",
                                                "type": "vector",
                                                "default": "0",
                                                "desc": "Border radius of the text fragment.",
                                                "children": [],
                                                "min": "0",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "padding",
                                                "type": "vector",
                                                "default": "0",
                                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                                "children": [],
                                                "min": "0",
                                                "dims": "T,R,B,L"
                                            },
                                            {
                                                "name": "shadowColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Shadow color of the text block.",
                                                "children": []
                                            },
                                            {
                                                "name": "shadowBlur",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Show blur of the text block.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "shadowOffsetX",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow X offset of the text block.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "shadowOffsetY",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow Y offset of the text block.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "textBorderColor",
                                                "type": "color",
                                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "textBorderWidth",
                                                "type": "number",
                                                "desc": "Stroke line width of the text.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textBorderType",
                                                "type": "enum",
                                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                                "children": [],
                                                "options": "'solid','dashed','dotted'"
                                            },
                                            {
                                                "name": "textBorderDashOffset",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "textShadowColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Shadow color of the text itself.",
                                                "children": []
                                            },
                                            {
                                                "name": "textShadowBlur",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow blue of the text itself.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textShadowOffsetX",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow X offset of the text itself.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textShadowOffsetY",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow Y offset of the text itself.",
                                                "children": [],
                                                "step": "0.5"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "select",
                "type": "Object",
                "desc": "Style of selected region.",
                "children": [
                    {
                        "name": "itemStyle",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "areaColor",
                                "type": "Color",
                                "desc": "The color of the map area.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "null",
                                "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#000'",
                                "desc": "border color, whose format is similar to that of `color`.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderCap",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                                "children": [],
                                "options": "'butt','round','square'"
                            },
                            {
                                "name": "borderJoin",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                                "children": [],
                                "options": "'bevel','round','miter'"
                            },
                            {
                                "name": "borderMiterLimit",
                                "type": "number",
                                "default": "10",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    },
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether to show label.",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rotate",
                                "type": "angle",
                                "default": "0",
                                "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                                "children": [],
                                "min": "-90",
                                "max": "90",
                                "step": "1"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": [
                                    "string",
                                    "Function"
                                ],
                                "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "fontStyle",
                                "type": "enum",
                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                "children": [],
                                "options": "'normal','italic','oblique'"
                            },
                            {
                                "name": "fontWeight",
                                "type": "enum",
                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                "children": [],
                                "options": "'normal','bold','bolder','lighter'"
                            },
                            {
                                "name": "fontFamily",
                                "type": "enum",
                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                "children": [],
                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                            },
                            {
                                "name": "fontSize",
                                "type": "number",
                                "default": "12",
                                "desc": "font size.",
                                "children": [],
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "verticalAlign",
                                "type": "enum",
                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'top','middle','bottom'"
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "default": "12",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "backgroundColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Border width of the text fragment.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderRadius",
                                "type": "vector",
                                "default": "0",
                                "desc": "Border radius of the text fragment.",
                                "children": [],
                                "min": "0",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "padding",
                                "type": "vector",
                                "default": "0",
                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                "children": [],
                                "min": "0",
                                "dims": "T,R,B,L"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text block.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Show blur of the text block.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "textBorderColor",
                                "type": "color",
                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "textBorderWidth",
                                "type": "number",
                                "desc": "Stroke line width of the text.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textBorderType",
                                "type": "enum",
                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "textBorderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "textShadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text itself.",
                                "children": []
                            },
                            {
                                "name": "textShadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow blue of the text itself.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "100",
                                "desc": "Width of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "default": "50",
                                "desc": "Height of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "overflow",
                                "type": "enum",
                                "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                                "children": [],
                                "options": "'truncate','break','breakAll'"
                            },
                            {
                                "name": "ellipsis",
                                "type": "string",
                                "default": "'...'",
                                "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                                "children": []
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "Object",
                                        "desc": "",
                                        "children": [
                                            {
                                                "name": "color",
                                                "type": "color",
                                                "default": "'#fff'",
                                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "fontStyle",
                                                "type": "enum",
                                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                                "children": [],
                                                "options": "'normal','italic','oblique'"
                                            },
                                            {
                                                "name": "fontWeight",
                                                "type": "enum",
                                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                                "children": [],
                                                "options": "'normal','bold','bolder','lighter'"
                                            },
                                            {
                                                "name": "fontFamily",
                                                "type": "enum",
                                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                                "children": [],
                                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                            },
                                            {
                                                "name": "fontSize",
                                                "type": "number",
                                                "default": "12",
                                                "desc": "font size.",
                                                "children": [],
                                                "min": "1",
                                                "step": "1"
                                            },
                                            {
                                                "name": "align",
                                                "type": "enum",
                                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                                "children": [],
                                                "options": "'left','center','right'"
                                            },
                                            {
                                                "name": "verticalAlign",
                                                "type": "enum",
                                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                                "children": [],
                                                "options": "'top','middle','bottom'"
                                            },
                                            {
                                                "name": "lineHeight",
                                                "type": "number",
                                                "default": "12",
                                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "backgroundColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "borderColor",
                                                "type": "color",
                                                "default": "'#fff'",
                                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "borderWidth",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Border width of the text fragment.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "borderType",
                                                "type": "enum",
                                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                                "children": [],
                                                "options": "'solid','dashed','dotted'"
                                            },
                                            {
                                                "name": "borderDashOffset",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "borderRadius",
                                                "type": "vector",
                                                "default": "0",
                                                "desc": "Border radius of the text fragment.",
                                                "children": [],
                                                "min": "0",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "padding",
                                                "type": "vector",
                                                "default": "0",
                                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                                "children": [],
                                                "min": "0",
                                                "dims": "T,R,B,L"
                                            },
                                            {
                                                "name": "shadowColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Shadow color of the text block.",
                                                "children": []
                                            },
                                            {
                                                "name": "shadowBlur",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Show blur of the text block.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "shadowOffsetX",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow X offset of the text block.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "shadowOffsetY",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow Y offset of the text block.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "textBorderColor",
                                                "type": "color",
                                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "textBorderWidth",
                                                "type": "number",
                                                "desc": "Stroke line width of the text.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textBorderType",
                                                "type": "enum",
                                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                                "children": [],
                                                "options": "'solid','dashed','dotted'"
                                            },
                                            {
                                                "name": "textBorderDashOffset",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "textShadowColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Shadow color of the text itself.",
                                                "children": []
                                            },
                                            {
                                                "name": "textShadowBlur",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow blue of the text itself.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textShadowOffsetX",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow X offset of the text itself.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textShadowOffsetY",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow Y offset of the text itself.",
                                                "children": [],
                                                "step": "0.5"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "blur",
                "type": "Object",
                "desc": "> Since `v5.1.0`\n\n\n\nStyle of blurred region.",
                "children": [
                    {
                        "name": "itemStyle",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "areaColor",
                                "type": "Color",
                                "desc": "The color of the map area.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "null",
                                "desc": "color.\n\n\n\n> Supports setting as solid color using `rgb(255,255,255)`, `rgba(255,255,255,1)`, `#fff`, etc. Also supports setting as gradient color and pattern fill, see [option.color](https://echarts.apache.org/en/option.html#color) for details",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#000'",
                                "desc": "border color, whose format is similar to that of `color`.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "border width. No border when it is set to be 0.\n\nborder width. No border when it is set to be 0.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderCap",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo specify how to draw the end points of the line.\nPossible values are:\n+ `'butt'`: The ends of lines are squared off at the endpoints.\n+ `'round'`: The ends of lines are rounded.\n+ `'square'`: The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.\n\nDefault value is `'butt'`. Refer to MDN [lineCap](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap) for more details.",
                                "children": [],
                                "options": "'butt','round','square'"
                            },
                            {
                                "name": "borderJoin",
                                "type": "enum",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo determine the shape used to join two line segments where they meet.\n\nPossible values are:\n+ `'bevel'`: Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.\n+ `'round'`: Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width.\n+ `'miter'`: Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is affected by the\n`borderMiterLimit`\nproperty.\n\nDefault value is `'bevel'`. Refer to MDN [lineJoin](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin) for more details.",
                                "children": [],
                                "options": "'bevel','round','miter'"
                            },
                            {
                                "name": "borderMiterLimit",
                                "type": "number",
                                "default": "10",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the miter limit ratio. Only works when\n`borderJoin`\nis set as `miter`.\n\nDefault value is `10`. Negative、`0`、`Infinity` and `NaN` values are ignored.\n\nRefer to MDN [miterLimit](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "",
                                "desc": "Size of shadow blur. This attribute should be used along with `shadowColor`,`shadowOffsetX`, `shadowOffsetY` to set shadow to component.\n\nFor example:\n```ts\n{\nshadowColor: 'rgba(0, 0, 0, 0.5)',\nshadowBlur: 10\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "",
                                "desc": "Shadow color. Support same format as `color`.",
                                "children": []
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the horizontal direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Offset distance on the vertical direction of shadow.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "opacity",
                                "type": "number",
                                "default": "1",
                                "desc": "Opacity of the component. Supports value from 0 to 1, and the component will not be drawn when set to 0.",
                                "children": [],
                                "min": "0",
                                "max": "1",
                                "step": "0.01"
                            }
                        ]
                    },
                    {
                        "name": "label",
                        "type": "Object",
                        "desc": "",
                        "children": [
                            {
                                "name": "show",
                                "type": "boolean",
                                "default": "false",
                                "desc": "Whether to show label.",
                                "children": []
                            },
                            {
                                "name": "position",
                                "type": "enum",
                                "desc": "Label position.\n\n**Followings are the options: **\n\n+ [x, y]\n\nUse relative percentage, or absolute pixel values to represent position of label relative to top-left corner of bounding box.\nFor example:\n```ts\n// Absolute pixel values\nposition: [10, 10],\n// Relative percentage\nposition: ['50%', '50%']\n```\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n+ 'inside'\n+ 'insideLeft'\n+ 'insideRight'\n+ 'insideTop'\n+ 'insideBottom'\n+ 'insideTopLeft'\n+ 'insideBottomLeft'\n+ 'insideTopRight'\n+ 'insideBottomRight'\n\nSee: [label position](doc-example/label-position).",
                                "children": [],
                                "options": "'top','left','right','bottom','inside','insideLeft','insideRight','insideTop','insideBottom','insideTopLeft','insideBottomLeft','insideTopRight','insideBottomRight','outside'"
                            },
                            {
                                "name": "distance",
                                "type": "number",
                                "default": "5",
                                "desc": "Distance to the host graphic element.\n\n\nIt is valid only when `position` is string value (like `'top'`、`'insideRight'`).\n\nSee: [label position](doc-example/label-position).",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "rotate",
                                "type": "angle",
                                "default": "0",
                                "desc": "Rotate label, from -90 degree to 90, positive value represents rotate anti-clockwise.\n\nSee: [label rotation](bar-label-rotation).",
                                "children": [],
                                "min": "-90",
                                "max": "90",
                                "step": "1"
                            },
                            {
                                "name": "offset",
                                "type": "vector",
                                "desc": "Whether to move text slightly. For example: `[30, 40]` means move `30` horizontally and move `40` vertically.",
                                "children": [],
                                "dims": "x,y",
                                "step": "0.5"
                            },
                            {
                                "name": "formatter",
                                "type": [
                                    "string",
                                    "Function"
                                ],
                                "desc": "Data label formatter, which supports string template and callback function. In either form, `\\n` is supported to represent a new line.\n\n\n**String template**\n\nModel variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n+ `{@xxx}`: the value of a dimension named `'xxx'`, for example, `{@product}` refers the value of `'product'` dimension.\n+ `{@[n]}`: the value of a dimension at the index of `n`, for example, `{@[3]}` refers the value at dimensions[3].\n\n**example: **\n```ts\nformatter: '{b}: {@score}'\n```\n\n**Callback function**\n\nCallback function is in form of:\n```ts\n(params: Object|Array) => string\n```\nwhere `params` is the single dataset needed by formatter, which is formed as:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```",
                                "children": []
                            },
                            {
                                "name": "color",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "fontStyle",
                                "type": "enum",
                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                "children": [],
                                "options": "'normal','italic','oblique'"
                            },
                            {
                                "name": "fontWeight",
                                "type": "enum",
                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                "children": [],
                                "options": "'normal','bold','bolder','lighter'"
                            },
                            {
                                "name": "fontFamily",
                                "type": "enum",
                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                "children": [],
                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                            },
                            {
                                "name": "fontSize",
                                "type": "number",
                                "default": "12",
                                "desc": "font size.",
                                "children": [],
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "align",
                                "type": "enum",
                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                "children": [],
                                "options": "'left','center','right'"
                            },
                            {
                                "name": "verticalAlign",
                                "type": "enum",
                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                "children": [],
                                "options": "'top','middle','bottom'"
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "default": "12",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "backgroundColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderColor",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "borderWidth",
                                "type": "number",
                                "default": "0",
                                "desc": "Border width of the text fragment.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "borderType",
                                "type": "enum",
                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "borderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "borderRadius",
                                "type": "vector",
                                "default": "0",
                                "desc": "Border radius of the text fragment.",
                                "children": [],
                                "min": "0",
                                "dims": "LT,RT, RB, LB"
                            },
                            {
                                "name": "padding",
                                "type": "vector",
                                "default": "0",
                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                "children": [],
                                "min": "0",
                                "dims": "T,R,B,L"
                            },
                            {
                                "name": "shadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text block.",
                                "children": []
                            },
                            {
                                "name": "shadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Show blur of the text block.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "shadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text block.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "textBorderColor",
                                "type": "color",
                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                "children": []
                            },
                            {
                                "name": "textBorderWidth",
                                "type": "number",
                                "desc": "Stroke line width of the text.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textBorderType",
                                "type": "enum",
                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "textBorderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "textShadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text itself.",
                                "children": []
                            },
                            {
                                "name": "textShadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow blue of the text itself.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "100",
                                "desc": "Width of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "default": "50",
                                "desc": "Height of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "overflow",
                                "type": "enum",
                                "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                                "children": [],
                                "options": "'truncate','break','breakAll'"
                            },
                            {
                                "name": "ellipsis",
                                "type": "string",
                                "default": "'...'",
                                "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                                "children": []
                            },
                            {
                                "name": "rich",
                                "type": "Object",
                                "desc": "\"Rich text styles\" can be defined in this `rich` property. For example:\n\n```ts\nlabel: {\n// Styles defined in 'rich' can be applied to some fragments\n// of text by adding some markers to those fragment, like\n// `{styleName|text content text content}`.\n// `'\\n'` is the newline character.\nformatter: [\n'{a|Style \"a\" is applied to this snippet}'\n'{b|Style \"b\" is applied to this snippet}This snippet use default style{x|use style \"x\"}'\n].join('\\n'),\n\nrich: {\na: {\ncolor: 'red',\nlineHeight: 10\n},\nb: {\nbackgroundColor: {\nimage: 'xxx/xxx.jpg'\n},\nheight: 40\n},\nx: {\nfontSize: 18,\nfontFamily: 'Microsoft YaHei',\nborderColor: '#449933',\nborderRadius: 4\n},\n...\n}\n}\n```\n\n\nFor more details, see [Rich Text](tutorial.html#Rich%20Text) please.",
                                "children": [
                                    {
                                        "name": "<style_name>",
                                        "type": "Object",
                                        "desc": "",
                                        "children": [
                                            {
                                                "name": "color",
                                                "type": "color",
                                                "default": "'#fff'",
                                                "desc": "text color.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "fontStyle",
                                                "type": "enum",
                                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                                "children": [],
                                                "options": "'normal','italic','oblique'"
                                            },
                                            {
                                                "name": "fontWeight",
                                                "type": "enum",
                                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                                "children": [],
                                                "options": "'normal','bold','bolder','lighter'"
                                            },
                                            {
                                                "name": "fontFamily",
                                                "type": "enum",
                                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                                "children": [],
                                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                                            },
                                            {
                                                "name": "fontSize",
                                                "type": "number",
                                                "default": "12",
                                                "desc": "font size.",
                                                "children": [],
                                                "min": "1",
                                                "step": "1"
                                            },
                                            {
                                                "name": "align",
                                                "type": "enum",
                                                "desc": "Horizontal alignment of text, automatic by default.\n\nOptions are:\n+ `'left'`\n+ `'center'`\n+ `'right'`\n\n\n\nIf `align` is not set in `rich`, `align` in parent level will be used. For example:\n\n```ts\n{\nalign: right,\nrich: {\na: {\n// `align` is not set, then it will be right\n}\n}\n}\n```",
                                                "children": [],
                                                "options": "'left','center','right'"
                                            },
                                            {
                                                "name": "verticalAlign",
                                                "type": "enum",
                                                "desc": "Vertical alignment of text, automatic by default.\n\nOptions are:\n+ `'top'`\n+ `'middle'`\n+ `'bottom'`\n\n\n\nIf `verticalAlign` is not set in `rich`, `verticalAlign` in parent level will be used. For example:\n\n```ts\n{\nverticalAlign: bottom,\nrich: {\na: {\n// `verticalAlign` is not set, then it will be bottom\n}\n}\n}\n```",
                                                "children": [],
                                                "options": "'top','middle','bottom'"
                                            },
                                            {
                                                "name": "lineHeight",
                                                "type": "number",
                                                "default": "12",
                                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "backgroundColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Background color of the text fragment.\n\nCan be color string, like `'#123234'`, `'red'`, `'rgba(0,23,11,0.3)'`.\n\nOr image can be used, for example:\n\n```ts\nbackgroundColor: {\nimage: 'xxx/xxx.png'\n// It can be URL of a image,\n// or dataURI,\n// or HTMLImageElement,\n// or HTMLCanvasElement.\n}\n```\n\n`width` or `height` can be specified when using background image, or\nauto adapted by default.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "borderColor",
                                                "type": "color",
                                                "default": "'#fff'",
                                                "desc": "Border color of the text fragment.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "borderWidth",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Border width of the text fragment.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "borderType",
                                                "type": "enum",
                                                "desc": "the text fragment border type.\n\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`borderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\nborderType: [5, 10],\n\nborderDashOffset: 5\n}\n```",
                                                "children": [],
                                                "options": "'solid','dashed','dotted'"
                                            },
                                            {
                                                "name": "borderDashOffset",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`borderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "borderRadius",
                                                "type": "vector",
                                                "default": "0",
                                                "desc": "Border radius of the text fragment.",
                                                "children": [],
                                                "min": "0",
                                                "dims": "LT,RT, RB, LB"
                                            },
                                            {
                                                "name": "padding",
                                                "type": "vector",
                                                "default": "0",
                                                "desc": "Padding of the text fragment, for example:\n\n+ `padding: [3, 4, 5, 6]`: represents padding of `[top, right, bottom, left]`.\n+ `padding: 4`: represents `padding: [4, 4, 4, 4]`.\n+ `padding: [3, 4]`: represents `padding: [3, 4, 3, 4]`.\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.",
                                                "children": [],
                                                "min": "0",
                                                "dims": "T,R,B,L"
                                            },
                                            {
                                                "name": "shadowColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Shadow color of the text block.",
                                                "children": []
                                            },
                                            {
                                                "name": "shadowBlur",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Show blur of the text block.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "shadowOffsetX",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow X offset of the text block.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "shadowOffsetY",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow Y offset of the text block.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "width",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "height",
                                                "type": [
                                                    "number",
                                                    "string"
                                                ],
                                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                                "children": []
                                            },
                                            {
                                                "name": "textBorderColor",
                                                "type": "color",
                                                "desc": "Stroke color of the text.\n\n\n\n\nIf set as `'inherit'`, the color will assigned as visual color, such as series color.",
                                                "children": []
                                            },
                                            {
                                                "name": "textBorderWidth",
                                                "type": "number",
                                                "desc": "Stroke line width of the text.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textBorderType",
                                                "type": "enum",
                                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                                "children": [],
                                                "options": "'solid','dashed','dotted'"
                                            },
                                            {
                                                "name": "textBorderDashOffset",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                                "children": [],
                                                "min": "0",
                                                "step": "1"
                                            },
                                            {
                                                "name": "textShadowColor",
                                                "type": "color",
                                                "default": "'transparent'",
                                                "desc": "Shadow color of the text itself.",
                                                "children": []
                                            },
                                            {
                                                "name": "textShadowBlur",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow blue of the text itself.",
                                                "children": [],
                                                "min": "0",
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textShadowOffsetX",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow X offset of the text itself.",
                                                "children": [],
                                                "step": "0.5"
                                            },
                                            {
                                                "name": "textShadowOffsetY",
                                                "type": "number",
                                                "default": "0",
                                                "desc": "Shadow Y offset of the text itself.",
                                                "children": [],
                                                "step": "0.5"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "name": "tooltip",
                "type": "Object",
                "desc": "> Since `v5.1.0`\n\n\n\n\ntooltip settings in this region.",
                "children": [
                    {
                        "name": "show",
                        "type": "boolean",
                        "default": "true",
                        "desc": "Whether to show the tooltip component.",
                        "children": []
                    },
                    {
                        "name": "position",
                        "type": [
                            "string",
                            "Array"
                        ],
                        "desc": "The position of the tooltip's floating layer, which would follow the position of mouse by default.\n\nOptions:\n\n+ `Array`\n\nDisplay the position of tooltip's floating layer through array, which supports absolute position and relative percentage.\n\nExample:\n\n```ts\n// absolute position, which is 10px to the left side and 10px to the top side of the container\nposition: [10, 10]\n// relative position, in the exact center of the container\nposition: ['50%', '50%']\n```\n\n+ `Function`\n\nCallback function in the following form:\n```ts\n(point: Array, params: Object|Array.<Object>, dom: HTMLDomElement, rect: Object, size: Object) => Array\n```\n\n**Parameters:**<br>\npoint: Mouse position.<br>\nparam: The same as formatter.<br>\ndom: The DOM object of tooltip.<br>\nrect: It is valid only when mouse is on graphic elements, which stands for a bounding box with `x`, `y`, `width`, and `height`.<br>\nsize: The size of dom echarts container. For example: `{contentSize: [width, height], viewSize: [width, height]}`. <br>\n\n**Return:**<br>\nReturn value is an array standing for tooltip position, which can be absolute pixels, or relative percentage.<br>\nOr can be an object, like `{left: 10, top: 30}`, or `{right: '20%', bottom: 40}`.<br>\n\nFor example:\n```ts\nposition: function (point, params, dom, rect, size) {\n// fixed at top\nreturn [point[0], '10%'];\n}\n```\nOr:\n```ts\nposition: function (pos, params, dom, rect, size) {\n// tooltip will be fixed on the right if mouse hovering on the left,\n// and on the left if hovering on the right.\nvar obj = {top: 60};\nobj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\nreturn obj;\n}\n```\n\n+ `'inside'`\n\nCenter position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'top'`\n\nTop position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'left'`\n\nLeft position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'right'`\n\nRight position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'bottom'`\n\nBottom position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.",
                        "children": []
                    },
                    {
                        "name": "formatter",
                        "type": [
                            "string",
                            "Function"
                        ],
                        "desc": "The content formatter of tooltip's floating layer which supports string template and callback function.\n\n**1. String template**\n\nThe template variables are `{a}`, `{b}`, `{c}`, `{d}` and `{e}`, which stands for series name, data name and data value and ect. When [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is set to be `'axis'`, there may be data from multiple series. In this time, series index can be referred as `{a0}`, `{a1}`, or `{a2}`.\n\n`{a}`, `{b}`, `{c}`, `{d}` have different meanings for different series types:\n\n+ Line (area) charts, bar (column) charts, K charts: `{a}` for series name, `{b}` for category name, `{c}` for data value, `{d}` for none;\n\n+ Scatter (bubble) charts: `{a}` for series name, `{b}` for data name, `{c}` for data value, `{d}` for none;\n\n+ Map: `{a}` for series name, `{b}` for area name, `{c}` for merging data, `{d}` for none;\n\n+ Pie charts, gauge charts, funnel charts: `{a}` for series name, `{b}` for data item name, `{c}` for data value, `{d}` for percentage.\n\n**Example: **\n```ts\nformatter: '{b0}: {c0}<br />{b1}: {c1}'\n```\n\n\n**2. Callback function**\n\nThe format of callback function:\n\n```ts\n(params: Object|Array, ticket: string, callback: (ticket: string, html: string)) => string | HTMLElement | HTMLElement[]\n```\n\nThe first parameter `params` is the data that the formatter needs. Its format is shown as follows:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\nWhen [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'axis'`, or when tooltip is triggered by [axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer), `params` is the data array of multiple series. The content of each item of the array is the same as above. Besides,\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n**Note: **Using array to present all the parameters in ECharts 2.x is not supported anymore.\n\nThe second parameter `ticket` is the asynchronous callback flag which should be used along with the third parameter `callback` when it is used.\n\nThe third parameter `callback` is asynchronous callback. When the content of tooltip is acquired asynchronously, `ticket` and `htm` as introduced above can be used to update tooltip with callback.\n\nExample:\n```ts\nformatter: function (params, ticket, callback) {\n$.get('detail?name=' + params.name, function (content) {\ncallback(ticket, toHTML(content));\n});\nreturn 'Loading';\n}\n```",
                        "children": []
                    },
                    {
                        "name": "valueFormatter",
                        "type": "string",
                        "desc": "> Since `v5.3.0`\n\n\n\nCallback function for formatting the value section in tooltip.\n\nInterface:\n```ts\n(value: number | string) => string\n```\n\nExample:\n```ts\n// Add $ prefix\nvalueFormatter: (value) => '$' + value.toFixed(2)\n```",
                        "children": []
                    },
                    {
                        "name": "backgroundColor",
                        "type": "Color",
                        "default": "'rgba(50,50,50,0.7)'",
                        "desc": "The background color of tooltip's floating layer.",
                        "children": []
                    },
                    {
                        "name": "borderColor",
                        "type": "color",
                        "default": "'#333'",
                        "desc": "The border color of tooltip's floating layer.",
                        "children": []
                    },
                    {
                        "name": "borderWidth",
                        "type": "number",
                        "default": "0",
                        "desc": "The border width of tooltip's floating layer.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "padding",
                        "type": "vector",
                        "default": "5",
                        "desc": "The floating layer of tooltip space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom.\n\nExamples:\n```ts\n// Set padding to be 5\npadding: 5\n// Set the top and bottom paddings to be 5, and left and right paddings to be 10\npadding: [5, 10]\n// Set each of the four paddings separately\npadding: [\n5,  // up\n10, // right\n5,  // down\n10, // left\n]\n```",
                        "children": [],
                        "dims": "T,R,B,L"
                    },
                    {
                        "name": "textStyle",
                        "type": "Object",
                        "desc": "The text style of tooltip's floating layer.",
                        "children": [
                            {
                                "name": "color",
                                "type": "color",
                                "default": "'#fff'",
                                "desc": "text color.",
                                "children": []
                            },
                            {
                                "name": "fontStyle",
                                "type": "enum",
                                "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                                "children": [],
                                "options": "'normal','italic','oblique'"
                            },
                            {
                                "name": "fontWeight",
                                "type": "enum",
                                "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                                "children": [],
                                "options": "'normal','bold','bolder','lighter'"
                            },
                            {
                                "name": "fontFamily",
                                "type": "enum",
                                "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                                "children": [],
                                "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                            },
                            {
                                "name": "fontSize",
                                "type": "number",
                                "default": "14",
                                "desc": "font size.",
                                "children": [],
                                "min": "1",
                                "step": "1"
                            },
                            {
                                "name": "lineHeight",
                                "type": "number",
                                "default": "12",
                                "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "width",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "height",
                                "type": [
                                    "number",
                                    "string"
                                ],
                                "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                                "children": []
                            },
                            {
                                "name": "textBorderColor",
                                "type": "color",
                                "desc": "Stroke color of the text.",
                                "children": []
                            },
                            {
                                "name": "textBorderWidth",
                                "type": "number",
                                "desc": "Stroke line width of the text.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textBorderType",
                                "type": "enum",
                                "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                                "children": [],
                                "options": "'solid','dashed','dotted'"
                            },
                            {
                                "name": "textBorderDashOffset",
                                "type": "number",
                                "default": "0",
                                "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                                "children": [],
                                "min": "0",
                                "step": "1"
                            },
                            {
                                "name": "textShadowColor",
                                "type": "color",
                                "default": "'transparent'",
                                "desc": "Shadow color of the text itself.",
                                "children": []
                            },
                            {
                                "name": "textShadowBlur",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow blue of the text itself.",
                                "children": [],
                                "min": "0",
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetX",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow X offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "textShadowOffsetY",
                                "type": "number",
                                "default": "0",
                                "desc": "Shadow Y offset of the text itself.",
                                "children": [],
                                "step": "0.5"
                            },
                            {
                                "name": "width",
                                "type": "number",
                                "default": "100",
                                "desc": "Width of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "height",
                                "type": "number",
                                "default": "50",
                                "desc": "Height of text block.",
                                "children": [],
                                "min": "1",
                                "max": "500",
                                "step": "1"
                            },
                            {
                                "name": "overflow",
                                "type": "enum",
                                "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                                "children": [],
                                "options": "'truncate','break','breakAll'"
                            },
                            {
                                "name": "ellipsis",
                                "type": "string",
                                "default": "'...'",
                                "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                                "children": []
                            }
                        ]
                    },
                    {
                        "name": "extraCssText",
                        "type": "text",
                        "desc": "Extra CSS style for floating layer. The following is an example for adding shadow.\n\n```ts\nextraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'\n```",
                        "children": []
                    }
                ]
            }
        ]
    },
    {
        "name": "silent",
        "type": "boolean",
        "default": "false",
        "desc": "Whether to ignore mouse events. Default value is false, for triggering and responding to mouse events.",
        "children": []
    },
    {
        "name": "tooltip",
        "type": "Object",
        "desc": "> Since `v5.1.0`\n\n\n\n\ntooltip settings in the coordinate system component.\n\n\n\n**General Introduction:**\n\ntooltip can be configured on different places:\n\n+ Configured on global: [tooltip](https://echarts.apache.org/en/option.html#tooltip)\n\n+ Configured in a coordinate system: [grid.tooltip](https://echarts.apache.org/en/option.html#grid.tooltip), [polar.tooltip](https://echarts.apache.org/en/option.html#polar.tooltip), [single.tooltip](https://echarts.apache.org/en/option.html#single.tooltip)\n\n+ Configured in a series: [series.tooltip](https://echarts.apache.org/en/option.html#series.tooltip)\n\n+ Configured in each item of `series.data`: [series.data.tooltip](https://echarts.apache.org/en/option.html#series.data.tooltip)",
        "children": [
            {
                "name": "show",
                "type": "boolean",
                "default": "true",
                "desc": "Whether to show the tooltip component.",
                "children": []
            },
            {
                "name": "position",
                "type": [
                    "string",
                    "Array"
                ],
                "desc": "The position of the tooltip's floating layer, which would follow the position of mouse by default.\n\nOptions:\n\n+ `Array`\n\nDisplay the position of tooltip's floating layer through array, which supports absolute position and relative percentage.\n\nExample:\n\n```ts\n// absolute position, which is 10px to the left side and 10px to the top side of the container\nposition: [10, 10]\n// relative position, in the exact center of the container\nposition: ['50%', '50%']\n```\n\n+ `Function`\n\nCallback function in the following form:\n```ts\n(point: Array, params: Object|Array.<Object>, dom: HTMLDomElement, rect: Object, size: Object) => Array\n```\n\n**Parameters:**<br>\npoint: Mouse position.<br>\nparam: The same as formatter.<br>\ndom: The DOM object of tooltip.<br>\nrect: It is valid only when mouse is on graphic elements, which stands for a bounding box with `x`, `y`, `width`, and `height`.<br>\nsize: The size of dom echarts container. For example: `{contentSize: [width, height], viewSize: [width, height]}`. <br>\n\n**Return:**<br>\nReturn value is an array standing for tooltip position, which can be absolute pixels, or relative percentage.<br>\nOr can be an object, like `{left: 10, top: 30}`, or `{right: '20%', bottom: 40}`.<br>\n\nFor example:\n```ts\nposition: function (point, params, dom, rect, size) {\n// fixed at top\nreturn [point[0], '10%'];\n}\n```\nOr:\n```ts\nposition: function (pos, params, dom, rect, size) {\n// tooltip will be fixed on the right if mouse hovering on the left,\n// and on the left if hovering on the right.\nvar obj = {top: 60};\nobj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 5;\nreturn obj;\n}\n```\n\n+ `'inside'`\n\nCenter position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'top'`\n\nTop position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'left'`\n\nLeft position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'right'`\n\nRight position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.\n\n+ `'bottom'`\n\nBottom position of the graphic element where the mouse is in, which is only valid when [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'item'`.",
                "children": []
            },
            {
                "name": "formatter",
                "type": [
                    "string",
                    "Function"
                ],
                "desc": "The content formatter of tooltip's floating layer which supports string template and callback function.\n\n**1. String template**\n\nThe template variables are `{a}`, `{b}`, `{c}`, `{d}` and `{e}`, which stands for series name, data name and data value and ect. When [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is set to be `'axis'`, there may be data from multiple series. In this time, series index can be referred as `{a0}`, `{a1}`, or `{a2}`.\n\n`{a}`, `{b}`, `{c}`, `{d}` have different meanings for different series types:\n\n+ Line (area) charts, bar (column) charts, K charts: `{a}` for series name, `{b}` for category name, `{c}` for data value, `{d}` for none;\n\n+ Scatter (bubble) charts: `{a}` for series name, `{b}` for data name, `{c}` for data value, `{d}` for none;\n\n+ Map: `{a}` for series name, `{b}` for area name, `{c}` for merging data, `{d}` for none;\n\n+ Pie charts, gauge charts, funnel charts: `{a}` for series name, `{b}` for data item name, `{c}` for data value, `{d}` for percentage.\n\n**Example: **\n```ts\nformatter: '{b0}: {c0}<br />{b1}: {c1}'\n```\n\n\n**2. Callback function**\n\nThe format of callback function:\n\n```ts\n(params: Object|Array, ticket: string, callback: (ticket: string, html: string)) => string | HTMLElement | HTMLElement[]\n```\n\nThe first parameter `params` is the data that the formatter needs. Its format is shown as follows:\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\nWhen [trigger](https://echarts.apache.org/en/option.html#tooltip.trigger) is `'axis'`, or when tooltip is triggered by [axisPointer](https://echarts.apache.org/en/option.html#xAxis.axisPointer), `params` is the data array of multiple series. The content of each item of the array is the same as above. Besides,\n\n\n\n```ts\n{\ncomponentType: 'series',\n// Series type\nseriesType: string,\n// Series index in option.series\nseriesIndex: number,\n// Series name\nseriesName: string,\n// Data name, or category name\nname: string,\n// Data index in input data array\ndataIndex: number,\n// Original data as input\ndata: Object,\n// Value of data. In most series it is the same as data.\n// But in some series it is some part of the data (e.g., in map, radar)\nvalue: number|Array|Object,\n// encoding info of coordinate system\n// Key: coord, like ('x' 'y' 'radius' 'angle')\n// value: Must be an array, not null/undefined. Contain dimension indices, like:\n// {\n//     x: [2] // values on dimension index 2 are mapped to x axis.\n//     y: [0] // values on dimension index 0 are mapped to y axis.\n// }\nencode: Object,\n// dimension names list\ndimensionNames: Array<String>,\n// data dimension index, for example 0 or 1 or 2 ...\n// Only work in `radar` series.\ndimensionIndex: number,\n// Color of data\ncolor: string\n}\n```\n\n**How to use `encode` and `dimensionNames`?**\n\nWhen the dataset is like\n```ts\ndataset: {\nsource: [\n['Matcha Latte', 43.3, 85.8, 93.7],\n['Milk Tea', 83.1, 73.4, 55.1],\n['Cheese Cocoa', 86.4, 65.2, 82.5],\n['Walnut Brownie', 72.4, 53.9, 39.1]\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.encode.y[0]]\n```\n\nWhen the dataset is like\n```ts\ndataset: {\ndimensions: ['product', '2015', '2016', '2017'],\nsource: [\n{product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\n{product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\n{product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\n{product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\n]\n}\n```\nWe can get the value of the y-axis via\n```ts\nparams.value[params.dimensionNames[params.encode.y[0]]]\n```\n\n\n\n**Note: **Using array to present all the parameters in ECharts 2.x is not supported anymore.\n\nThe second parameter `ticket` is the asynchronous callback flag which should be used along with the third parameter `callback` when it is used.\n\nThe third parameter `callback` is asynchronous callback. When the content of tooltip is acquired asynchronously, `ticket` and `htm` as introduced above can be used to update tooltip with callback.\n\nExample:\n```ts\nformatter: function (params, ticket, callback) {\n$.get('detail?name=' + params.name, function (content) {\ncallback(ticket, toHTML(content));\n});\nreturn 'Loading';\n}\n```",
                "children": []
            },
            {
                "name": "valueFormatter",
                "type": "string",
                "desc": "> Since `v5.3.0`\n\n\n\nCallback function for formatting the value section in tooltip.\n\nInterface:\n```ts\n(value: number | string) => string\n```\n\nExample:\n```ts\n// Add $ prefix\nvalueFormatter: (value) => '$' + value.toFixed(2)\n```",
                "children": []
            },
            {
                "name": "backgroundColor",
                "type": "Color",
                "default": "'rgba(50,50,50,0.7)'",
                "desc": "The background color of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "borderColor",
                "type": "color",
                "default": "'#333'",
                "desc": "The border color of tooltip's floating layer.",
                "children": []
            },
            {
                "name": "borderWidth",
                "type": "number",
                "default": "0",
                "desc": "The border width of tooltip's floating layer.",
                "children": [],
                "step": "0.5"
            },
            {
                "name": "padding",
                "type": "vector",
                "default": "5",
                "desc": "The floating layer of tooltip space around content. The unit is px. Default values for each position are 5. And they can be set to different values with left, right, top, and bottom.\n\nExamples:\n```ts\n// Set padding to be 5\npadding: 5\n// Set the top and bottom paddings to be 5, and left and right paddings to be 10\npadding: [5, 10]\n// Set each of the four paddings separately\npadding: [\n5,  // up\n10, // right\n5,  // down\n10, // left\n]\n```",
                "children": [],
                "dims": "T,R,B,L"
            },
            {
                "name": "textStyle",
                "type": "Object",
                "desc": "The text style of tooltip's floating layer.",
                "children": [
                    {
                        "name": "color",
                        "type": "color",
                        "default": "'#fff'",
                        "desc": "text color.",
                        "children": []
                    },
                    {
                        "name": "fontStyle",
                        "type": "enum",
                        "desc": "font style.\n\nOptions are:\n+ `'normal'`\n+ `'italic'`\n+ `'oblique'`",
                        "children": [],
                        "options": "'normal','italic','oblique'"
                    },
                    {
                        "name": "fontWeight",
                        "type": "enum",
                        "desc": "font thick weight.\n\nOptions are:\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...",
                        "children": [],
                        "options": "'normal','bold','bolder','lighter'"
                    },
                    {
                        "name": "fontFamily",
                        "type": "enum",
                        "desc": "font family.\n\nCan also be 'serif' , 'monospace', ...",
                        "children": [],
                        "options": "'sans-serif','serif','monospace','Arial','Courier New'"
                    },
                    {
                        "name": "fontSize",
                        "type": "number",
                        "default": "14",
                        "desc": "font size.",
                        "children": [],
                        "min": "1",
                        "step": "1"
                    },
                    {
                        "name": "lineHeight",
                        "type": "number",
                        "default": "12",
                        "desc": "Line height of the text fragment.\n\n\n\nIf `lineHeight` is not set in `rich`, `lineHeight` in parent level will be used. For example:\n\n```ts\n{\nlineHeight: 56,\nrich: {\na: {\n// `lineHeight` is not set, then it will be 56\n}\n}\n}\n```",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "width",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Width of the text block. It is the width of the text by default. In most cases, there is no need to specify it. You may want to use it in some cases like make simple table or using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\n`width` can also be percent string, like `'100%'`, which represents the percent of `contentWidth` (that is, the width without `padding`) of its container box. It is based on `contentWidth` because that each text fragment is layout based on the `content box`, where it makes no sense that calculating width based on `outerWith` in prectice.\n\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "height",
                        "type": [
                            "number",
                            "string"
                        ],
                        "desc": "Height of the text block. It is the width of the text by default. You may want to use it in some cases like using background image (see `backgroundColor`).\n\nNotice, `width` and `height` specifies the width and height of the content, without `padding`.\n\nNotice, `width` and `height` only work when `rich` specified.",
                        "children": []
                    },
                    {
                        "name": "textBorderColor",
                        "type": "color",
                        "desc": "Stroke color of the text.",
                        "children": []
                    },
                    {
                        "name": "textBorderWidth",
                        "type": "number",
                        "desc": "Stroke line width of the text.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textBorderType",
                        "type": "enum",
                        "desc": "Stroke line type of the text.\n\n\nPossible values are:\n+ `'solid'`\n+ `'dashed'`\n+ `'dotted'`\n\nSince `v5.0.0`, it can also be a number or a number array to specify the [dash array](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray) of the line. With\n`textBorderDashOffset`\n, we can make the line style more flexible.\n\nFor example：\n```ts\n{\n\ntextBorderType: [5, 10],\n\ntextBorderDashOffset: 5\n}\n```",
                        "children": [],
                        "options": "'solid','dashed','dotted'"
                    },
                    {
                        "name": "textBorderDashOffset",
                        "type": "number",
                        "default": "0",
                        "desc": "> Since `v5.0.0`\n\n\n\n\n\nTo set the line dash offset. With\n`textBorderType`\n, we can make the line style more flexible.\n\nRefer to MDN [lineDashOffset](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset) for more details.",
                        "children": [],
                        "min": "0",
                        "step": "1"
                    },
                    {
                        "name": "textShadowColor",
                        "type": "color",
                        "default": "'transparent'",
                        "desc": "Shadow color of the text itself.",
                        "children": []
                    },
                    {
                        "name": "textShadowBlur",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow blue of the text itself.",
                        "children": [],
                        "min": "0",
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetX",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow X offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "textShadowOffsetY",
                        "type": "number",
                        "default": "0",
                        "desc": "Shadow Y offset of the text itself.",
                        "children": [],
                        "step": "0.5"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "default": "100",
                        "desc": "Width of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "default": "50",
                        "desc": "Height of text block.",
                        "children": [],
                        "min": "1",
                        "max": "500",
                        "step": "1"
                    },
                    {
                        "name": "overflow",
                        "type": "enum",
                        "desc": "Determine how to display the text when it's overflow. Available when `width` is set.\n\n+ `'truncate'` Truncate the text and trailing with `ellipsis`.\n+ `'break'` Break by word\n+ `'breakAll'` Break by character.",
                        "children": [],
                        "options": "'truncate','break','breakAll'"
                    },
                    {
                        "name": "ellipsis",
                        "type": "string",
                        "default": "'...'",
                        "desc": "Ellipsis to be displayed when `overflow` is set to `truncate`.\n\n+ `'truncate'` Truncate the overflow lines.",
                        "children": []
                    }
                ]
            },
            {
                "name": "extraCssText",
                "type": "text",
                "desc": "Extra CSS style for floating layer. The following is an example for adding shadow.\n\n```ts\nextraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'\n```",
                "children": []
            }
        ]
    }
]